
; Some timings (6/13/93, Scheme 48 0.20, benchmark mode, HP 9000/710)
;
; I would call these timings *very preliminary* - it's not even clear
; that the example I used is a particularly good test case.  More work
; is needed, but I don't have time to do it.
;
; Summary:
; 
; Read time: 0.33 seconds   [Scheme 48 reader is slow!]
;
; preprocessor interpreter clean?   close time   first call    subsequently
; -            ev          -        0.00         0.62          0.62
; ex           ev          no       0.44         0.64          0.64
; ex           ev          yes      0.84         0.38          0.38
; prep lazy    ev-node     no       0.00         0.83          0.25
; prep lazy    ev-node     yes      0.00         0.99          0.20
; prep eager   ev-node     no       0.56         0.27          0.27
; prep eager   ev-node     yes      0.89         0.20          0.20
;
; EV is a pure interpreter, with no macro memoization.
; EX is a full macro expander.
; PREP is a simple preprocessor whose output is interpretable by EV-NODE.
; "Lazy," "eager," and "clean" are described at the top of faster.scm.
; "Close time" is the time, other than that spent in READ, that would be
; required when loading the test procedure.
; "First call" is the time required the first time the procedure is called.
; "Subsequently" is the time required on subsequent calls.  The first and
; subsequent times can only be different under the lazy preprocessing
; strategy.
;
; Method (crude but effective):
;
; (set-memoizer! (lambda (x y) #f))
; ,time (tst loser)	       0.00
; ,time ((tst loser) 1)        0.62
;
; (set-clean?! #f)
; ,time (begin (ex loser) 0)   0.44
; (define z (ex loser))
; ,time ((tst z) 1)	       0.64    - even worse than ev?!
;
; (set-clean?! #t)
; ,time (begin (ex loser) 0)   0.84
; (define z (ex loser))
; ,time ((tst z) 1)	       0.38
; etc.

(define loser
  '(lambda (n)
     (do ((i n (- i 1)))
	 ((= i 0))
       (let ((j i)) i)			;200 of them
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i)
       (let ((j i)) i))))

