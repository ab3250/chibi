/* Generated from maze.scm by the CHICKEN compiler
   http://www.call-cc.org
   2017-07-10 14:21
   Version 4.12.0 (rev 6ea24b6)
   linux-unix-gnu-x86-64 [ 64bit manyargs dload ptables ]
   compiled 2017-02-19 on yves.more-magic.net (Linux)
   command line: maze.scm -output-file maze.c
   used units: library eval chicken_2dsyntax extras
*/

#include "chicken.h"

static C_PTABLE_ENTRY *create_ptable(void);
C_noret_decl(C_library_toplevel)
C_externimport void C_ccall C_library_toplevel(C_word c,C_word *av) C_noret;
C_noret_decl(C_eval_toplevel)
C_externimport void C_ccall C_eval_toplevel(C_word c,C_word *av) C_noret;
C_noret_decl(C_chicken_2dsyntax_toplevel)
C_externimport void C_ccall C_chicken_2dsyntax_toplevel(C_word c,C_word *av) C_noret;
C_noret_decl(C_extras_toplevel)
C_externimport void C_ccall C_extras_toplevel(C_word c,C_word *av) C_noret;

static C_TLS C_word lf[117];
static double C_possibly_force_alignment;
static C_char C_TLS li0[] C_aligned={C_lihdr(0,0,20),40,106,105,102,102,105,101,115,45,112,101,114,45,115,101,99,111,110,100,41,0,0,0,0};
static C_char C_TLS li1[] C_aligned={C_lihdr(0,0,12),40,115,113,117,97,114,101,32,120,54,49,41,0,0,0,0};
static C_char C_TLS li2[] C_aligned={C_lihdr(0,0,33),40,116,104,105,115,45,115,99,104,101,109,101,45,105,109,112,108,101,109,101,110,116,97,116,105,111,110,45,110,97,109,101,41,0,0,0,0,0,0,0};
static C_char C_TLS li3[] C_aligned={C_lihdr(0,0,17),40,98,105,116,119,105,115,101,45,110,111,116,32,120,54,54,41,0,0,0,0,0,0,0};
static C_char C_TLS li4[] C_aligned={C_lihdr(0,0,21),40,98,105,116,119,105,115,101,45,97,110,100,32,120,54,56,32,121,54,57,41,0,0,0};
static C_char C_TLS li5[] C_aligned={C_lihdr(0,0,13),40,100,105,118,32,120,55,55,32,121,55,56,41,0,0,0};
static C_char C_TLS li6[] C_aligned={C_lihdr(0,0,13),40,109,111,100,32,120,57,48,32,121,57,49,41,0,0,0};
static C_char C_TLS li7[] C_aligned={C_lihdr(0,0,19),40,114,97,110,100,111,109,45,115,116,97,116,101,32,110,49,48,51,41,0,0,0,0,0};
static C_char C_TLS li8[] C_aligned={C_lihdr(0,0,15),40,114,97,110,100,32,115,116,97,116,101,49,48,53,41,0};
static C_char C_TLS li9[] C_aligned={C_lihdr(0,0,26),40,114,97,110,100,111,109,45,105,110,116,32,110,49,49,55,32,115,116,97,116,101,49,49,56,41,0,0,0,0,0,0};
static C_char C_TLS li10[] C_aligned={C_lihdr(0,0,19),40,98,97,115,101,45,115,101,116,32,110,101,108,116,115,49,50,48,41,0,0,0,0,0};
static C_char C_TLS li11[] C_aligned={C_lihdr(0,0,9),40,108,112,32,120,49,51,49,41,0,0,0,0,0,0,0};
static C_char C_TLS li12[] C_aligned={C_lihdr(0,0,9),40,108,112,32,114,49,50,52,41,0,0,0,0,0,0,0};
static C_char C_TLS li13[] C_aligned={C_lihdr(0,0,19),40,103,101,116,45,115,101,116,45,114,111,111,116,32,115,49,50,50,41,0,0,0,0,0};
static C_char C_TLS li14[] C_aligned={C_lihdr(0,0,24),40,115,101,116,45,101,113,117,97,108,63,32,115,49,49,52,50,32,115,50,49,52,51,41};
static C_char C_TLS li15[] C_aligned={C_lihdr(0,0,15),40,115,101,116,45,115,105,122,101,32,115,49,52,53,41,0};
static C_char C_TLS li16[] C_aligned={C_lihdr(0,0,20),40,117,110,105,111,110,33,32,115,49,49,52,55,32,115,50,49,52,56,41,0,0,0,0};
static C_char C_TLS li17[] C_aligned={C_lihdr(0,0,39),40,109,97,107,101,45,119,97,108,108,32,111,119,110,101,114,49,54,49,32,110,101,105,103,104,98,111,114,49,54,50,32,98,105,116,49,54,51,41,0};
static C_char C_TLS li18[] C_aligned={C_lihdr(0,0,17),40,119,97,108,108,58,111,119,110,101,114,32,111,49,54,53,41,0,0,0,0,0,0,0};
static C_char C_TLS li19[] C_aligned={C_lihdr(0,0,26),40,115,101,116,45,119,97,108,108,58,111,119,110,101,114,32,111,49,54,55,32,118,49,54,56,41,0,0,0,0,0,0};
static C_char C_TLS li20[] C_aligned={C_lihdr(0,0,20),40,119,97,108,108,58,110,101,105,103,104,98,111,114,32,111,49,55,48,41,0,0,0,0};
static C_char C_TLS li21[] C_aligned={C_lihdr(0,0,29),40,115,101,116,45,119,97,108,108,58,110,101,105,103,104,98,111,114,32,111,49,55,50,32,118,49,55,51,41,0,0,0};
static C_char C_TLS li22[] C_aligned={C_lihdr(0,0,15),40,119,97,108,108,58,98,105,116,32,111,49,55,53,41,0};
static C_char C_TLS li23[] C_aligned={C_lihdr(0,0,24),40,115,101,116,45,119,97,108,108,58,98,105,116,32,111,49,55,55,32,118,49,55,56,41};
static C_char C_TLS li24[] C_aligned={C_lihdr(0,0,30),40,109,97,107,101,45,99,101,108,108,32,114,101,97,99,104,97,98,108,101,49,56,48,32,105,100,49,56,49,41,0,0};
static C_char C_TLS li25[] C_aligned={C_lihdr(0,0,21),40,99,101,108,108,58,114,101,97,99,104,97,98,108,101,32,111,49,56,51,41,0,0,0};
static C_char C_TLS li26[] C_aligned={C_lihdr(0,0,30),40,115,101,116,45,99,101,108,108,58,114,101,97,99,104,97,98,108,101,32,111,49,56,53,32,118,49,56,54,41,0,0};
static C_char C_TLS li27[] C_aligned={C_lihdr(0,0,14),40,99,101,108,108,58,105,100,32,111,49,56,56,41,0,0};
static C_char C_TLS li28[] C_aligned={C_lihdr(0,0,23),40,115,101,116,45,99,101,108,108,58,105,100,32,111,49,57,48,32,118,49,57,49,41,0};
static C_char C_TLS li29[] C_aligned={C_lihdr(0,0,17),40,99,101,108,108,58,119,97,108,108,115,32,111,49,57,51,41,0,0,0,0,0,0,0};
static C_char C_TLS li30[] C_aligned={C_lihdr(0,0,26),40,115,101,116,45,99,101,108,108,58,119,97,108,108,115,32,111,49,57,53,32,118,49,57,54,41,0,0,0,0,0,0};
static C_char C_TLS li31[] C_aligned={C_lihdr(0,0,18),40,99,101,108,108,58,112,97,114,101,110,116,32,111,49,57,56,41,0,0,0,0,0,0};
static C_char C_TLS li32[] C_aligned={C_lihdr(0,0,27),40,115,101,116,45,99,101,108,108,58,112,97,114,101,110,116,32,111,50,48,48,32,118,50,48,49,41,0,0,0,0,0};
static C_char C_TLS li33[] C_aligned={C_lihdr(0,0,16),40,99,101,108,108,58,109,97,114,107,32,111,50,48,51,41};
static C_char C_TLS li34[] C_aligned={C_lihdr(0,0,25),40,115,101,116,45,99,101,108,108,58,109,97,114,107,32,111,50,48,53,32,118,50,48,54,41,0,0,0,0,0,0,0};
static C_char C_TLS li35[] C_aligned={C_lihdr(0,0,9),40,108,112,32,105,50,49,49,41,0,0,0,0,0,0,0};
static C_char C_TLS li36[] C_aligned={C_lihdr(0,0,34),40,118,101,99,116,111,114,45,102,111,114,45,101,97,99,104,45,114,101,118,32,112,114,111,99,50,48,56,32,118,50,48,57,41,0,0,0,0,0,0};
static C_char C_TLS li37[] C_aligned={C_lihdr(0,0,9),40,108,112,32,105,50,50,50,41,0,0,0,0,0,0,0};
static C_char C_TLS li38[] C_aligned={C_lihdr(0,0,35),40,112,101,114,109,117,116,101,45,118,101,99,33,32,118,50,49,57,32,114,97,110,100,111,109,45,115,116,97,116,101,50,50,48,41,0,0,0,0,0};
static C_char C_TLS li39[] C_aligned={C_lihdr(0,0,15),40,97,49,53,52,51,32,119,97,108,108,50,51,55,41,0};
static C_char C_TLS li40[] C_aligned={C_lihdr(0,0,15),40,97,49,53,51,55,32,113,117,105,116,50,51,54,41,0};
static C_char C_TLS li41[] C_aligned={C_lihdr(0,0,29),40,100,105,103,45,109,97,122,101,32,119,97,108,108,115,50,51,52,32,110,99,101,108,108,115,50,51,53,41,0,0,0};
static C_char C_TLS li42[] C_aligned={C_lihdr(0,0,16),40,97,49,54,49,54,32,99,104,105,108,100,50,53,51,41};
static C_char C_TLS li43[] C_aligned={C_lihdr(0,0,26),40,115,101,97,114,99,104,32,110,111,100,101,50,53,49,32,112,97,114,101,110,116,50,53,50,41,0,0,0,0,0,0};
static C_char C_TLS li44[] C_aligned={C_lihdr(0,0,41),40,100,102,115,45,109,97,122,101,32,109,97,122,101,50,52,55,32,114,111,111,116,50,52,56,32,100,111,45,99,104,105,108,100,114,101,110,50,52,57,41,0,0,0,0,0,0,0};
static C_char C_TLS li45[] C_aligned={C_lihdr(0,0,26),40,108,112,32,110,111,100,101,50,53,57,32,110,101,119,45,112,97,114,101,110,116,50,54,48,41,0,0,0,0,0,0};
static C_char C_TLS li46[] C_aligned={C_lihdr(0,0,25),40,114,101,114,111,111,116,45,109,97,122,101,32,110,101,119,45,114,111,111,116,50,53,55,41,0,0,0,0,0,0,0};
static C_char C_TLS li47[] C_aligned={C_lihdr(0,0,26),40,100,111,108,111,111,112,50,54,54,32,108,101,110,50,54,56,32,110,111,100,101,50,54,57,41,0,0,0,0,0,0};
static C_char C_TLS li48[] C_aligned={C_lihdr(0,0,21),40,112,97,116,104,45,108,101,110,103,116,104,32,99,101,108,108,50,54,53,41,0,0,0};
static C_char C_TLS li49[] C_aligned={C_lihdr(0,0,12),40,108,112,32,110,111,100,101,50,55,52,41,0,0,0,0};
static C_char C_TLS li50[] C_aligned={C_lihdr(0,0,19),40,109,97,114,107,45,112,97,116,104,32,110,111,100,101,50,55,50,41,0,0,0,0,0};
static C_char C_TLS li51[] C_aligned={C_lihdr(0,0,37),40,109,97,107,101,45,104,97,114,114,32,110,114,111,119,115,50,56,52,32,110,99,111,108,115,50,56,53,32,101,108,116,115,50,56,54,41,0,0,0};
static C_char C_TLS li52[] C_aligned={C_lihdr(0,0,17),40,104,97,114,114,58,110,114,111,119,115,32,111,50,56,56,41,0,0,0,0,0,0,0};
static C_char C_TLS li53[] C_aligned={C_lihdr(0,0,26),40,115,101,116,45,104,97,114,114,58,110,114,111,119,115,32,111,50,57,48,32,118,50,57,49,41,0,0,0,0,0,0};
static C_char C_TLS li54[] C_aligned={C_lihdr(0,0,17),40,104,97,114,114,58,110,99,111,108,115,32,111,50,57,51,41,0,0,0,0,0,0,0};
static C_char C_TLS li55[] C_aligned={C_lihdr(0,0,26),40,115,101,116,45,104,97,114,114,58,110,99,111,108,115,32,111,50,57,53,32,118,50,57,54,41,0,0,0,0,0,0};
static C_char C_TLS li56[] C_aligned={C_lihdr(0,0,16),40,104,97,114,114,58,101,108,116,115,32,111,50,57,56,41};
static C_char C_TLS li57[] C_aligned={C_lihdr(0,0,25),40,115,101,116,45,104,97,114,114,58,101,108,116,115,32,111,51,48,48,32,118,51,48,49,41,0,0,0,0,0,0,0};
static C_char C_TLS li58[] C_aligned={C_lihdr(0,0,16),40,104,97,114,114,32,114,51,48,51,32,99,51,48,52,41};
static C_char C_TLS li59[] C_aligned={C_lihdr(0,0,22),40,104,114,101,102,32,104,97,51,48,54,32,120,51,48,55,32,121,51,48,56,41,0,0};
static C_char C_TLS li60[] C_aligned={C_lihdr(0,0,30),40,104,115,101,116,33,32,104,97,51,49,50,32,120,51,49,51,32,121,51,49,52,32,118,97,108,51,49,53,41,0,0};
static C_char C_TLS li61[] C_aligned={C_lihdr(0,0,25),40,104,114,101,102,47,114,99,32,104,97,51,49,57,32,114,51,50,48,32,99,51,50,49,41,0,0,0,0,0,0,0};
static C_char C_TLS li62[] C_aligned={C_lihdr(0,0,21),40,100,111,108,111,111,112,51,51,48,32,99,51,51,50,32,105,51,51,51,41,0,0,0};
static C_char C_TLS li63[] C_aligned={C_lihdr(0,0,16),40,100,111,108,111,111,112,51,50,55,32,114,51,50,57,41};
static C_char C_TLS li64[] C_aligned={C_lihdr(0,0,41),40,104,97,114,114,45,116,97,98,117,108,97,116,101,32,110,114,111,119,115,51,50,51,32,110,99,111,108,115,51,50,52,32,112,114,111,99,51,50,53,41,0,0,0,0,0,0,0};
static C_char C_TLS li65[] C_aligned={C_lihdr(0,0,31),40,104,97,114,114,45,102,111,114,45,101,97,99,104,32,112,114,111,99,51,52,48,32,104,97,114,114,51,52,49,41,0};
static C_char C_TLS li66[] C_aligned={C_lihdr(0,0,17),40,97,49,57,52,51,32,120,51,52,56,32,121,51,52,57,41,0,0,0,0,0,0,0};
static C_char C_TLS li67[] C_aligned={C_lihdr(0,0,26),40,103,101,110,45,109,97,122,101,45,97,114,114,97,121,32,114,51,52,54,32,99,51,52,55,41,0,0,0,0,0,0};
static C_char C_TLS li68[] C_aligned={C_lihdr(0,0,25),40,97,100,100,45,119,97,108,108,32,111,51,53,55,32,110,51,53,56,32,98,51,53,57,41,0,0,0,0,0,0,0};
static C_char C_TLS li69[] C_aligned={C_lihdr(0,0,16),40,100,111,108,111,111,112,51,55,54,32,120,51,55,56,41};
static C_char C_TLS li70[] C_aligned={C_lihdr(0,0,16),40,100,111,108,111,111,112,51,54,51,32,121,51,54,53,41};
static C_char C_TLS li71[] C_aligned={C_lihdr(0,0,16),40,100,111,108,111,111,112,51,54,48,32,120,51,54,50,41};
static C_char C_TLS li72[] C_aligned={C_lihdr(0,0,23),40,109,97,107,101,45,119,97,108,108,45,118,101,99,32,104,97,114,114,51,53,49,41,0};
static C_char C_TLS li73[] C_aligned={C_lihdr(0,0,46),40,98,116,45,108,112,32,109,97,120,45,108,101,110,51,57,55,32,101,110,116,114,97,110,99,101,51,57,56,32,101,120,105,116,51,57,57,32,98,99,111,108,52,48,48,41,0,0};
static C_char C_TLS li74[] C_aligned={C_lihdr(0,0,46),40,116,112,45,108,112,32,109,97,120,45,108,101,110,51,57,48,32,101,110,116,114,97,110,99,101,51,57,49,32,101,120,105,116,51,57,50,32,116,99,111,108,51,57,51,41,0,0};
static C_char C_TLS li75[] C_aligned={C_lihdr(0,0,24),40,112,105,99,107,45,101,110,116,114,97,110,99,101,115,32,104,97,114,114,51,56,54,41};
static C_char C_TLS li76[] C_aligned={C_lihdr(0,0,44),40,102,111,114,45,101,97,99,104,45,104,101,120,45,99,104,105,108,100,32,112,114,111,99,52,49,48,32,104,97,114,114,52,49,49,32,99,101,108,108,52,49,50,41,0,0,0,0};
static C_char C_TLS li77[] C_aligned={C_lihdr(0,0,29),40,109,97,107,101,45,109,97,122,101,32,110,114,111,119,115,52,51,56,32,110,99,111,108,115,52,51,57,41,0,0,0};
static C_char C_TLS li78[] C_aligned={C_lihdr(0,0,25),40,112,109,97,122,101,32,110,114,111,119,115,52,53,50,32,110,99,111,108,115,52,53,51,41,0,0,0,0,0,0,0};
static C_char C_TLS li79[] C_aligned={C_lihdr(0,0,15),40,119,114,105,116,101,45,99,104,32,99,52,54,48,41,0};
static C_char C_TLS li80[] C_aligned={C_lihdr(0,0,16),40,100,111,108,111,111,112,52,57,55,32,99,52,57,57,41};
static C_char C_TLS li81[] C_aligned={C_lihdr(0,0,16),40,100,111,108,111,111,112,52,56,54,32,99,52,56,56,41};
static C_char C_TLS li82[] C_aligned={C_lihdr(0,0,16),40,100,111,108,111,111,112,52,56,51,32,114,52,56,53,41};
static C_char C_TLS li83[] C_aligned={C_lihdr(0,0,16),40,100,111,108,111,111,112,52,55,53,32,99,52,55,55,41};
static C_char C_TLS li84[] C_aligned={C_lihdr(0,0,16),40,100,111,108,111,111,112,52,54,55,32,99,52,54,57,41};
static C_char C_TLS li85[] C_aligned={C_lihdr(0,0,35),40,112,114,105,110,116,45,104,101,120,109,97,122,101,32,104,97,114,114,52,54,50,32,101,110,116,114,97,110,99,101,52,54,51,41,0,0,0,0,0};
static C_char C_TLS li86[] C_aligned={C_lihdr(0,0,22),40,98,105,116,45,116,101,115,116,32,106,53,50,50,32,98,105,116,53,50,51,41,0,0};
static C_char C_TLS li87[] C_aligned={C_lihdr(0,0,29),40,100,111,116,47,115,112,97,99,101,32,104,97,114,114,53,50,53,32,114,53,50,54,32,99,53,50,55,41,0,0,0};
static C_char C_TLS li88[] C_aligned={C_lihdr(0,0,31),40,100,105,115,112,108,97,121,45,104,101,120,98,111,116,116,111,109,32,104,101,120,119,97,108,108,115,53,51,48,41,0};
static C_char C_TLS li89[] C_aligned={C_lihdr(0,0,23),40,114,117,110,32,110,114,111,119,115,53,51,52,32,110,99,111,108,115,53,51,53,41,0};
static C_char C_TLS li90[] C_aligned={C_lihdr(0,0,7),40,97,51,48,53,55,41,0};
static C_char C_TLS li91[] C_aligned={C_lihdr(0,0,17),40,97,51,48,55,49,32,114,101,115,117,108,116,53,52,55,41,0,0,0,0,0,0,0};
static C_char C_TLS li92[] C_aligned={C_lihdr(0,0,6),40,109,97,105,110,41,0,0};
static C_char C_TLS li93[] C_aligned={C_lihdr(0,0,12),40,97,51,49,48,48,32,120,53,53,49,41,0,0,0,0};
static C_char C_TLS li94[] C_aligned={C_lihdr(0,0,7),40,97,51,48,56,51,41,0};
static C_char C_TLS li95[] C_aligned={C_lihdr(0,0,17),40,97,51,49,48,51,32,118,53,53,50,32,105,53,53,51,41,0,0,0,0,0,0,0};
static C_char C_TLS li96[] C_aligned={C_lihdr(0,0,16),40,104,105,100,101,32,114,53,52,57,32,120,53,53,48,41};
static C_char C_TLS li97[] C_aligned={C_lihdr(0,0,21),40,108,111,111,112,32,105,53,54,55,32,114,101,115,117,108,116,53,54,56,41,0,0,0};
static C_char C_TLS li98[] C_aligned={C_lihdr(0,0,53),40,114,117,110,45,114,55,114,115,45,98,101,110,99,104,109,97,114,107,32,110,97,109,101,53,53,55,32,99,111,117,110,116,53,53,56,32,116,104,117,110,107,53,53,57,32,111,107,63,53,54,48,41,0,0,0};
static C_char C_TLS li99[] C_aligned={C_lihdr(0,0,10),40,116,111,112,108,101,118,101,108,41,0,0,0,0,0,0};


C_noret_decl(f_2229)
static void C_fcall f_2229(C_word t0,C_word t1,C_word t2,C_word t3,C_word t4,C_word t5) C_noret;
C_noret_decl(f_2220)
static void C_ccall f_2220(C_word c,C_word *av) C_noret;
C_noret_decl(f_1938)
static void C_ccall f_1938(C_word c,C_word *av) C_noret;
C_noret_decl(f_2217)
static void C_ccall f_2217(C_word c,C_word *av) C_noret;
C_noret_decl(f_2210)
static void C_ccall f_2210(C_word c,C_word *av) C_noret;
C_noret_decl(f_2214)
static void C_ccall f_2214(C_word c,C_word *av) C_noret;
C_noret_decl(f_1925)
static void C_ccall f_1925(C_word c,C_word *av) C_noret;
C_noret_decl(f_2457)
static void C_ccall f_2457(C_word c,C_word *av) C_noret;
C_noret_decl(f_1903)
static void C_ccall f_1903(C_word c,C_word *av) C_noret;
C_noret_decl(f_2453)
static void C_ccall f_2453(C_word c,C_word *av) C_noret;
C_noret_decl(f_3172)
static void C_ccall f_3172(C_word c,C_word *av) C_noret;
C_noret_decl(f_3178)
static void C_ccall f_3178(C_word c,C_word *av) C_noret;
C_noret_decl(f_3143)
static void C_ccall f_3143(C_word c,C_word *av) C_noret;
C_noret_decl(f_3140)
static void C_ccall f_3140(C_word c,C_word *av) C_noret;
C_noret_decl(f_3146)
static void C_ccall f_3146(C_word c,C_word *av) C_noret;
C_noret_decl(f_3149)
static void C_ccall f_3149(C_word c,C_word *av) C_noret;
C_noret_decl(f_2602)
static void C_ccall f_2602(C_word c,C_word *av) C_noret;
C_noret_decl(f_3154)
static void C_fcall f_3154(C_word t0,C_word t1,C_word t2,C_word t3) C_noret;
C_noret_decl(f_2491)
static void C_ccall f_2491(C_word c,C_word *av) C_noret;
C_noret_decl(f_1705)
static void C_ccall f_1705(C_word c,C_word *av) C_noret;
C_noret_decl(f_2639)
static void C_ccall f_2639(C_word c,C_word *av) C_noret;
C_noret_decl(f_2951)
static void C_ccall f_2951(C_word c,C_word *av) C_noret;
C_noret_decl(f_2440)
static void C_ccall f_2440(C_word c,C_word *av) C_noret;
C_noret_decl(f_2624)
static void C_ccall f_2624(C_word c,C_word *av) C_noret;
C_noret_decl(f_3246)
static void C_ccall f_3246(C_word c,C_word *av) C_noret;
C_noret_decl(f_2620)
static void C_ccall f_2620(C_word c,C_word *av) C_noret;
C_noret_decl(f_2982)
static void C_ccall f_2982(C_word c,C_word *av) C_noret;
C_noret_decl(f_2984)
static void C_ccall f_2984(C_word c,C_word *av) C_noret;
C_noret_decl(f_2988)
static void C_ccall f_2988(C_word c,C_word *av) C_noret;
C_noret_decl(f_1026)
static void C_ccall f_1026(C_word c,C_word *av) C_noret;
C_noret_decl(f_2618)
static void C_ccall f_2618(C_word c,C_word *av) C_noret;
C_noret_decl(f_2614)
static void C_ccall f_2614(C_word c,C_word *av) C_noret;
C_noret_decl(f_2176)
static void C_ccall f_2176(C_word c,C_word *av) C_noret;
C_noret_decl(f_3257)
static void C_ccall f_3257(C_word c,C_word *av) C_noret;
C_noret_decl(f_2345)
static void C_ccall f_2345(C_word c,C_word *av) C_noret;
C_noret_decl(f_2348)
static void C_ccall f_2348(C_word c,C_word *av) C_noret;
C_noret_decl(f_2150)
static void C_ccall f_2150(C_word c,C_word *av) C_noret;
C_noret_decl(f_3017)
static void C_ccall f_3017(C_word c,C_word *av) C_noret;
C_noret_decl(f_3015)
static void C_ccall f_3015(C_word c,C_word *av) C_noret;
C_noret_decl(f_3263)
static void C_ccall f_3263(C_word c,C_word *av) C_noret;
C_noret_decl(f_3260)
static void C_ccall f_3260(C_word c,C_word *av) C_noret;
C_noret_decl(f_3266)
static void C_ccall f_3266(C_word c,C_word *av) C_noret;
C_noret_decl(f_1747)
static void C_ccall f_1747(C_word c,C_word *av) C_noret;
C_noret_decl(f_2965)
static void C_ccall f_2965(C_word c,C_word *av) C_noret;
C_noret_decl(f_1181)
static void C_ccall f_1181(C_word c,C_word *av) C_noret;
C_noret_decl(f_1184)
static void C_ccall f_1184(C_word c,C_word *av) C_noret;
C_noret_decl(f_2162)
static void C_ccall f_2162(C_word c,C_word *av) C_noret;
C_noret_decl(f_1741)
static void C_ccall f_1741(C_word c,C_word *av) C_noret;
C_noret_decl(f_3027)
static void C_ccall f_3027(C_word c,C_word *av) C_noret;
C_noret_decl(f_3022)
static void C_ccall f_3022(C_word c,C_word *av) C_noret;
C_noret_decl(f_3277)
static void C_ccall f_3277(C_word c,C_word *av) C_noret;
C_noret_decl(f_1735)
static void C_ccall f_1735(C_word c,C_word *av) C_noret;
C_noret_decl(f_2931)
static void C_ccall f_2931(C_word c,C_word *av) C_noret;
C_noret_decl(f_1174)
static void C_ccall f_1174(C_word c,C_word *av) C_noret;
C_noret_decl(f_2130)
static void C_ccall f_2130(C_word c,C_word *av) C_noret;
C_noret_decl(f_1359)
static void C_ccall f_1359(C_word c,C_word *av) C_noret;
C_noret_decl(f_3037)
static void C_ccall f_3037(C_word c,C_word *av) C_noret;
C_noret_decl(f_3031)
static void C_ccall f_3031(C_word c,C_word *av) C_noret;
C_noret_decl(f_3034)
static void C_ccall f_3034(C_word c,C_word *av) C_noret;
C_noret_decl(f_1509)
static void C_ccall f_1509(C_word c,C_word *av) C_noret;
C_noret_decl(f_1729)
static void C_ccall f_1729(C_word c,C_word *av) C_noret;
C_noret_decl(f_2949)
static void C_ccall f_2949(C_word c,C_word *av) C_noret;
C_noret_decl(f_1163)
static void C_ccall f_1163(C_word c,C_word *av) C_noret;
C_noret_decl(f_2379)
static void C_ccall f_2379(C_word c,C_word *av) C_noret;
C_noret_decl(f_1353)
static void C_ccall f_1353(C_word c,C_word *av) C_noret;
C_noret_decl(f_1723)
static void C_ccall f_1723(C_word c,C_word *av) C_noret;
C_noret_decl(f_1389)
static void C_ccall f_1389(C_word c,C_word *av) C_noret;
C_noret_decl(f_2133)
static void C_ccall f_2133(C_word c,C_word *av) C_noret;
C_noret_decl(f_1717)
static void C_ccall f_1717(C_word c,C_word *av) C_noret;
C_noret_decl(f_2912)
static void C_fcall f_2912(C_word t0,C_word t1,C_word t2) C_noret;
C_noret_decl(f_2383)
static void C_ccall f_2383(C_word c,C_word *av) C_noret;
C_noret_decl(f_1168)
static void C_ccall f_1168(C_word c,C_word *av) C_noret;
C_noret_decl(f_1383)
static void C_ccall f_1383(C_word c,C_word *av) C_noret;
C_noret_decl(f_1711)
static void C_ccall f_1711(C_word c,C_word *av) C_noret;
C_noret_decl(f_1789)
static void C_ccall f_1789(C_word c,C_word *av) C_noret;
C_noret_decl(f_1787)
static void C_ccall f_1787(C_word c,C_word *av) C_noret;
C_noret_decl(f_2101)
static void C_ccall f_2101(C_word c,C_word *av) C_noret;
C_noret_decl(f_2928)
static void C_ccall f_2928(C_word c,C_word *av) C_noret;
C_noret_decl(f_2925)
static void C_ccall f_2925(C_word c,C_word *av) C_noret;
C_noret_decl(f_2922)
static void C_ccall f_2922(C_word c,C_word *av) C_noret;
C_noret_decl(f_2354)
static void C_ccall f_2354(C_word c,C_word *av) C_noret;
C_noret_decl(f_2357)
static void C_ccall f_2357(C_word c,C_word *av) C_noret;
C_noret_decl(f_1803)
static void C_ccall f_1803(C_word c,C_word *av) C_noret;
C_noret_decl(f_1157)
static void C_ccall f_1157(C_word c,C_word *av) C_noret;
C_noret_decl(f_2351)
static void C_ccall f_2351(C_word c,C_word *av) C_noret;
C_noret_decl(f_2366)
static void C_ccall f_2366(C_word c,C_word *av) C_noret;
C_noret_decl(f_2838)
static void C_ccall f_2838(C_word c,C_word *av) C_noret;
C_noret_decl(f_2834)
static void C_ccall f_2834(C_word c,C_word *av) C_noret;
C_noret_decl(f_1365)
static void C_ccall f_1365(C_word c,C_word *av) C_noret;
C_noret_decl(f_2363)
static void C_fcall f_2363(C_word t0,C_word t1) C_noret;
C_noret_decl(f_1775)
static void C_ccall f_1775(C_word c,C_word *av) C_noret;
C_noret_decl(f_1768)
static void C_ccall f_1768(C_word c,C_word *av) C_noret;
C_noret_decl(f_2842)
static void C_ccall f_2842(C_word c,C_word *av) C_noret;
C_noret_decl(f_1138)
static void C_ccall f_1138(C_word c,C_word *av) C_noret;
C_noret_decl(f_1395)
static void C_ccall f_1395(C_word c,C_word *av) C_noret;
C_noret_decl(f_3008)
static void C_ccall f_3008(C_word c,C_word *av) C_noret;
C_noret_decl(f_1761)
static void C_ccall f_1761(C_word c,C_word *av) C_noret;
C_noret_decl(f_1765)
static void C_ccall f_1765(C_word c,C_word *av) C_noret;
C_noret_decl(f_3001)
static void C_ccall f_3001(C_word c,C_word *av) C_noret;
C_noret_decl(f_1538)
static void C_ccall f_1538(C_word c,C_word *av) C_noret;
C_noret_decl(f_1532)
static void C_ccall f_1532(C_word c,C_word *av) C_noret;
C_noret_decl(f_1341)
static void C_ccall f_1341(C_word c,C_word *av) C_noret;
C_noret_decl(f_2810)
static void C_fcall f_2810(C_word t0,C_word t1,C_word t2) C_noret;
C_noret_decl(f_1347)
static void C_ccall f_1347(C_word c,C_word *av) C_noret;
C_noret_decl(f_1755)
static void C_ccall f_1755(C_word c,C_word *av) C_noret;
C_noret_decl(f_1843)
static void C_ccall f_1843(C_word c,C_word *av) C_noret;
C_noret_decl(f_1846)
static void C_ccall f_1846(C_word c,C_word *av) C_noret;
C_noret_decl(f_2823)
static void C_ccall f_2823(C_word c,C_word *av) C_noret;
C_noret_decl(f_2820)
static void C_ccall f_2820(C_word c,C_word *av) C_noret;
C_noret_decl(f_1371)
static void C_ccall f_1371(C_word c,C_word *av) C_noret;
C_noret_decl(f_1377)
static void C_ccall f_1377(C_word c,C_word *av) C_noret;
C_noret_decl(f_1617)
static void C_ccall f_1617(C_word c,C_word *av) C_noret;
C_noret_decl(f_1612)
static void C_ccall f_1612(C_word c,C_word *av) C_noret;
C_noret_decl(f_1839)
static void C_ccall f_1839(C_word c,C_word *av) C_noret;
C_noret_decl(f_1837)
static void C_ccall f_1837(C_word c,C_word *av) C_noret;
C_noret_decl(f_2875)
static void C_ccall f_2875(C_word c,C_word *av) C_noret;
C_noret_decl(f_2878)
static void C_ccall f_2878(C_word c,C_word *av) C_noret;
C_noret_decl(f_2481)
static void C_ccall f_2481(C_word c,C_word *av) C_noret;
C_noret_decl(f_1608)
static void C_fcall f_1608(C_word t0,C_word t1,C_word t2,C_word t3) C_noret;
C_noret_decl(f_1602)
static void C_ccall f_1602(C_word c,C_word *av) C_noret;
C_noret_decl(f_1600)
static void C_ccall f_1600(C_word c,C_word *av) C_noret;
C_noret_decl(f_1825)
static void C_ccall f_1825(C_word c,C_word *av) C_noret;
C_noret_decl(f_2884)
static void C_ccall f_2884(C_word c,C_word *av) C_noret;
C_noret_decl(f_2881)
static void C_ccall f_2881(C_word c,C_word *av) C_noret;
C_noret_decl(f_1309)
static void C_ccall f_1309(C_word c,C_word *av) C_noret;
C_noret_decl(f_1305)
static void C_ccall f_1305(C_word c,C_word *av) C_noret;
C_noret_decl(f_1303)
static void C_ccall f_1303(C_word c,C_word *av) C_noret;
C_noret_decl(f_1209)
static void C_ccall f_1209(C_word c,C_word *av) C_noret;
C_noret_decl(f_1815)
static void C_ccall f_1815(C_word c,C_word *av) C_noret;
C_noret_decl(f_1817)
static void C_ccall f_1817(C_word c,C_word *av) C_noret;
C_noret_decl(f_2021)
static void C_ccall f_2021(C_word c,C_word *av) C_noret;
C_noret_decl(f_1496)
static void C_fcall f_1496(C_word t0,C_word t1,C_word t2) C_noret;
C_noret_decl(f_1490)
static void C_ccall f_1490(C_word c,C_word *av) C_noret;
C_noret_decl(f_2024)
static void C_ccall f_2024(C_word c,C_word *av) C_noret;
C_noret_decl(f_2865)
static void C_fcall f_2865(C_word t0,C_word t1,C_word t2) C_noret;
C_noret_decl(f_2011)
static void C_fcall f_2011(C_word t0,C_word t1,C_word t2) C_noret;
C_noret_decl(f_1878)
static void C_fcall f_1878(C_word t0,C_word t1,C_word t2,C_word t3) C_noret;
C_noret_decl(f_2732)
static void C_ccall f_2732(C_word c,C_word *av) C_noret;
C_noret_decl(f_1865)
static void C_ccall f_1865(C_word c,C_word *av) C_noret;
C_noret_decl(f_1639)
static void C_fcall f_1639(C_word t0,C_word t1,C_word t2,C_word t3) C_noret;
C_noret_decl(f_1633)
static void C_ccall f_1633(C_word c,C_word *av) C_noret;
C_noret_decl(f_1855)
static void C_fcall f_1855(C_word t0,C_word t1,C_word t2) C_noret;
C_noret_decl(f_2711)
static void C_ccall f_2711(C_word c,C_word *av) C_noret;
C_noret_decl(f_1089)
static void C_ccall f_1089(C_word c,C_word *av) C_noret;
C_noret_decl(f_2728)
static void C_ccall f_2728(C_word c,C_word *av) C_noret;
C_noret_decl(f_1070)
static void C_ccall f_1070(C_word c,C_word *av) C_noret;
C_noret_decl(f_2804)
static void C_ccall f_2804(C_word c,C_word *av) C_noret;
C_noret_decl(f_2775)
static void C_ccall f_2775(C_word c,C_word *av) C_noret;
C_noret_decl(f_1437)
static void C_ccall f_1437(C_word c,C_word *av) C_noret;
C_noret_decl(f_1431)
static void C_ccall f_1431(C_word c,C_word *av) C_noret;
C_noret_decl(C_toplevel)
C_externexport void C_ccall C_toplevel(C_word c,C_word *av) C_noret;
C_noret_decl(f_2787)
static void C_ccall f_2787(C_word c,C_word *av) C_noret;
C_noret_decl(f_1425)
static void C_ccall f_1425(C_word c,C_word *av) C_noret;
C_noret_decl(f_1419)
static void C_ccall f_1419(C_word c,C_word *av) C_noret;
C_noret_decl(f_2751)
static void C_fcall f_2751(C_word t0,C_word t1,C_word t2) C_noret;
C_noret_decl(f_1413)
static void C_ccall f_1413(C_word c,C_word *av) C_noret;
C_noret_decl(f_2764)
static void C_ccall f_2764(C_word c,C_word *av) C_noret;
C_noret_decl(f_2761)
static void C_ccall f_2761(C_word c,C_word *av) C_noret;
C_noret_decl(f_2127)
static void C_ccall f_2127(C_word c,C_word *av) C_noret;
C_noret_decl(f_1315)
static void C_ccall f_1315(C_word c,C_word *av) C_noret;
C_noret_decl(f_1318)
static void C_ccall f_1318(C_word c,C_word *av) C_noret;
C_noret_decl(f_1312)
static void C_ccall f_1312(C_word c,C_word *av) C_noret;
C_noret_decl(f_2124)
static void C_ccall f_2124(C_word c,C_word *av) C_noret;
C_noret_decl(f_2114)
static void C_fcall f_2114(C_word t0,C_word t1,C_word t2) C_noret;
C_noret_decl(f_2895)
static void C_ccall f_2895(C_word c,C_word *av) C_noret;
C_noret_decl(f_2513)
static void C_ccall f_2513(C_word c,C_word *av) C_noret;
C_noret_decl(f_2560)
static void C_ccall f_2560(C_word c,C_word *av) C_noret;
C_noret_decl(f_2563)
static void C_ccall f_2563(C_word c,C_word *av) C_noret;
C_noret_decl(f_2503)
static void C_ccall f_2503(C_word c,C_word *av) C_noret;
C_noret_decl(f_2531)
static void C_ccall f_2531(C_word c,C_word *av) C_noret;
C_noret_decl(f_2991)
static void C_ccall f_2991(C_word c,C_word *av) C_noret;
C_noret_decl(f_2566)
static void C_ccall f_2566(C_word c,C_word *av) C_noret;
C_noret_decl(f_2543)
static void C_ccall f_2543(C_word c,C_word *av) C_noret;
C_noret_decl(f_2575)
static void C_ccall f_2575(C_word c,C_word *av) C_noret;
C_noret_decl(f_2578)
static void C_ccall f_2578(C_word c,C_word *av) C_noret;
C_noret_decl(f_1572)
static void C_ccall f_1572(C_word c,C_word *av) C_noret;
C_noret_decl(f_2702)
static void C_ccall f_2702(C_word c,C_word *av) C_noret;
C_noret_decl(f_1575)
static void C_ccall f_1575(C_word c,C_word *av) C_noret;
C_noret_decl(f_2705)
static void C_ccall f_2705(C_word c,C_word *av) C_noret;
C_noret_decl(f_2708)
static void C_ccall f_2708(C_word c,C_word *av) C_noret;
C_noret_decl(f_1051)
static void C_ccall f_1051(C_word c,C_word *av) C_noret;
C_noret_decl(f_3056)
static void C_ccall f_3056(C_word c,C_word *av) C_noret;
C_noret_decl(f_3058)
static void C_ccall f_3058(C_word c,C_word *av) C_noret;
C_noret_decl(f_3184)
static void C_ccall f_3184(C_word c,C_word *av) C_noret;
C_noret_decl(f_3181)
static void C_ccall f_3181(C_word c,C_word *av) C_noret;
C_noret_decl(f_1566)
static void C_ccall f_1566(C_word c,C_word *av) C_noret;
C_noret_decl(f_3066)
static void C_ccall f_3066(C_word c,C_word *av) C_noret;
C_noret_decl(f_3196)
static void C_ccall f_3196(C_word c,C_word *av) C_noret;
C_noret_decl(f_3193)
static void C_ccall f_3193(C_word c,C_word *av) C_noret;
C_noret_decl(f_3190)
static void C_ccall f_3190(C_word c,C_word *av) C_noret;
C_noret_decl(f_3199)
static void C_ccall f_3199(C_word c,C_word *av) C_noret;
C_noret_decl(f_1407)
static void C_ccall f_1407(C_word c,C_word *av) C_noret;
C_noret_decl(f_1401)
static void C_ccall f_1401(C_word c,C_word *av) C_noret;
C_noret_decl(f_1551)
static void C_ccall f_1551(C_word c,C_word *av) C_noret;
C_noret_decl(f_1557)
static void C_ccall f_1557(C_word c,C_word *av) C_noret;
C_noret_decl(f_1554)
static void C_ccall f_1554(C_word c,C_word *av) C_noret;
C_noret_decl(f_2972)
static void C_ccall f_2972(C_word c,C_word *av) C_noret;
C_noret_decl(f_1030)
static void C_ccall f_1030(C_word c,C_word *av) C_noret;
C_noret_decl(f_1032)
static void C_ccall f_1032(C_word c,C_word *av) C_noret;
C_noret_decl(f_3070)
static void C_ccall f_3070(C_word c,C_word *av) C_noret;
C_noret_decl(f_3072)
static void C_ccall f_3072(C_word c,C_word *av) C_noret;
C_noret_decl(f_1996)
static void C_ccall f_1996(C_word c,C_word *av) C_noret;
C_noret_decl(f_1039)
static void C_fcall f_1039(C_word t0,C_word t1) C_noret;
C_noret_decl(f_3078)
static void C_ccall f_3078(C_word c,C_word *av) C_noret;
C_noret_decl(f_2002)
static void C_ccall f_2002(C_word c,C_word *av) C_noret;
C_noret_decl(f_2073)
static void C_ccall f_2073(C_word c,C_word *av) C_noret;
C_noret_decl(f_2426)
static void C_ccall f_2426(C_word c,C_word *av) C_noret;
C_noret_decl(f_1981)
static void C_ccall f_1981(C_word c,C_word *av) C_noret;
C_noret_decl(f_1984)
static void C_ccall f_1984(C_word c,C_word *av) C_noret;
C_noret_decl(f_1999)
static void C_ccall f_1999(C_word c,C_word *av) C_noret;
C_noret_decl(f_2081)
static void C_ccall f_2081(C_word c,C_word *av) C_noret;
C_noret_decl(f_2797)
static void C_ccall f_2797(C_word c,C_word *av) C_noret;
C_noret_decl(f_1095)
static void C_ccall f_1095(C_word c,C_word *av) C_noret;
C_noret_decl(f_1100)
static void C_ccall f_1100(C_word c,C_word *av) C_noret;
C_noret_decl(f_2791)
static void C_ccall f_2791(C_word c,C_word *av) C_noret;
C_noret_decl(f_2587)
static void C_ccall f_2587(C_word c,C_word *av) C_noret;
C_noret_decl(f_2584)
static void C_ccall f_2584(C_word c,C_word *av) C_noret;
C_noret_decl(f_927)
static void C_ccall f_927(C_word c,C_word *av) C_noret;
C_noret_decl(f_2407)
static void C_ccall f_2407(C_word c,C_word *av) C_noret;
C_noret_decl(f_1119)
static void C_ccall f_1119(C_word c,C_word *av) C_noret;
C_noret_decl(f_933)
static void C_ccall f_933(C_word c,C_word *av) C_noret;
C_noret_decl(f_939)
static void C_ccall f_939(C_word c,C_word *av) C_noret;
C_noret_decl(f_936)
static void C_ccall f_936(C_word c,C_word *av) C_noret;
C_noret_decl(f_2437)
static void C_fcall f_2437(C_word t0,C_word t1) C_noret;
C_noret_decl(f_930)
static void C_ccall f_930(C_word c,C_word *av) C_noret;
C_noret_decl(f_2430)
static void C_ccall f_2430(C_word c,C_word *av) C_noret;
C_noret_decl(f_1107)
static void C_fcall f_1107(C_word t0,C_word t1) C_noret;
C_noret_decl(f_3283)
static void C_ccall f_3283(C_word c,C_word *av) C_noret;
C_noret_decl(f_3280)
static void C_ccall f_3280(C_word c,C_word *av) C_noret;
C_noret_decl(f_943)
static void C_ccall f_943(C_word c,C_word *av) C_noret;
C_noret_decl(f_949)
static void C_ccall f_949(C_word c,C_word *av) C_noret;
C_noret_decl(f_3137)
static void C_ccall f_3137(C_word c,C_word *av) C_noret;
C_noret_decl(f_3131)
static void C_ccall f_3131(C_word c,C_word *av) C_noret;
C_noret_decl(f_3043)
static void C_ccall f_3043(C_word c,C_word *av) C_noret;
C_noret_decl(f_3134)
static void C_ccall f_3134(C_word c,C_word *av) C_noret;
C_noret_decl(f_3040)
static void C_ccall f_3040(C_word c,C_word *av) C_noret;
C_noret_decl(f_3046)
static void C_ccall f_3046(C_word c,C_word *av) C_noret;
C_noret_decl(f_3049)
static void C_ccall f_3049(C_word c,C_word *av) C_noret;
C_noret_decl(f_2521)
static void C_ccall f_2521(C_word c,C_word *av) C_noret;
C_noret_decl(f_956)
static void C_ccall f_956(C_word c,C_word *av) C_noret;
C_noret_decl(f_2553)
static void C_ccall f_2553(C_word c,C_word *av) C_noret;
C_noret_decl(f_1588)
static void C_ccall f_1588(C_word c,C_word *av) C_noret;
C_noret_decl(f_3104)
static void C_ccall f_3104(C_word c,C_word *av) C_noret;
C_noret_decl(f_3101)
static void C_ccall f_3101(C_word c,C_word *av) C_noret;
C_noret_decl(f_1793)
static void C_ccall f_1793(C_word c,C_word *av) C_noret;
C_noret_decl(f_1796)
static void C_ccall f_1796(C_word c,C_word *av) C_noret;
C_noret_decl(f_1662)
static void C_ccall f_1662(C_word c,C_word *av) C_noret;
C_noret_decl(f_1664)
static void C_fcall f_1664(C_word t0,C_word t1,C_word t2,C_word t3) C_noret;
C_noret_decl(f_964)
static void C_ccall f_964(C_word c,C_word *av) C_noret;
C_noret_decl(f_966)
static void C_ccall f_966(C_word c,C_word *av) C_noret;
C_noret_decl(f_3113)
static void C_ccall f_3113(C_word c,C_word *av) C_noret;
C_noret_decl(f_2557)
static void C_ccall f_2557(C_word c,C_word *av) C_noret;
C_noret_decl(f_976)
static void C_ccall f_976(C_word c,C_word *av) C_noret;
C_noret_decl(f_974)
static void C_ccall f_974(C_word c,C_word *av) C_noret;
C_noret_decl(f_2324)
static void C_ccall f_2324(C_word c,C_word *av) C_noret;
C_noret_decl(f_2321)
static void C_ccall f_2321(C_word c,C_word *av) C_noret;
C_noret_decl(f_1544)
static void C_ccall f_1544(C_word c,C_word *av) C_noret;
C_noret_decl(f_2581)
static void C_ccall f_2581(C_word c,C_word *av) C_noret;
C_noret_decl(f_1217)
static void C_ccall f_1217(C_word c,C_word *av) C_noret;
C_noret_decl(f_1293)
static void C_ccall f_1293(C_word c,C_word *av) C_noret;
C_noret_decl(f_1219)
static void C_ccall f_1219(C_word c,C_word *av) C_noret;
C_noret_decl(f_1295)
static void C_ccall f_1295(C_word c,C_word *av) C_noret;
C_noret_decl(f_3084)
static void C_ccall f_3084(C_word c,C_word *av) C_noret;
C_noret_decl(f_2315)
static void C_ccall f_2315(C_word c,C_word *av) C_noret;
C_noret_decl(f_2317)
static void C_ccall f_2317(C_word c,C_word *av) C_noret;
C_noret_decl(f_1548)
static void C_ccall f_1548(C_word c,C_word *av) C_noret;
C_noret_decl(f_2059)
static void C_ccall f_2059(C_word c,C_word *av) C_noret;
C_noret_decl(f_2051)
static void C_ccall f_2051(C_word c,C_word *av) C_noret;
C_noret_decl(f_1694)
static void C_ccall f_1694(C_word c,C_word *av) C_noret;
C_noret_decl(f_1690)
static void C_fcall f_1690(C_word t0,C_word t1,C_word t2) C_noret;
C_noret_decl(f_1697)
static void C_ccall f_1697(C_word c,C_word *av) C_noret;
C_noret_decl(f_2336)
static void C_ccall f_2336(C_word c,C_word *av) C_noret;
C_noret_decl(f_2333)
static void C_ccall f_2333(C_word c,C_word *av) C_noret;
C_noret_decl(f_1596)
static void C_ccall f_1596(C_word c,C_word *av) C_noret;
C_noret_decl(f_1225)
static void C_ccall f_1225(C_word c,C_word *av) C_noret;
C_noret_decl(f_3124)
static void C_ccall f_3124(C_word c,C_word *av) C_noret;
C_noret_decl(f_2039)
static void C_ccall f_2039(C_word c,C_word *av) C_noret;
C_noret_decl(f_2035)
static void C_ccall f_2035(C_word c,C_word *av) C_noret;
C_noret_decl(f_1684)
static void C_ccall f_1684(C_word c,C_word *av) C_noret;
C_noret_decl(f_1682)
static void C_ccall f_1682(C_word c,C_word *av) C_noret;
C_noret_decl(f_3205)
static void C_ccall f_3205(C_word c,C_word *av) C_noret;
C_noret_decl(f_3208)
static void C_ccall f_3208(C_word c,C_word *av) C_noret;
C_noret_decl(f_3202)
static void C_ccall f_3202(C_word c,C_word *av) C_noret;
C_noret_decl(f_1255)
static void C_fcall f_1255(C_word t0,C_word t1,C_word t2) C_noret;
C_noret_decl(f_2047)
static void C_ccall f_2047(C_word c,C_word *av) C_noret;
C_noret_decl(f_3217)
static void C_ccall f_3217(C_word c,C_word *av) C_noret;
C_noret_decl(f_3211)
static void C_ccall f_3211(C_word c,C_word *av) C_noret;
C_noret_decl(f_3214)
static void C_ccall f_3214(C_word c,C_word *av) C_noret;
C_noret_decl(f_1281)
static void C_ccall f_1281(C_word c,C_word *av) C_noret;
C_noret_decl(f_2413)
static void C_ccall f_2413(C_word c,C_word *av) C_noret;
C_noret_decl(f_1289)
static void C_ccall f_1289(C_word c,C_word *av) C_noret;
C_noret_decl(f_2091)
static void C_fcall f_2091(C_word t0,C_word t1,C_word t2) C_noret;
C_noret_decl(f_3229)
static void C_ccall f_3229(C_word c,C_word *av) C_noret;
C_noret_decl(f_3226)
static void C_ccall f_3226(C_word c,C_word *av) C_noret;
C_noret_decl(f_3223)
static void C_ccall f_3223(C_word c,C_word *av) C_noret;
C_noret_decl(f_3220)
static void C_ccall f_3220(C_word c,C_word *av) C_noret;
C_noret_decl(f_1231)
static void C_fcall f_1231(C_word t0,C_word t1,C_word t2) C_noret;
C_noret_decl(f_1654)
static void C_ccall f_1654(C_word c,C_word *av) C_noret;
C_noret_decl(f_3238)
static void C_ccall f_3238(C_word c,C_word *av) C_noret;
C_noret_decl(f_3235)
static void C_ccall f_3235(C_word c,C_word *av) C_noret;
C_noret_decl(f_3232)
static void C_ccall f_3232(C_word c,C_word *av) C_noret;
C_noret_decl(f_1643)
static void C_ccall f_1643(C_word c,C_word *av) C_noret;
C_noret_decl(f_1646)
static void C_ccall f_1646(C_word c,C_word *av) C_noret;
C_noret_decl(f_1247)
static void C_ccall f_1247(C_word c,C_word *av) C_noret;
C_noret_decl(f_2665)
static void C_ccall f_2665(C_word c,C_word *av) C_noret;
C_noret_decl(f_2668)
static void C_ccall f_2668(C_word c,C_word *av) C_noret;
C_noret_decl(f_2662)
static void C_ccall f_2662(C_word c,C_word *av) C_noret;
C_noret_decl(f_1443)
static void C_ccall f_1443(C_word c,C_word *av) C_noret;
C_noret_decl(f_2674)
static void C_ccall f_2674(C_word c,C_word *av) C_noret;
C_noret_decl(f_1449)
static void C_ccall f_1449(C_word c,C_word *av) C_noret;
C_noret_decl(f_2671)
static void C_ccall f_2671(C_word c,C_word *av) C_noret;
C_noret_decl(f_2307)
static void C_ccall f_2307(C_word c,C_word *av) C_noret;
C_noret_decl(f_1486)
static void C_ccall f_1486(C_word c,C_word *av) C_noret;
C_noret_decl(f_2283)
static void C_ccall f_2283(C_word c,C_word *av) C_noret;
C_noret_decl(f_2683)
static void C_fcall f_2683(C_word t0,C_word t1,C_word t2) C_noret;
C_noret_decl(f_2699)
static void C_ccall f_2699(C_word c,C_word *av) C_noret;
C_noret_decl(f_2696)
static void C_ccall f_2696(C_word c,C_word *av) C_noret;
C_noret_decl(f_1469)
static void C_ccall f_1469(C_word c,C_word *av) C_noret;
C_noret_decl(f_2693)
static void C_ccall f_2693(C_word c,C_word *av) C_noret;
C_noret_decl(f_1459)
static void C_fcall f_1459(C_word t0,C_word t1,C_word t2) C_noret;
C_noret_decl(f_1965)
static void C_ccall f_1965(C_word c,C_word *av) C_noret;
C_noret_decl(f_1962)
static void C_ccall f_1962(C_word c,C_word *av) C_noret;
C_noret_decl(f_1978)
static void C_ccall f_1978(C_word c,C_word *av) C_noret;
C_noret_decl(f_2270)
static void C_fcall f_2270(C_word t0,C_word t1,C_word t2,C_word t3,C_word t4,C_word t5) C_noret;
C_noret_decl(f_1952)
static void C_ccall f_1952(C_word c,C_word *av) C_noret;
C_noret_decl(f_2248)
static void C_ccall f_2248(C_word c,C_word *av) C_noret;
C_noret_decl(f_2245)
static void C_ccall f_2245(C_word c,C_word *av) C_noret;
C_noret_decl(f_1969)
static void C_fcall f_1969(C_word t0,C_word t1,C_word t2,C_word t3,C_word t4) C_noret;
C_noret_decl(f_2242)
static void C_ccall f_2242(C_word c,C_word *av) C_noret;
C_noret_decl(f_2646)
static void C_ccall f_2646(C_word c,C_word *av) C_noret;
C_noret_decl(f_1944)
static void C_ccall f_1944(C_word c,C_word *av) C_noret;
C_noret_decl(f_1958)
static void C_ccall f_1958(C_word c,C_word *av) C_noret;
C_noret_decl(f_2659)
static void C_ccall f_2659(C_word c,C_word *av) C_noret;
C_noret_decl(f_1933)
static void C_ccall f_1933(C_word c,C_word *av) C_noret;
C_noret_decl(f_2653)
static void C_ccall f_2653(C_word c,C_word *av) C_noret;
C_noret_decl(f_2650)
static void C_ccall f_2650(C_word c,C_word *av) C_noret;

C_noret_decl(trf_2229)
static void C_ccall trf_2229(C_word c,C_word *av) C_noret;
static void C_ccall trf_2229(C_word c,C_word *av){
C_word t0=av[5];
C_word t1=av[4];
C_word t2=av[3];
C_word t3=av[2];
C_word t4=av[1];
C_word t5=av[0];
f_2229(t0,t1,t2,t3,t4,t5);}

C_noret_decl(trf_3154)
static void C_ccall trf_3154(C_word c,C_word *av) C_noret;
static void C_ccall trf_3154(C_word c,C_word *av){
C_word t0=av[3];
C_word t1=av[2];
C_word t2=av[1];
C_word t3=av[0];
f_3154(t0,t1,t2,t3);}

C_noret_decl(trf_2912)
static void C_ccall trf_2912(C_word c,C_word *av) C_noret;
static void C_ccall trf_2912(C_word c,C_word *av){
C_word t0=av[2];
C_word t1=av[1];
C_word t2=av[0];
f_2912(t0,t1,t2);}

C_noret_decl(trf_2363)
static void C_ccall trf_2363(C_word c,C_word *av) C_noret;
static void C_ccall trf_2363(C_word c,C_word *av){
C_word t0=av[1];
C_word t1=av[0];
f_2363(t0,t1);}

C_noret_decl(trf_2810)
static void C_ccall trf_2810(C_word c,C_word *av) C_noret;
static void C_ccall trf_2810(C_word c,C_word *av){
C_word t0=av[2];
C_word t1=av[1];
C_word t2=av[0];
f_2810(t0,t1,t2);}

C_noret_decl(trf_1608)
static void C_ccall trf_1608(C_word c,C_word *av) C_noret;
static void C_ccall trf_1608(C_word c,C_word *av){
C_word t0=av[3];
C_word t1=av[2];
C_word t2=av[1];
C_word t3=av[0];
f_1608(t0,t1,t2,t3);}

C_noret_decl(trf_1496)
static void C_ccall trf_1496(C_word c,C_word *av) C_noret;
static void C_ccall trf_1496(C_word c,C_word *av){
C_word t0=av[2];
C_word t1=av[1];
C_word t2=av[0];
f_1496(t0,t1,t2);}

C_noret_decl(trf_2865)
static void C_ccall trf_2865(C_word c,C_word *av) C_noret;
static void C_ccall trf_2865(C_word c,C_word *av){
C_word t0=av[2];
C_word t1=av[1];
C_word t2=av[0];
f_2865(t0,t1,t2);}

C_noret_decl(trf_2011)
static void C_ccall trf_2011(C_word c,C_word *av) C_noret;
static void C_ccall trf_2011(C_word c,C_word *av){
C_word t0=av[2];
C_word t1=av[1];
C_word t2=av[0];
f_2011(t0,t1,t2);}

C_noret_decl(trf_1878)
static void C_ccall trf_1878(C_word c,C_word *av) C_noret;
static void C_ccall trf_1878(C_word c,C_word *av){
C_word t0=av[3];
C_word t1=av[2];
C_word t2=av[1];
C_word t3=av[0];
f_1878(t0,t1,t2,t3);}

C_noret_decl(trf_1639)
static void C_ccall trf_1639(C_word c,C_word *av) C_noret;
static void C_ccall trf_1639(C_word c,C_word *av){
C_word t0=av[3];
C_word t1=av[2];
C_word t2=av[1];
C_word t3=av[0];
f_1639(t0,t1,t2,t3);}

C_noret_decl(trf_1855)
static void C_ccall trf_1855(C_word c,C_word *av) C_noret;
static void C_ccall trf_1855(C_word c,C_word *av){
C_word t0=av[2];
C_word t1=av[1];
C_word t2=av[0];
f_1855(t0,t1,t2);}

C_noret_decl(trf_2751)
static void C_ccall trf_2751(C_word c,C_word *av) C_noret;
static void C_ccall trf_2751(C_word c,C_word *av){
C_word t0=av[2];
C_word t1=av[1];
C_word t2=av[0];
f_2751(t0,t1,t2);}

C_noret_decl(trf_2114)
static void C_ccall trf_2114(C_word c,C_word *av) C_noret;
static void C_ccall trf_2114(C_word c,C_word *av){
C_word t0=av[2];
C_word t1=av[1];
C_word t2=av[0];
f_2114(t0,t1,t2);}

C_noret_decl(trf_1039)
static void C_ccall trf_1039(C_word c,C_word *av) C_noret;
static void C_ccall trf_1039(C_word c,C_word *av){
C_word t0=av[1];
C_word t1=av[0];
f_1039(t0,t1);}

C_noret_decl(trf_2437)
static void C_ccall trf_2437(C_word c,C_word *av) C_noret;
static void C_ccall trf_2437(C_word c,C_word *av){
C_word t0=av[1];
C_word t1=av[0];
f_2437(t0,t1);}

C_noret_decl(trf_1107)
static void C_ccall trf_1107(C_word c,C_word *av) C_noret;
static void C_ccall trf_1107(C_word c,C_word *av){
C_word t0=av[1];
C_word t1=av[0];
f_1107(t0,t1);}

C_noret_decl(trf_1664)
static void C_ccall trf_1664(C_word c,C_word *av) C_noret;
static void C_ccall trf_1664(C_word c,C_word *av){
C_word t0=av[3];
C_word t1=av[2];
C_word t2=av[1];
C_word t3=av[0];
f_1664(t0,t1,t2,t3);}

C_noret_decl(trf_1690)
static void C_ccall trf_1690(C_word c,C_word *av) C_noret;
static void C_ccall trf_1690(C_word c,C_word *av){
C_word t0=av[2];
C_word t1=av[1];
C_word t2=av[0];
f_1690(t0,t1,t2);}

C_noret_decl(trf_1255)
static void C_ccall trf_1255(C_word c,C_word *av) C_noret;
static void C_ccall trf_1255(C_word c,C_word *av){
C_word t0=av[2];
C_word t1=av[1];
C_word t2=av[0];
f_1255(t0,t1,t2);}

C_noret_decl(trf_2091)
static void C_ccall trf_2091(C_word c,C_word *av) C_noret;
static void C_ccall trf_2091(C_word c,C_word *av){
C_word t0=av[2];
C_word t1=av[1];
C_word t2=av[0];
f_2091(t0,t1,t2);}

C_noret_decl(trf_1231)
static void C_ccall trf_1231(C_word c,C_word *av) C_noret;
static void C_ccall trf_1231(C_word c,C_word *av){
C_word t0=av[2];
C_word t1=av[1];
C_word t2=av[0];
f_1231(t0,t1,t2);}

C_noret_decl(trf_2683)
static void C_ccall trf_2683(C_word c,C_word *av) C_noret;
static void C_ccall trf_2683(C_word c,C_word *av){
C_word t0=av[2];
C_word t1=av[1];
C_word t2=av[0];
f_2683(t0,t1,t2);}

C_noret_decl(trf_1459)
static void C_ccall trf_1459(C_word c,C_word *av) C_noret;
static void C_ccall trf_1459(C_word c,C_word *av){
C_word t0=av[2];
C_word t1=av[1];
C_word t2=av[0];
f_1459(t0,t1,t2);}

C_noret_decl(trf_2270)
static void C_ccall trf_2270(C_word c,C_word *av) C_noret;
static void C_ccall trf_2270(C_word c,C_word *av){
C_word t0=av[5];
C_word t1=av[4];
C_word t2=av[3];
C_word t3=av[2];
C_word t4=av[1];
C_word t5=av[0];
f_2270(t0,t1,t2,t3,t4,t5);}

C_noret_decl(trf_1969)
static void C_ccall trf_1969(C_word c,C_word *av) C_noret;
static void C_ccall trf_1969(C_word c,C_word *av){
C_word t0=av[4];
C_word t1=av[3];
C_word t2=av[2];
C_word t3=av[1];
C_word t4=av[0];
f_1969(t0,t1,t2,t3,t4);}

/* tp-lp in k2218 in k2215 in k2212 in pick-entrances in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_2229(C_word t0,C_word t1,C_word t2,C_word t3,C_word t4,C_word t5){
C_word tmp;
C_word t6;
C_word t7;
C_word t8;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(14,0,4)))){
C_save_and_reclaim_args((void *)trf_2229,6,t0,t1,t2,t3,t4,t5);}
a=C_alloc(14);
if(C_truep(C_i_lessp(t5,C_fix(0)))){
t6=t1;{
C_word av2[2];
av2[0]=t6;
av2[1]=C_a_i_vector2(&a,2,t3,t4);
((C_proc)(void*)(*((C_word*)t6+1)))(2,av2);}}
else{
t6=(*a=C_CLOSURE_TYPE|9,a[1]=(C_word)f_2242,a[2]=t5,a[3]=((C_word*)t0)[2],a[4]=t1,a[5]=((C_word*)t0)[3],a[6]=((C_word*)t0)[4],a[7]=t2,a[8]=t3,a[9]=t4,tmp=(C_word)a,a+=10,tmp);
t7=C_a_i_minus(&a,2,((C_word*)t0)[5],C_fix(1));
C_trace("maze.scm:550: href/rc");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[70]);
C_word av2[5];
av2[0]=*((C_word*)lf[70]+1);
av2[1]=t6;
av2[2]=((C_word*)t0)[4];
av2[3]=t7;
av2[4]=t5;
tp(5,av2);}}}

/* k2218 in k2215 in k2212 in pick-entrances in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2220(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word t7;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(13,c,6)))){
C_save_and_reclaim((void *)f_2220,2,av);}
a=C_alloc(13);
t2=t1;
t3=C_a_i_minus(&a,2,t2,C_fix(1));
t4=C_SCHEME_UNDEFINED;
t5=(*a=C_VECTOR_TYPE|1,a[1]=t4,tmp=(C_word)a,a+=2,tmp);
t6=C_set_block_item(t5,0,(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_2229,a[2]=t5,a[3]=t2,a[4]=((C_word*)t0)[2],a[5]=((C_word*)t0)[3],a[6]=((C_word)li74),tmp=(C_word)a,a+=7,tmp));
t7=((C_word*)t5)[1];
f_2229(t7,((C_word*)t0)[4],C_fix(-1),C_SCHEME_FALSE,C_SCHEME_FALSE,t3);}

/* gen-maze-array in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1938(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word t5;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(3,c,4)))){
C_save_and_reclaim((void *)f_1938,4,av);}
a=C_alloc(3);
t4=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1944,a[2]=((C_word)li66),tmp=(C_word)a,a+=3,tmp);
C_trace("maze.scm:491: harr-tabulate");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[71]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[71]+1);
av2[1]=t1;
av2[2]=t2;
av2[3]=t3;
av2[4]=t4;
tp(5,av2);}}

/* k2215 in k2212 in pick-entrances in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2217(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,c,2)))){
C_save_and_reclaim((void *)f_2217,2,av);}
a=C_alloc(5);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2220,a[2]=((C_word*)t0)[2],a[3]=t2,a[4]=((C_word*)t0)[3],tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:544: harr:ncols");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[63]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[63]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[2];
tp(3,av2);}}

/* pick-entrances in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2210(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word t4;
C_word t5;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,c,4)))){
C_save_and_reclaim((void *)f_2210,3,av);}
a=C_alloc(8);
t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_2214,a[2]=t2,a[3]=t1,tmp=(C_word)a,a+=4,tmp);
t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_2315,a[2]=t3,a[3]=t2,tmp=(C_word)a,a+=4,tmp);
C_trace("maze.scm:542: href/rc");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[70]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[70]+1);
av2[1]=t4;
av2[2]=t2;
av2[3]=C_fix(0);
av2[4]=C_fix(0);
tp(5,av2);}}

/* k2212 in pick-entrances in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2214(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_2214,2,av);}
a=C_alloc(4);
t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_2217,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
C_trace("maze.scm:543: harr:nrows");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[61]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[61]+1);
av2[1]=t2;
av2[2]=((C_word*)t0)[2];
tp(3,av2);}}

/* harr-for-each in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1925(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word t5;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_1925,4,av);}
a=C_alloc(4);
t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_1933,a[2]=t1,a[3]=t2,tmp=(C_word)a,a+=4,tmp);
C_trace("maze.scm:448: harr:elts");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[65]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[65]+1);
av2[1]=t4;
av2[2]=t3;
tp(3,av2);}}

/* k2455 in k2438 in k2435 in k2349 in k2346 in k2343 in k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2457(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,3)))){
C_save_and_reclaim((void *)f_2457,2,av);}
C_trace("maze.scm:589: bit-test");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[81]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[81]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=t1;
av2[3]=C_fast_retrieve(lf[75]);
tp(4,av2);}}

/* k1901 in doloop330 in doloop327 in k1841 in harr-tabulate in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1903(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,c,3)))){
C_save_and_reclaim((void *)f_1903,2,av);}
a=C_alloc(8);
t2=C_i_vector_set(((C_word*)t0)[2],((C_word*)t0)[3],t1);
t3=C_a_i_plus(&a,2,((C_word*)t0)[4],C_fix(1));
t4=C_a_i_plus(&a,2,((C_word*)t0)[3],C_fix(1));
t5=((C_word*)((C_word*)t0)[5])[1];
f_1878(t5,((C_word*)t0)[6],t3,t4);}

/* k2451 in k2438 in k2435 in k2349 in k2346 in k2343 in k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2453(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_2453,2,av);}
if(C_truep(t1)){
t2=((C_word*)t0)[2];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t2;
av2[1]=C_SCHEME_UNDEFINED;
f_2354(2,av2);}}
else{
C_trace("maze.scm:589: proc");
t2=((C_word*)t0)[3];{
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=t2;
av2[1]=((C_word*)t0)[2];
av2[2]=((C_word*)t0)[4];
((C_proc)C_fast_retrieve_proc(t2))(3,av2);}}}

/* k3170 in loop in k3147 in k3144 in k3141 in k3138 in k3135 in k3132 in k3129 in run-r7rs-benchmark in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3172(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,3)))){
C_save_and_reclaim((void *)f_3172,2,av);}
C_trace("maze.scm:806: loop");
t2=((C_word*)((C_word*)t0)[2])[1];
f_3154(t2,((C_word*)t0)[3],((C_word*)t0)[4],t1);}

/* k3176 in loop in k3147 in k3144 in k3141 in k3138 in k3135 in k3132 in k3129 in run-r7rs-benchmark in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3178(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,c,2)))){
C_save_and_reclaim((void *)f_3178,2,av);}
a=C_alloc(8);
if(C_truep(t1)){
t2=(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_3181,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],a[7]=((C_word*)t0)[7],tmp=(C_word)a,a+=8,tmp);
C_trace("maze.scm:808: current-jiffy");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[2]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[2]+1);
av2[1]=t2;
tp(2,av2);}}
else{
t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3257,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[4],tmp=(C_word)a,a+=4,tmp);
C_trace("maze.scm:830: display");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[103]+1));
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[103]+1);
av2[1]=t2;
av2[2]=lf[112];
tp(3,av2);}}}

/* k3141 in k3138 in k3135 in k3132 in k3129 in run-r7rs-benchmark in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3143(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,c,2)))){
C_save_and_reclaim((void *)f_3143,2,av);}
a=C_alloc(8);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_3146,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=t2,a[6]=((C_word*)t0)[5],a[7]=((C_word*)t0)[6],tmp=(C_word)a,a+=8,tmp);
C_trace("maze.scm:801: current-second");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[5]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[5]+1);
av2[1]=t3;
tp(2,av2);}}

/* k3138 in k3135 in k3132 in k3129 in run-r7rs-benchmark in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3140(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(7,c,2)))){
C_save_and_reclaim((void *)f_3140,2,av);}
a=C_alloc(7);
t2=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3143,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],tmp=(C_word)a,a+=7,tmp);
C_trace("maze.scm:800: jiffies-per-second");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[4]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[4]+1);
av2[1]=t2;
tp(2,av2);}}

/* k3144 in k3141 in k3138 in k3135 in k3132 in k3129 in run-r7rs-benchmark in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3146(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(9,c,2)))){
C_save_and_reclaim((void *)f_3146,2,av);}
a=C_alloc(9);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|8,a[1]=(C_word)f_3149,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=t2,a[6]=((C_word*)t0)[5],a[7]=((C_word*)t0)[6],a[8]=((C_word*)t0)[7],tmp=(C_word)a,a+=9,tmp);
C_trace("maze.scm:802: current-jiffy");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[2]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[2]+1);
av2[1]=t3;
tp(2,av2);}}

/* k3147 in k3144 in k3141 in k3138 in k3135 in k3132 in k3129 in run-r7rs-benchmark in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3149(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(13,c,4)))){
C_save_and_reclaim((void *)f_3149,2,av);}
a=C_alloc(13);
t2=t1;
t3=C_SCHEME_UNDEFINED;
t4=(*a=C_VECTOR_TYPE|1,a[1]=t3,tmp=(C_word)a,a+=2,tmp);
t5=C_set_block_item(t4,0,(*a=C_CLOSURE_TYPE|10,a[1]=(C_word)f_3154,a[2]=((C_word*)t0)[2],a[3]=t4,a[4]=((C_word*)t0)[3],a[5]=t2,a[6]=((C_word*)t0)[4],a[7]=((C_word*)t0)[5],a[8]=((C_word*)t0)[6],a[9]=((C_word*)t0)[7],a[10]=((C_word)li97),tmp=(C_word)a,a+=11,tmp));
t6=((C_word*)t4)[1];
f_3154(t6,((C_word*)t0)[8],C_fix(0),C_SCHEME_FALSE);}

/* k2600 in k2576 in k2573 in k2564 in k2561 in k2558 in k2555 in make-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2602(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_2602,2,av);}
C_trace("maze.scm:615: reroot-maze");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[56]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[56]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=t1;
tp(3,av2);}}

/* loop in k3147 in k3144 in k3141 in k3138 in k3135 in k3132 in k3129 in run-r7rs-benchmark in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_3154(C_word t0,C_word t1,C_word t2,C_word t3){
C_word tmp;
C_word t4;
C_word t5;
C_word t6;
C_word t7;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(9,0,2)))){
C_save_and_reclaim_args((void *)trf_3154,4,t0,t1,t2,t3);}
a=C_alloc(9);
if(C_truep(C_i_lessp(t2,((C_word*)t0)[2]))){
t4=C_a_i_plus(&a,2,t2,C_fix(1));
t5=t4;
t6=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3172,a[2]=((C_word*)t0)[3],a[3]=t1,a[4]=t5,tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:806: thunk");
t7=((C_word*)t0)[4];{
C_word av2[2];
av2[0]=t7;
av2[1]=t6;
((C_proc)C_fast_retrieve_proc(t7))(2,av2);}}
else{
t4=(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_3178,a[2]=((C_word*)t0)[5],a[3]=t1,a[4]=t3,a[5]=((C_word*)t0)[6],a[6]=((C_word*)t0)[7],a[7]=((C_word*)t0)[8],tmp=(C_word)a,a+=8,tmp);
C_trace("maze.scm:807: ok?");
t5=((C_word*)t0)[9];{
C_word av2[3];
av2[0]=t5;
av2[1]=t4;
av2[2]=t3;
((C_proc)C_fast_retrieve_proc(t5))(3,av2);}}}

/* k2489 in k2501 in k2346 in k2343 in k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2491(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_2491,2,av);}
C_trace("maze.scm:582: proc");
t2=((C_word*)t0)[2];{
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=t2;
av2[1]=((C_word*)t0)[3];
av2[2]=t1;
((C_proc)C_fast_retrieve_proc(t2))(3,av2);}}

/* make-harr in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1705(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4=av[4];
C_word t5;
C_word *a;
if(c!=5) C_bad_argc_2(c,5,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,c,1)))){
C_save_and_reclaim((void *)f_1705,5,av);}
a=C_alloc(5);
t5=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t5;
av2[1]=C_a_i_vector4(&a,4,lf[60],t2,t3,t4);
((C_proc)(void*)(*((C_word*)t5+1)))(2,av2);}}

/* write-ch in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2639(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word t4;
C_word t5;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(3,c,1)))){
C_save_and_reclaim((void *)f_2639,3,av);}
a=C_alloc(3);
t3=C_a_i_cons(&a,2,t2,C_fast_retrieve(lf[85]));
t4=C_mutate2((C_word*)lf[85]+1 /* (set! output ...) */,t3);
t5=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t5;
av2[1]=t4;
((C_proc)(void*)(*((C_word*)t5+1)))(2,av2);}}

/* bit-test in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2951(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word t5;
C_word t6;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,1)))){
C_save_and_reclaim((void *)f_2951,4,av);}
a=C_alloc(4);
t4=C_a_i_bitwise_and(&a,2,t2,t3);
t5=C_i_zerop(t4);
t6=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t6;
av2[1]=C_i_not(t5);
((C_proc)(void*)(*((C_word*)t6+1)))(2,av2);}}

/* k2438 in k2435 in k2349 in k2346 in k2343 in k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2440(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,c,2)))){
C_save_and_reclaim((void *)f_2440,2,av);}
a=C_alloc(8);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2453,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=t2,tmp=(C_word)a,a+=5,tmp);
t4=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2457,a[2]=t3,tmp=(C_word)a,a+=3,tmp);
C_trace("maze.scm:589: cell:walls");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[45]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[45]+1);
av2[1]=t4;
av2[2]=t2;
tp(3,av2);}}

/* k2622 in pmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2624(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,3)))){
C_save_and_reclaim((void *)f_2624,2,av);}
t2=C_i_vector_ref(t1,C_fix(0));
t3=C_i_vector_ref(t1,C_fix(1));
t4=C_i_vector_ref(t1,C_fix(2));
C_trace("maze.scm:626: print-hexmaze");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[84]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[84]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=t2;
av2[3]=t3;
tp(4,av2);}}

/* k3244 in k3215 in k3212 in k3209 in k3206 in k3203 in k3200 in k3197 in k3194 in k3191 in k3188 in k3182 in k3179 in k3176 in loop in k3147 in k3144 in k3141 in k3138 in k3135 in k3132 in k3129 in ... */
static void C_ccall f_3246(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_3246,2,av);}
C_trace("maze.scm:821: display");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[103]+1));
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[103]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=t1;
tp(3,av2);}}

/* pmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2620(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word t5;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(3,c,3)))){
C_save_and_reclaim((void *)f_2620,4,av);}
a=C_alloc(3);
t4=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2624,a[2]=t1,tmp=(C_word)a,a+=3,tmp);
C_trace("maze.scm:622: make-maze");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[82]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[82]+1);
av2[1]=t4;
av2[2]=t2;
av2[3]=t3;
tp(4,av2);}}

/* k2980 in dot/space in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2982(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_2982,2,av);}
C_trace("maze.scm:728: cell:mark");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[49]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[49]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=t1;
tp(3,av2);}}

/* display-hexbottom in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2984(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word t4;
C_word t5;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(7,c,3)))){
C_save_and_reclaim((void *)f_2984,3,av);}
a=C_alloc(7);
t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_2988,a[2]=t1,a[3]=t2,tmp=(C_word)a,a+=4,tmp);
t4=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3015,a[2]=t3,tmp=(C_word)a,a+=3,tmp);
C_trace("maze.scm:732: bit-test");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[81]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[81]+1);
av2[1]=t4;
av2[2]=t2;
av2[3]=C_fast_retrieve(lf[73]);
tp(4,av2);}}

/* k2986 in display-hexbottom in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2988(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(7,c,3)))){
C_save_and_reclaim((void *)f_2988,2,av);}
a=C_alloc(7);
t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_2991,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3008,a[2]=t2,tmp=(C_word)a,a+=3,tmp);
C_trace("maze.scm:733: bit-test");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[81]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[81]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[3];
av2[3]=C_fast_retrieve(lf[74]);
tp(4,av2);}}

/* k1024 in bitwise-and in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1026(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,3)))){
C_save_and_reclaim((void *)f_1026,2,av);}
a=C_alloc(6);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_1030,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],a[5]=((C_word*)t0)[4],tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:33: div");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[20]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[20]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[3];
av2[3]=C_fix(2);
tp(4,av2);}}

/* k2616 in k2612 in k2555 in make-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2618(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,3)))){
C_save_and_reclaim((void *)f_2618,2,av);}
C_trace("maze.scm:608: permute-vec!");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[52]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[52]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=((C_word*)t0)[3];
av2[3]=t1;
tp(4,av2);}}

/* k2612 in k2555 in make-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2614(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_2614,2,av);}
a=C_alloc(4);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_2618,a[2]=((C_word*)t0)[2],a[3]=t2,tmp=(C_word)a,a+=4,tmp);
C_trace("maze.scm:608: random-state");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[23]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[23]+1);
av2[1]=t3;
av2[2]=C_fix(20);
tp(3,av2);}}

/* k2174 in k2122 in doloop363 in doloop360 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2176(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,4)))){
C_save_and_reclaim((void *)f_2176,2,av);}
C_trace("maze.scm:512: add-wall");
t2=((C_word*)t0)[2];
f_1969(t2,((C_word*)t0)[3],((C_word*)t0)[4],t1,C_fast_retrieve(lf[73]));}

/* k3255 in k3176 in loop in k3147 in k3144 in k3141 in k3138 in k3135 in k3132 in k3129 in run-r7rs-benchmark in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3257(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_3257,2,av);}
a=C_alloc(4);
t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3260,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
C_trace("maze.scm:831: write");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[108]+1));
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[108]+1);
av2[1]=t2;
av2[2]=((C_word*)t0)[3];
tp(3,av2);}}

/* k2343 in k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2345(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(17,c,3)))){
C_save_and_reclaim((void *)f_2345,2,av);}
a=C_alloc(17);
t2=(*a=C_CLOSURE_TYPE|9,a[1]=(C_word)f_2348,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],a[7]=((C_word*)t0)[7],a[8]=((C_word*)t0)[8],a[9]=((C_word*)t0)[9],tmp=(C_word)a,a+=10,tmp);
t3=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_2521,a[2]=t2,a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[5],a[5]=((C_word*)t0)[6],a[6]=((C_word*)t0)[4],tmp=(C_word)a,a+=7,tmp);
C_trace("maze.scm:581: bit-test");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[81]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[81]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[9];
av2[3]=C_fast_retrieve(lf[74]);
tp(4,av2);}}

/* k2346 in k2343 in k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2348(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(16,c,3)))){
C_save_and_reclaim((void *)f_2348,2,av);}
a=C_alloc(16);
t2=(*a=C_CLOSURE_TYPE|8,a[1]=(C_word)f_2351,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],a[7]=((C_word*)t0)[7],a[8]=((C_word*)t0)[8],tmp=(C_word)a,a+=9,tmp);
t3=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_2503,a[2]=t2,a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],tmp=(C_word)a,a+=7,tmp);
C_trace("maze.scm:582: bit-test");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[81]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[81]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[9];
av2[3]=C_fast_retrieve(lf[75]);
tp(4,av2);}}

/* k2148 in k2128 in k2125 in k2122 in doloop363 in doloop360 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2150(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,4)))){
C_save_and_reclaim((void *)f_2150,2,av);}
C_trace("maze.scm:515: add-wall");
t2=((C_word*)t0)[2];
f_1969(t2,((C_word*)t0)[3],((C_word*)t0)[4],t1,C_fast_retrieve(lf[75]));}

/* run in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3017(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word t5;
C_word t6;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(3,c,3)))){
C_save_and_reclaim((void *)f_3017,4,av);}
a=C_alloc(3);
t4=C_set_block_item(lf[85] /* output */,0,C_SCHEME_END_OF_LIST);
t5=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3022,a[2]=t1,tmp=(C_word)a,a+=3,tmp);
C_trace("maze.scm:751: pmaze");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[83]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[83]+1);
av2[1]=t5;
av2[2]=t2;
av2[3]=t3;
tp(4,av2);}}

/* k3013 in display-hexbottom in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3015(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_3015,2,av);}
t2=(C_truep(t1)?C_make_character(92):C_make_character(32));
C_trace("maze.scm:732: write-ch");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[86]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[86]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=t2;
tp(3,av2);}}

/* k3261 in k3258 in k3255 in k3176 in loop in k3147 in k3144 in k3141 in k3138 in k3135 in k3132 in k3129 in run-r7rs-benchmark in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3263(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_3263,2,av);}
a=C_alloc(4);
t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3266,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
t3=*((C_word*)lf[101]+1);
C_trace("maze.scm:833: flush-output-port");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[0]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[0]+1);
av2[1]=t2;
av2[2]=*((C_word*)lf[101]+1);
tp(3,av2);}}

/* k3258 in k3255 in k3176 in loop in k3147 in k3144 in k3141 in k3138 in k3135 in k3132 in k3129 in run-r7rs-benchmark in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3260(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_3260,2,av);}
a=C_alloc(4);
t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3263,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
C_trace("maze.scm:832: newline");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[102]+1));
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[102]+1);
av2[1]=t2;
tp(2,av2);}}

/* k3264 in k3261 in k3258 in k3255 in k3176 in loop in k3147 in k3144 in k3141 in k3138 in k3135 in k3132 in k3129 in run-r7rs-benchmark in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3266(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_3266,2,av);}
t2=((C_word*)t0)[2];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t2;
av2[1]=((C_word*)t0)[3];
((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}

/* harr in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1747(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word t5;
C_word t6;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(9,c,2)))){
C_save_and_reclaim((void *)f_1747,4,av);}
a=C_alloc(9);
t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1755,a[2]=t1,a[3]=t2,a[4]=t3,tmp=(C_word)a,a+=5,tmp);
t5=C_a_i_times(&a,2,t2,t3);
C_trace("maze.scm:410: make-vector");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[67]+1));
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[67]+1);
av2[1]=t4;
av2[2]=t5;
tp(3,av2);}}

/* dot/space in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2965(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4=av[4];
C_word t5;
C_word t6;
C_word t7;
C_word *a;
if(c!=5) C_bad_argc_2(c,5,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
C_save_and_reclaim((void *)f_2965,5,av);}
a=C_alloc(6);
t5=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2972,a[2]=t1,tmp=(C_word)a,a+=3,tmp);
if(C_truep(C_i_greater_or_equalp(t3,C_fix(0)))){
t6=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2982,a[2]=t5,tmp=(C_word)a,a+=3,tmp);
C_trace("maze.scm:728: href/rc");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[70]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[70]+1);
av2[1]=t6;
av2[2]=t2;
av2[3]=t3;
av2[4]=t4;
tp(5,av2);}}
else{
t6=t5;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t6;
av2[1]=C_SCHEME_FALSE;
f_2972(2,av2);}}}

/* k1179 in rand in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1181(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,c,3)))){
C_save_and_reclaim((void *)f_1181,2,av);}
a=C_alloc(5);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1184,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:100: mod");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[21]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[21]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[4];
av2[3]=C_fix(2787);
tp(4,av2);}}

/* k1182 in k1179 in rand in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1184(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word t7;
C_word t8;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(16,c,1)))){
C_save_and_reclaim((void *)f_1184,2,av);}
a=C_alloc(16);
t2=C_a_i_times(&a,2,C_fix(2813),t1);
t3=C_a_i_times(&a,2,C_fix(2699),((C_word*)t0)[2]);
t4=C_a_i_minus(&a,2,t2,t3);
t5=C_i_greaterp(t4,C_fix(0));
t6=(C_truep(t5)?t4:C_a_i_plus(&a,2,t4,C_fix(8388607)));
t7=C_i_set_car(((C_word*)t0)[3],t6);
t8=((C_word*)t0)[4];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t8;
av2[1]=t6;
((C_proc)(void*)(*((C_word*)t8+1)))(2,av2);}}

/* k2160 in k2125 in k2122 in doloop363 in doloop360 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2162(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,4)))){
C_save_and_reclaim((void *)f_2162,2,av);}
C_trace("maze.scm:513: add-wall");
t2=((C_word*)t0)[2];
f_1969(t2,((C_word*)t0)[3],((C_word*)t0)[4],t1,C_fast_retrieve(lf[74]));}

/* set-harr:elts in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1741(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1741,4,av);}
t4=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=C_i_vector_set(t2,C_fix(3),t3);
((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}

/* main in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3027(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
if(c!=2) C_bad_argc_2(c,2,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
C_save_and_reclaim((void *)f_3027,2,av);}
a=C_alloc(3);
t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3031,a[2]=t1,tmp=(C_word)a,a+=3,tmp);
C_trace("maze.scm:755: read");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[99]+1));
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[99]+1);
av2[1]=t2;
tp(2,av2);}}

/* k3020 in run in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3022(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_3022,2,av);}
C_trace("maze.scm:752: reverse");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[90]+1));
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[90]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=C_fast_retrieve(lf[85]);
tp(3,av2);}}

/* k3275 in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3277(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
C_save_and_reclaim((void *)f_3277,2,av);}
a=C_alloc(6);
t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3280,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3283,a[2]=t2,tmp=(C_word)a,a+=3,tmp);
C_trace("##sys#implicit-exit-handler");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[114]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[114]+1);
av2[1]=t3;
tp(2,av2);}}

/* harr:elts in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1735(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1735,3,av);}
t3=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t3;
av2[1]=C_i_vector_ref(t2,C_fix(3));
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}

/* k2929 in k2926 in k2923 in k2920 in doloop467 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2931(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_2931,2,av);}
a=C_alloc(4);
t2=C_a_i_plus(&a,2,((C_word*)t0)[2],C_fix(2));
t3=((C_word*)((C_word*)t0)[3])[1];
f_2912(t3,((C_word*)t0)[4],t2);}

/* rand in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1174(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,c,3)))){
C_save_and_reclaim((void *)f_1174,3,av);}
a=C_alloc(5);
t3=C_i_car(t2);
t4=t3;
t5=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1181,a[2]=t2,a[3]=t1,a[4]=t4,tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:99: div");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[20]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[20]+1);
av2[1]=t5;
av2[2]=t4;
av2[3]=C_fix(2787);
tp(4,av2);}}

/* k2128 in k2125 in k2122 in doloop363 in doloop360 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2130(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(18,c,4)))){
C_save_and_reclaim((void *)f_2130,2,av);}
a=C_alloc(18);
t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2133,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
if(C_truep(C_i_lessp(((C_word*)t0)[5],((C_word*)t0)[6]))){
t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2150,a[2]=((C_word*)t0)[7],a[3]=t2,a[4]=((C_word*)t0)[8],tmp=(C_word)a,a+=5,tmp);
t4=C_a_i_plus(&a,2,((C_word*)t0)[5],C_fix(3));
t5=C_a_i_minus(&a,2,((C_word*)t0)[2],C_fix(1));
C_trace("maze.scm:515: href");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[68]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[68]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[9];
av2[3]=t4;
av2[4]=t5;
tp(5,av2);}}
else{
t3=t2;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t3;
av2[1]=C_SCHEME_UNDEFINED;
f_2133(2,av2);}}}

/* wall:neighbor in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1359(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1359,3,av);}
t3=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t3;
av2[1]=C_i_vector_ref(t2,C_fix(2));
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}

/* k3035 in k3032 in k3029 in main in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3037(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
C_save_and_reclaim((void *)f_3037,2,av);}
a=C_alloc(6);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3040,a[2]=((C_word*)t0)[2],a[3]=t2,a[4]=((C_word*)t0)[3],a[5]=((C_word*)t0)[4],tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:758: read");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[99]+1));
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[99]+1);
av2[1]=t3;
tp(2,av2);}}

/* k3029 in main in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3031(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_3031,2,av);}
a=C_alloc(4);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3034,a[2]=t2,a[3]=((C_word*)t0)[2],tmp=(C_word)a,a+=4,tmp);
C_trace("maze.scm:756: read");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[99]+1));
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[99]+1);
av2[1]=t3;
tp(2,av2);}}

/* k3032 in k3029 in main in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3034(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,c,2)))){
C_save_and_reclaim((void *)f_3034,2,av);}
a=C_alloc(5);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3037,a[2]=((C_word*)t0)[2],a[3]=t2,a[4]=((C_word*)t0)[3],tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:757: read");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[99]+1));
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[99]+1);
av2[1]=t3;
tp(2,av2);}}

/* k1507 in lp in permute-vec! in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1509(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_1509,2,av);}
a=C_alloc(4);
t2=C_i_vector_ref(((C_word*)t0)[2],t1);
t3=C_i_vector_set(((C_word*)t0)[2],((C_word*)t0)[3],t2);
t4=C_i_vector_set(((C_word*)t0)[2],t1,((C_word*)t0)[4]);
t5=C_a_i_minus(&a,2,((C_word*)t0)[3],C_fix(1));
C_trace("maze.scm:288: lp");
t6=((C_word*)((C_word*)t0)[5])[1];
f_1496(t6,((C_word*)t0)[6],t5);}

/* set-harr:ncols in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1729(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1729,4,av);}
t4=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=C_i_vector_set(t2,C_fix(2),t3);
((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}

/* k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2949(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word t7;
C_word t8;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(20,c,3)))){
C_save_and_reclaim((void *)f_2949,2,av);}
a=C_alloc(20);
t2=C_a_i_times(&a,2,C_fix(2),t1);
t3=t2;
t4=(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_2659,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=t3,a[6]=((C_word*)t0)[5],a[7]=((C_word*)t0)[6],tmp=(C_word)a,a+=8,tmp);
t5=C_SCHEME_UNDEFINED;
t6=(*a=C_VECTOR_TYPE|1,a[1]=t5,tmp=(C_word)a,a+=2,tmp);
t7=C_set_block_item(t6,0,(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_2912,a[2]=((C_word*)t0)[3],a[3]=t6,a[4]=((C_word*)t0)[6],a[5]=((C_word)li84),tmp=(C_word)a,a+=6,tmp));
t8=((C_word*)t6)[1];
f_2912(t8,t4,C_fix(1));}

/* k1161 in k1155 in mod in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1163(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1163,2,av);}
t2=((C_word*)t0)[2];
f_1107(t2,(C_truep(t1)?C_i_greater_or_equalp(((C_word*)t0)[3],C_fix(0)):C_SCHEME_FALSE));}

/* k2377 in k2364 in k2361 in k2355 in k2352 in k2349 in k2346 in k2343 in k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2379(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_2379,2,av);}
if(C_truep(t1)){
t2=((C_word*)t0)[2];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t2;
av2[1]=C_SCHEME_UNDEFINED;
((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}
else{
C_trace("maze.scm:601: proc");
t2=((C_word*)t0)[3];{
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=t2;
av2[1]=((C_word*)t0)[2];
av2[2]=((C_word*)t0)[4];
((C_proc)C_fast_retrieve_proc(t2))(3,av2);}}}

/* set-wall:owner in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1353(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1353,4,av);}
t4=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=C_i_vector_set(t2,C_fix(1),t3);
((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}

/* harr:ncols in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1723(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1723,3,av);}
t3=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t3;
av2[1]=C_i_vector_ref(t2,C_fix(2));
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}

/* cell:reachable in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1389(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1389,3,av);}
t3=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t3;
av2[1]=C_i_vector_ref(t2,C_fix(1));
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}

/* k2131 in k2128 in k2125 in k2122 in doloop363 in doloop360 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2133(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_2133,2,av);}
a=C_alloc(4);
t2=C_a_i_minus(&a,2,((C_word*)t0)[2],C_fix(2));
t3=((C_word*)((C_word*)t0)[3])[1];
f_2114(t3,((C_word*)t0)[4],t2);}

/* set-harr:nrows in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1717(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1717,4,av);}
t4=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=C_i_vector_set(t2,C_fix(1),t3);
((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}

/* doloop467 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_2912(C_word t0,C_word t1,C_word t2){
C_word tmp;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,0,2)))){
C_save_and_reclaim_args((void *)trf_2912,3,t0,t1,t2);}
a=C_alloc(6);
if(C_truep(C_i_greater_or_equalp(t2,((C_word*)t0)[2]))){
t3=t1;{
C_word av2[2];
av2[0]=t3;
av2[1]=C_SCHEME_UNDEFINED;
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}
else{
t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_2922,a[2]=t2,a[3]=((C_word*)t0)[3],a[4]=t1,a[5]=((C_word*)t0)[4],tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:668: write-ch");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[86]);
C_word av2[3];
av2[0]=*((C_word*)lf[86]+1);
av2[1]=t3;
av2[2]=C_make_character(32);
tp(3,av2);}}}

/* k2381 in k2364 in k2361 in k2355 in k2352 in k2349 in k2346 in k2343 in k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2383(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,3)))){
C_save_and_reclaim((void *)f_2383,2,av);}
C_trace("maze.scm:601: bit-test");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[81]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[81]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=t1;
av2[3]=C_fast_retrieve(lf[73]);
tp(4,av2);}}

/* random-state in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1168(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(3,c,1)))){
C_save_and_reclaim((void *)f_1168,3,av);}
a=C_alloc(3);
t3=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t3;
av2[1]=C_a_i_cons(&a,2,t2,C_SCHEME_FALSE);
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}

/* make-cell in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1383(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(7,c,1)))){
C_save_and_reclaim((void *)f_1383,4,av);}
a=C_alloc(7);
t4=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=C_a_i_vector6(&a,6,lf[40],t2,t3,C_fix(-1),C_SCHEME_FALSE,C_SCHEME_FALSE);
((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}

/* harr:nrows in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1711(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1711,3,av);}
t3=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t3;
av2[1]=C_i_vector_ref(t2,C_fix(1));
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}

/* hset! in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1789(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4=av[4];
C_word t5=av[5];
C_word t6;
C_word t7;
C_word *a;
if(c!=6) C_bad_argc_2(c,6,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,3)))){
C_save_and_reclaim((void *)f_1789,6,av);}
a=C_alloc(6);
t6=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_1793,a[2]=t1,a[3]=t5,a[4]=t2,a[5]=t3,tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:421: div");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[20]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[20]+1);
av2[1]=t6;
av2[2]=t4;
av2[3]=C_fix(2);
tp(4,av2);}}

/* k1785 in k1773 in k1766 in k1763 in href in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1787(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,c,1)))){
C_save_and_reclaim((void *)f_1787,2,av);}
a=C_alloc(8);
t2=C_a_i_times(&a,2,t1,((C_word*)t0)[2]);
t3=C_a_i_plus(&a,2,t2,((C_word*)t0)[3]);
t4=((C_word*)t0)[4];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=C_i_vector_ref(((C_word*)t0)[5],t3);
((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}

/* k2099 in doloop360 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2101(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_2101,2,av);}
a=C_alloc(4);
t2=C_a_i_minus(&a,2,((C_word*)t0)[2],C_fix(3));
t3=((C_word*)((C_word*)t0)[3])[1];
f_2091(t3,((C_word*)t0)[4],t2);}

/* k2926 in k2923 in k2920 in doloop467 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2928(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,c,2)))){
C_save_and_reclaim((void *)f_2928,2,av);}
a=C_alloc(5);
t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2931,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
t3=C_i_nequalp(((C_word*)t0)[2],((C_word*)t0)[5]);
t4=(C_truep(t3)?C_make_character(32):C_make_character(95));
C_trace("maze.scm:671: write-ch");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[86]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[86]+1);
av2[1]=t2;
av2[2]=t4;
tp(3,av2);}}

/* k2923 in k2920 in doloop467 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2925(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
C_save_and_reclaim((void *)f_2925,2,av);}
a=C_alloc(6);
t2=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_2928,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:670: write-ch");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[86]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[86]+1);
av2[1]=t2;
av2[2]=C_make_character(32);
tp(3,av2);}}

/* k2920 in doloop467 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2922(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
C_save_and_reclaim((void *)f_2922,2,av);}
a=C_alloc(6);
t2=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_2925,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:669: write-ch");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[86]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[86]+1);
av2[1]=t2;
av2[2]=C_make_character(32);
tp(3,av2);}}

/* k2352 in k2349 in k2346 in k2343 in k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2354(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(17,c,4)))){
C_save_and_reclaim((void *)f_2354,2,av);}
a=C_alloc(17);
t2=(*a=C_CLOSURE_TYPE|8,a[1]=(C_word)f_2357,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],a[7]=((C_word*)t0)[7],a[8]=((C_word*)t0)[8],tmp=(C_word)a,a+=9,tmp);
if(C_truep(C_i_lessp(((C_word*)t0)[5],((C_word*)t0)[8]))){
t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_2413,a[2]=t2,a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
t4=C_a_i_plus(&a,2,((C_word*)t0)[5],C_fix(2));
C_trace("maze.scm:593: href");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[68]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[68]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[6];
av2[3]=((C_word*)t0)[4];
av2[4]=t4;
tp(5,av2);}}
else{
t3=t2;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t3;
av2[1]=C_SCHEME_UNDEFINED;
f_2357(2,av2);}}}

/* k2355 in k2352 in k2349 in k2346 in k2343 in k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2357(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(10,c,3)))){
C_save_and_reclaim((void *)f_2357,2,av);}
a=C_alloc(10);
t2=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_2363,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],tmp=(C_word)a,a+=7,tmp);
if(C_truep(C_i_lessp(((C_word*)t0)[4],((C_word*)t0)[7]))){
t3=C_i_less_or_equalp(((C_word*)t0)[5],((C_word*)t0)[8]);
if(C_truep(t3)){
t4=t2;
f_2363(t4,t3);}
else{
t4=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2407,a[2]=t2,tmp=(C_word)a,a+=3,tmp);
C_trace("maze.scm:599: mod");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[21]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[21]+1);
av2[1]=t4;
av2[2]=((C_word*)t0)[4];
av2[3]=C_fix(6);
tp(4,av2);}}}
else{
t3=t2;
f_2363(t3,C_SCHEME_FALSE);}}

/* k1801 in k1794 in k1791 in hset! in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1803(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(7,c,2)))){
C_save_and_reclaim((void *)f_1803,2,av);}
a=C_alloc(7);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_1815,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=t2,a[6]=((C_word*)t0)[5],tmp=(C_word)a,a+=7,tmp);
C_trace("maze.scm:424: harr:ncols");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[63]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[63]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[6];
tp(3,av2);}}

/* k1155 in mod in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1157(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_1157,2,av);}
a=C_alloc(4);
if(C_truep(t1)){
t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_1163,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
C_trace("maze.scm:60: exact-integer?");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[12]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[12]+1);
av2[1]=t2;
av2[2]=((C_word*)t0)[4];
tp(3,av2);}}
else{
t2=((C_word*)t0)[2];
f_1107(t2,C_SCHEME_FALSE);}}

/* k2349 in k2346 in k2343 in k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2351(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(19,c,3)))){
C_save_and_reclaim((void *)f_2351,2,av);}
a=C_alloc(19);
t2=(*a=C_CLOSURE_TYPE|8,a[1]=(C_word)f_2354,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],a[7]=((C_word*)t0)[7],a[8]=((C_word*)t0)[8],tmp=(C_word)a,a+=9,tmp);
t3=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_2437,a[2]=t2,a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],tmp=(C_word)a,a+=7,tmp);
if(C_truep(C_i_greaterp(((C_word*)t0)[4],C_fix(0)))){
t4=C_i_less_or_equalp(((C_word*)t0)[5],((C_word*)t0)[8]);
if(C_truep(t4)){
t5=t3;
f_2437(t5,t4);}
else{
t5=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2481,a[2]=t3,tmp=(C_word)a,a+=3,tmp);
C_trace("maze.scm:587: mod");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[21]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[21]+1);
av2[1]=t5;
av2[2]=((C_word*)t0)[4];
av2[3]=C_fix(6);
tp(4,av2);}}}
else{
t4=t3;
f_2437(t4,C_SCHEME_FALSE);}}

/* k2364 in k2361 in k2355 in k2352 in k2349 in k2346 in k2343 in k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2366(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,c,2)))){
C_save_and_reclaim((void *)f_2366,2,av);}
a=C_alloc(8);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2379,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=t2,tmp=(C_word)a,a+=5,tmp);
t4=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2383,a[2]=t3,tmp=(C_word)a,a+=3,tmp);
C_trace("maze.scm:601: cell:walls");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[45]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[45]+1);
av2[1]=t4;
av2[2]=t2;
tp(3,av2);}}

/* k2836 in k2818 in doloop486 in k2691 in doloop483 in k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2838(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_2838,2,av);}
C_trace("maze.scm:701: cell:walls");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[45]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[45]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=t1;
tp(3,av2);}}

/* k2832 in k2818 in doloop486 in k2691 in doloop483 in k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2834(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_2834,2,av);}
C_trace("maze.scm:701: display-hexbottom");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[87]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[87]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=t1;
tp(3,av2);}}

/* set-wall:neighbor in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1365(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1365,4,av);}
t4=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=C_i_vector_set(t2,C_fix(2),t3);
((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}

/* k2361 in k2355 in k2352 in k2349 in k2346 in k2343 in k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_2363(C_word t0,C_word t1){
C_word tmp;
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(12,0,4)))){
C_save_and_reclaim_args((void *)trf_2363,2,t0,t1);}
a=C_alloc(12);
if(C_truep(t1)){
t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_2366,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
t3=C_a_i_plus(&a,2,((C_word*)t0)[4],C_fix(3));
t4=C_a_i_plus(&a,2,((C_word*)t0)[5],C_fix(1));
C_trace("maze.scm:600: href");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[68]);
C_word av2[5];
av2[0]=*((C_word*)lf[68]+1);
av2[1]=t2;
av2[2]=((C_word*)t0)[6];
av2[3]=t3;
av2[4]=t4;
tp(5,av2);}}
else{
t2=((C_word*)t0)[2];{
C_word av2[2];
av2[0]=t2;
av2[1]=C_SCHEME_UNDEFINED;
((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}}

/* k1773 in k1766 in k1763 in href in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1775(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
C_save_and_reclaim((void *)f_1775,2,av);}
a=C_alloc(6);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_1787,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=t2,tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:418: harr:ncols");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[63]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[63]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[5];
tp(3,av2);}}

/* k1766 in k1763 in href in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1768(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
C_save_and_reclaim((void *)f_1768,2,av);}
a=C_alloc(6);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_1775,a[2]=((C_word*)t0)[2],a[3]=t2,a[4]=((C_word*)t0)[3],a[5]=((C_word*)t0)[4],tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:417: harr:elts");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[65]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[65]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[4];
tp(3,av2);}}

/* k2840 in doloop486 in k2691 in doloop483 in k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2842(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_2842,2,av);}
C_trace("maze.scm:700: write-ch");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[86]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[86]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=t1;
tp(3,av2);}}

/* k1136 in k1105 in mod in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1138(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(12,c,1)))){
C_save_and_reclaim((void *)f_1138,2,av);}
a=C_alloc(12);
t2=C_a_i_times(&a,2,t1,((C_word*)t0)[2]);
t3=C_a_i_minus(&a,2,((C_word*)t0)[3],t2);
t4=C_i_nequalp(t3,C_fix(0));
t5=((C_word*)t0)[4];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t5;
av2[1]=(C_truep(t4)?C_fix(0):C_a_i_plus(&a,2,t3,((C_word*)t0)[2]));
((C_proc)(void*)(*((C_word*)t5+1)))(2,av2);}}

/* set-cell:reachable in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1395(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1395,4,av);}
t4=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=C_i_vector_set(t2,C_fix(1),t3);
((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}

/* k3006 in k2986 in display-hexbottom in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3008(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_3008,2,av);}
t2=(C_truep(t1)?C_make_character(95):C_make_character(32));
C_trace("maze.scm:733: write-ch");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[86]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[86]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=t2;
tp(3,av2);}}

/* href in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1761(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4=av[4];
C_word t5;
C_word t6;
C_word *a;
if(c!=5) C_bad_argc_2(c,5,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,c,3)))){
C_save_and_reclaim((void *)f_1761,5,av);}
a=C_alloc(5);
t5=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1765,a[2]=t1,a[3]=t2,a[4]=t3,tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:415: div");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[20]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[20]+1);
av2[1]=t5;
av2[2]=t4;
av2[3]=C_fix(2);
tp(4,av2);}}

/* k1763 in href in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1765(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,c,3)))){
C_save_and_reclaim((void *)f_1765,2,av);}
a=C_alloc(5);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1768,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:416: div");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[20]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[20]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[4];
av2[3]=C_fix(3);
tp(4,av2);}}

/* k2999 in k2989 in k2986 in display-hexbottom in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3001(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_3001,2,av);}
t2=(C_truep(t1)?C_make_character(47):C_make_character(32));
C_trace("maze.scm:734: write-ch");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[86]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[86]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=t2;
tp(3,av2);}}

/* a1537 in dig-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1538(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word t4;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,c,3)))){
C_save_and_reclaim((void *)f_1538,3,av);}
a=C_alloc(5);
t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1544,a[2]=((C_word*)t0)[2],a[3]=t2,a[4]=((C_word)li39),tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:297: vector-for-each-rev");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[51]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[51]+1);
av2[1]=t1;
av2[2]=t3;
av2[3]=((C_word*)t0)[3];
tp(4,av2);}}

/* dig-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1532(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word t5;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,c,3)))){
C_save_and_reclaim((void *)f_1532,4,av);}
a=C_alloc(5);
t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1538,a[2]=t3,a[3]=t2,a[4]=((C_word)li40),tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:295: call-with-current-continuation");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[54]+1));
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[54]+1);
av2[1]=t1;
av2[2]=t4;
tp(3,av2);}}

/* make-wall in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1341(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4=av[4];
C_word t5;
C_word *a;
if(c!=5) C_bad_argc_2(c,5,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,c,1)))){
C_save_and_reclaim((void *)f_1341,5,av);}
a=C_alloc(5);
t5=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t5;
av2[1]=C_a_i_vector4(&a,4,lf[32],t2,t3,t4);
((C_proc)(void*)(*((C_word*)t5+1)))(2,av2);}}

/* doloop486 in k2691 in doloop483 in k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_2810(C_word t0,C_word t1,C_word t2){
C_word tmp;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(14,0,4)))){
C_save_and_reclaim_args((void *)trf_2810,3,t0,t1,t2);}
a=C_alloc(14);
if(C_truep(C_i_greater_or_equalp(t2,((C_word*)t0)[2]))){
t3=t1;{
C_word av2[2];
av2[0]=t3;
av2[1]=C_SCHEME_UNDEFINED;
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}
else{
t3=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_2820,a[2]=t2,a[3]=((C_word*)t0)[3],a[4]=t1,a[5]=((C_word*)t0)[4],a[6]=((C_word*)t0)[5],tmp=(C_word)a,a+=7,tmp);
t4=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2842,a[2]=t3,tmp=(C_word)a,a+=3,tmp);
t5=C_a_i_minus(&a,2,t2,C_fix(1));
C_trace("maze.scm:700: dot/space");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[88]);
C_word av2[5];
av2[0]=*((C_word*)lf[88]+1);
av2[1]=t4;
av2[2]=((C_word*)t0)[4];
av2[3]=((C_word*)t0)[5];
av2[4]=t5;
tp(5,av2);}}}

/* wall:owner in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1347(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1347,3,av);}
t3=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t3;
av2[1]=C_i_vector_ref(t2,C_fix(1));
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}

/* k1753 in harr in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1755(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,4)))){
C_save_and_reclaim((void *)f_1755,2,av);}
C_trace("maze.scm:410: make-harr");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[59]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[59]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=((C_word*)t0)[3];
av2[3]=((C_word*)t0)[4];
av2[4]=t1;
tp(5,av2);}}

/* k1841 in harr-tabulate in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1843(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word t7;
C_word t8;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(19,c,3)))){
C_save_and_reclaim((void *)f_1843,2,av);}
a=C_alloc(19);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_1846,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=t2,tmp=(C_word)a,a+=6,tmp);
t4=C_a_i_minus(&a,2,((C_word*)t0)[3],C_fix(1));
t5=C_SCHEME_UNDEFINED;
t6=(*a=C_VECTOR_TYPE|1,a[1]=t5,tmp=(C_word)a,a+=2,tmp);
t7=C_set_block_item(t6,0,(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_1855,a[2]=t6,a[3]=((C_word*)t0)[4],a[4]=t2,a[5]=((C_word*)t0)[5],a[6]=((C_word)li63),tmp=(C_word)a,a+=7,tmp));
t8=((C_word*)t6)[1];
f_1855(t8,t3,t4);}

/* k1844 in k1841 in harr-tabulate in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1846(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,4)))){
C_save_and_reclaim((void *)f_1846,2,av);}
C_trace("maze.scm:444: make-harr");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[59]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[59]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=((C_word*)t0)[3];
av2[3]=((C_word*)t0)[4];
av2[4]=((C_word*)t0)[5];
tp(5,av2);}}

/* k2821 in k2818 in doloop486 in k2691 in doloop483 in k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2823(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_2823,2,av);}
a=C_alloc(4);
t2=C_a_i_plus(&a,2,((C_word*)t0)[2],C_fix(2));
t3=((C_word*)((C_word*)t0)[3])[1];
f_2810(t3,((C_word*)t0)[4],t2);}

/* k2818 in doloop486 in k2691 in doloop483 in k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2820(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(11,c,4)))){
C_save_and_reclaim((void *)f_2820,2,av);}
a=C_alloc(11);
t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2823,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2834,a[2]=t2,tmp=(C_word)a,a+=3,tmp);
t4=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2838,a[2]=t3,tmp=(C_word)a,a+=3,tmp);
C_trace("maze.scm:701: href/rc");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[70]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[70]+1);
av2[1]=t4;
av2[2]=((C_word*)t0)[5];
av2[3]=((C_word*)t0)[6];
av2[4]=((C_word*)t0)[2];
tp(5,av2);}}

/* wall:bit in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1371(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1371,3,av);}
t3=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t3;
av2[1]=C_i_vector_ref(t2,C_fix(3));
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}

/* set-wall:bit in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1377(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1377,4,av);}
t4=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=C_i_vector_set(t2,C_fix(3),t3);
((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}

/* a1616 in k1610 in search in dfs-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1617(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word t4;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,3)))){
C_save_and_reclaim((void *)f_1617,3,av);}
t3=C_eqp(t2,((C_word*)t0)[2]);
if(C_truep(t3)){
t4=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=C_SCHEME_UNDEFINED;
((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}
else{
C_trace("maze.scm:331: search");
t4=((C_word*)((C_word*)t0)[3])[1];
f_1608(t4,t1,t2,((C_word*)t0)[4]);}}

/* k1610 in search in dfs-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1612(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
C_save_and_reclaim((void *)f_1612,2,av);}
a=C_alloc(6);
t2=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_1617,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word)li42),tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:329: do-children");
t3=((C_word*)t0)[5];{
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=t3;
av2[1]=((C_word*)t0)[6];
av2[2]=t2;
av2[3]=((C_word*)t0)[7];
av2[4]=((C_word*)t0)[4];
((C_proc)C_fast_retrieve_proc(t3))(5,av2);}}

/* harr-tabulate in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1839(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4=av[4];
C_word t5;
C_word t6;
C_word t7;
C_word *a;
if(c!=5) C_bad_argc_2(c,5,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(10,c,2)))){
C_save_and_reclaim((void *)f_1839,5,av);}
a=C_alloc(10);
t5=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_1843,a[2]=t1,a[3]=t2,a[4]=t3,a[5]=t4,tmp=(C_word)a,a+=6,tmp);
t6=C_a_i_times(&a,2,t2,t3);
C_trace("maze.scm:435: make-vector");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[67]+1));
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[67]+1);
av2[1]=t5;
av2[2]=t6;
tp(3,av2);}}

/* k1835 in k1823 in href/rc in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1837(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,c,1)))){
C_save_and_reclaim((void *)f_1837,2,av);}
a=C_alloc(8);
t2=C_a_i_times(&a,2,t1,((C_word*)t0)[2]);
t3=C_a_i_plus(&a,2,t2,((C_word*)t0)[3]);
t4=((C_word*)t0)[4];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=C_i_vector_ref(((C_word*)t0)[5],t3);
((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}

/* k2873 in doloop475 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2875(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(7,c,2)))){
C_save_and_reclaim((void *)f_2875,2,av);}
a=C_alloc(7);
t2=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_2878,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],tmp=(C_word)a,a+=7,tmp);
C_trace("maze.scm:684: write-ch");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[86]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[86]+1);
av2[1]=t2;
av2[2]=C_make_character(47);
tp(3,av2);}}

/* k2876 in k2873 in doloop475 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2878(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(16,c,4)))){
C_save_and_reclaim((void *)f_2878,2,av);}
a=C_alloc(16);
t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2881,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2895,a[2]=t2,tmp=(C_word)a,a+=3,tmp);
t4=C_a_i_minus(&a,2,((C_word*)t0)[5],C_fix(1));
t5=C_a_i_plus(&a,2,((C_word*)t0)[2],C_fix(1));
C_trace("maze.scm:685: dot/space");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[88]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[88]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[6];
av2[3]=t4;
av2[4]=t5;
tp(5,av2);}}

/* k2479 in k2349 in k2346 in k2343 in k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2481(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_2481,2,av);}
t2=((C_word*)t0)[2];
f_2437(t2,C_i_zerop(t1));}

/* search in dfs-maze in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_1608(C_word t0,C_word t1,C_word t2,C_word t3){
C_word tmp;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,0,3)))){
C_save_and_reclaim_args((void *)trf_1608,4,t0,t1,t2,t3);}
a=C_alloc(8);
t4=(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_1612,a[2]=t3,a[3]=((C_word*)t0)[2],a[4]=t2,a[5]=((C_word*)t0)[3],a[6]=t1,a[7]=((C_word*)t0)[4],tmp=(C_word)a,a+=8,tmp);
C_trace("maze.scm:328: set-cell:parent");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[48]);
C_word av2[4];
av2[0]=*((C_word*)lf[48]+1);
av2[1]=t4;
av2[2]=t2;
av2[3]=t3;
tp(4,av2);}}

/* dfs-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1602(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4=av[4];
C_word t5;
C_word t6;
C_word t7;
C_word t8;
C_word *a;
if(c!=5) C_bad_argc_2(c,5,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,c,4)))){
C_save_and_reclaim((void *)f_1602,5,av);}
a=C_alloc(8);
t5=C_SCHEME_UNDEFINED;
t6=(*a=C_VECTOR_TYPE|1,a[1]=t5,tmp=(C_word)a,a+=2,tmp);
t7=C_set_block_item(t6,0,(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_1608,a[2]=t6,a[3]=t4,a[4]=t2,a[5]=((C_word)li43),tmp=(C_word)a,a+=6,tmp));
t8=((C_word*)t6)[1];
f_1608(t8,t1,t3,C_SCHEME_FALSE);}

/* k1598 in k1555 in k1552 in k1549 in k1546 in a1543 in a1537 in dig-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1600(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(9,c,2)))){
C_save_and_reclaim((void *)f_1600,2,av);}
a=C_alloc(9);
if(C_truep(t1)){
t2=((C_word*)t0)[2];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t2;
av2[1]=C_SCHEME_UNDEFINED;
((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}
else{
t2=(*a=C_CLOSURE_TYPE|8,a[1]=(C_word)f_1566,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[4],a[4]=((C_word*)t0)[2],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],a[7]=((C_word*)t0)[7],a[8]=((C_word*)t0)[8],tmp=(C_word)a,a+=9,tmp);
C_trace("maze.scm:310: cell:walls");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[45]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[45]+1);
av2[1]=t2;
av2[2]=((C_word*)t0)[6];
tp(3,av2);}}}

/* k1823 in href/rc in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1825(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
C_save_and_reclaim((void *)f_1825,2,av);}
a=C_alloc(6);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_1837,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=t2,tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:429: harr:ncols");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[63]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[63]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[5];
tp(3,av2);}}

/* k2882 in k2879 in k2876 in k2873 in doloop475 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2884(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_2884,2,av);}
a=C_alloc(4);
t2=C_a_i_plus(&a,2,((C_word*)t0)[2],C_fix(2));
t3=((C_word*)((C_word*)t0)[3])[1];
f_2865(t3,((C_word*)t0)[4],t2);}

/* k2879 in k2876 in k2873 in doloop475 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2881(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,c,2)))){
C_save_and_reclaim((void *)f_2881,2,av);}
a=C_alloc(5);
t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2884,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:686: write-ch");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[86]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[86]+1);
av2[1]=t2;
av2[2]=C_make_character(92);
tp(3,av2);}}

/* k1307 in union! in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1309(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_1309,2,av);}
a=C_alloc(4);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_1312,a[2]=t2,a[3]=((C_word*)t0)[2],tmp=(C_word)a,a+=4,tmp);
C_trace("maze.scm:211: get-set-root");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[27]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[27]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[3];
tp(3,av2);}}

/* union! in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1305(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word t5;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_1305,4,av);}
a=C_alloc(4);
t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_1309,a[2]=t1,a[3]=t3,tmp=(C_word)a,a+=4,tmp);
C_trace("maze.scm:210: get-set-root");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[27]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[27]+1);
av2[1]=t4;
av2[2]=t2;
tp(3,av2);}}

/* k1301 in set-size in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1303(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1303,2,av);}
t2=((C_word*)t0)[2];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t2;
av2[1]=C_i_car(t1);
((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}

/* random-int in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1209(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word t5;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_1209,4,av);}
a=C_alloc(4);
t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_1217,a[2]=t1,a[3]=t2,tmp=(C_word)a,a+=4,tmp);
C_trace("maze.scm:107: rand");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[24]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[24]+1);
av2[1]=t4;
av2[2]=t3;
tp(3,av2);}}

/* k1813 in k1801 in k1794 in k1791 in hset! in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1815(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,c,1)))){
C_save_and_reclaim((void *)f_1815,2,av);}
a=C_alloc(8);
t2=C_a_i_times(&a,2,t1,((C_word*)t0)[2]);
t3=C_a_i_plus(&a,2,t2,((C_word*)t0)[3]);
t4=((C_word*)t0)[4];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=C_i_vector_set(((C_word*)t0)[5],t3,((C_word*)t0)[6]);
((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}

/* href/rc in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1817(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4=av[4];
C_word t5;
C_word t6;
C_word *a;
if(c!=5) C_bad_argc_2(c,5,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
C_save_and_reclaim((void *)f_1817,5,av);}
a=C_alloc(6);
t5=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_1825,a[2]=t3,a[3]=t4,a[4]=t1,a[5]=t2,tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:428: harr:elts");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[65]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[65]+1);
av2[1]=t5;
av2[2]=t2;
tp(3,av2);}}

/* k2019 in doloop376 in k2000 in k1997 in k1994 in k2079 in k1979 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2021(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(11,c,4)))){
C_save_and_reclaim((void *)f_2021,2,av);}
a=C_alloc(11);
t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2024,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_2035,a[2]=((C_word*)t0)[5],a[3]=t2,a[4]=((C_word*)t0)[2],a[5]=((C_word*)t0)[6],tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:532: href");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[68]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[68]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[6];
av2[3]=((C_word*)t0)[2];
av2[4]=C_fix(1);
tp(5,av2);}}

/* lp in permute-vec! in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_1496(C_word t0,C_word t1,C_word t2){
C_word tmp;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(7,0,3)))){
C_save_and_reclaim_args((void *)trf_1496,3,t0,t1,t2);}
a=C_alloc(7);
if(C_truep(C_i_greaterp(t2,C_fix(1)))){
t3=C_i_vector_ref(((C_word*)t0)[2],t2);
t4=t3;
t5=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_1509,a[2]=((C_word*)t0)[2],a[3]=t2,a[4]=t4,a[5]=((C_word*)t0)[3],a[6]=t1,tmp=(C_word)a,a+=7,tmp);
C_trace("maze.scm:285: random-int");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[25]);
C_word av2[4];
av2[0]=*((C_word*)lf[25]+1);
av2[1]=t5;
av2[2]=t2;
av2[3]=((C_word*)t0)[4];
tp(4,av2);}}
else{
t3=t1;{
C_word av2[2];
av2[0]=t3;
av2[1]=C_SCHEME_UNDEFINED;
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}}

/* k1488 in permute-vec! in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1490(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1490,2,av);}
t2=((C_word*)t0)[2];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t2;
av2[1]=((C_word*)t0)[3];
((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}

/* k2022 in k2019 in doloop376 in k2000 in k1997 in k1994 in k2079 in k1979 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2024(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_2024,2,av);}
a=C_alloc(4);
t2=C_a_i_minus(&a,2,((C_word*)t0)[2],C_fix(6));
t3=((C_word*)((C_word*)t0)[3])[1];
f_2011(t3,((C_word*)t0)[4],t2);}

/* doloop475 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_2865(C_word t0,C_word t1,C_word t2){
C_word tmp;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(7,0,2)))){
C_save_and_reclaim_args((void *)trf_2865,3,t0,t1,t2);}
a=C_alloc(7);
if(C_truep(C_i_greater_or_equalp(t2,((C_word*)t0)[2]))){
t3=t1;{
C_word av2[2];
av2[0]=t3;
av2[1]=C_SCHEME_UNDEFINED;
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}
else{
t3=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_2875,a[2]=t2,a[3]=((C_word*)t0)[3],a[4]=t1,a[5]=((C_word*)t0)[4],a[6]=((C_word*)t0)[5],tmp=(C_word)a,a+=7,tmp);
t4=C_i_nequalp(t2,((C_word*)t0)[6]);
t5=(C_truep(t4)?C_make_character(32):C_make_character(95));
C_trace("maze.scm:683: write-ch");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[86]);
C_word av2[3];
av2[0]=*((C_word*)lf[86]+1);
av2[1]=t3;
av2[2]=t5;
tp(3,av2);}}}

/* doloop376 in k2000 in k1997 in k1994 in k2079 in k1979 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_2011(C_word t0,C_word t1,C_word t2){
C_word tmp;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(13,0,4)))){
C_save_and_reclaim_args((void *)trf_2011,3,t0,t1,t2);}
a=C_alloc(13);
if(C_truep(C_i_lessp(t2,C_fix(3)))){
t3=t1;{
C_word av2[2];
av2[0]=t3;
av2[1]=C_SCHEME_UNDEFINED;
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}
else{
t3=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_2021,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=t1,a[5]=((C_word*)t0)[3],a[6]=((C_word*)t0)[4],tmp=(C_word)a,a+=7,tmp);
t4=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_2047,a[2]=((C_word*)t0)[3],a[3]=t3,a[4]=t2,a[5]=((C_word*)t0)[4],tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:531: href");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[68]);
C_word av2[5];
av2[0]=*((C_word*)lf[68]+1);
av2[1]=t4;
av2[2]=((C_word*)t0)[4];
av2[3]=t2;
av2[4]=C_fix(1);
tp(5,av2);}}}

/* doloop330 in doloop327 in k1841 in harr-tabulate in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_1878(C_word t0,C_word t1,C_word t2,C_word t3){
C_word tmp;
C_word t4;
C_word t5;
C_word t6;
C_word t7;
C_word t8;
C_word t9;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(23,0,3)))){
C_save_and_reclaim_args((void *)trf_1878,4,t0,t1,t2,t3);}
a=C_alloc(23);
if(C_truep(C_i_nequalp(t2,((C_word*)t0)[2]))){
t4=t1;{
C_word av2[2];
av2[0]=t4;
av2[1]=C_SCHEME_UNDEFINED;
((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}
else{
t4=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_1903,a[2]=((C_word*)t0)[3],a[3]=t3,a[4]=t2,a[5]=((C_word*)t0)[4],a[6]=t1,tmp=(C_word)a,a+=7,tmp);
t5=C_a_i_times(&a,2,C_fix(3),t2);
t6=C_a_i_times(&a,2,C_fix(2),((C_word*)t0)[5]);
t7=C_a_i_bitwise_and(&a,2,t2,C_fix(1));
t8=C_a_i_plus(&a,2,t6,t7);
C_trace("maze.scm:442: proc");
t9=((C_word*)t0)[6];{
C_word av2[4];
av2[0]=t9;
av2[1]=t4;
av2[2]=t5;
av2[3]=t8;
((C_proc)C_fast_retrieve_proc(t9))(4,av2);}}}

/* k2730 in k2703 in k2700 in k2697 in k2694 in k2691 in doloop483 in k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 in ... */
static void C_ccall f_2732(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_2732,2,av);}
C_trace("maze.scm:717: cell:walls");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[45]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[45]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=t1;
tp(3,av2);}}

/* k1863 in doloop327 in k1841 in harr-tabulate in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1865(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_1865,2,av);}
a=C_alloc(4);
t2=C_a_i_minus(&a,2,((C_word*)t0)[2],C_fix(1));
t3=((C_word*)((C_word*)t0)[3])[1];
f_1855(t3,((C_word*)t0)[4],t2);}

/* lp in reroot-maze in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_1639(C_word t0,C_word t1,C_word t2,C_word t3){
C_word tmp;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,0,2)))){
C_save_and_reclaim_args((void *)trf_1639,4,t0,t1,t2,t3);}
a=C_alloc(6);
t4=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_1643,a[2]=((C_word*)t0)[2],a[3]=t1,a[4]=t2,a[5]=t3,tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:338: cell:parent");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[47]);
C_word av2[3];
av2[0]=*((C_word*)lf[47]+1);
av2[1]=t4;
av2[2]=t2;
tp(3,av2);}}

/* reroot-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1633(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
C_save_and_reclaim((void *)f_1633,3,av);}
a=C_alloc(6);
t3=C_SCHEME_UNDEFINED;
t4=(*a=C_VECTOR_TYPE|1,a[1]=t3,tmp=(C_word)a,a+=2,tmp);
t5=C_set_block_item(t4,0,(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_1639,a[2]=t4,a[3]=((C_word)li45),tmp=(C_word)a,a+=4,tmp));
t6=((C_word*)t4)[1];
f_1639(t6,t1,t2,C_SCHEME_FALSE);}

/* doloop327 in k1841 in harr-tabulate in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_1855(C_word t0,C_word t1,C_word t2){
C_word tmp;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word t7;
C_word t8;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(19,0,4)))){
C_save_and_reclaim_args((void *)trf_1855,3,t0,t1,t2);}
a=C_alloc(19);
if(C_truep(C_i_lessp(t2,C_fix(0)))){
t3=t1;{
C_word av2[2];
av2[0]=t3;
av2[1]=C_SCHEME_UNDEFINED;
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}
else{
t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1865,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=t1,tmp=(C_word)a,a+=5,tmp);
t4=C_a_i_times(&a,2,t2,((C_word*)t0)[3]);
t5=C_SCHEME_UNDEFINED;
t6=(*a=C_VECTOR_TYPE|1,a[1]=t5,tmp=(C_word)a,a+=2,tmp);
t7=C_set_block_item(t6,0,(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_1878,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[4],a[4]=t6,a[5]=t2,a[6]=((C_word*)t0)[5],a[7]=((C_word)li62),tmp=(C_word)a,a+=8,tmp));
t8=((C_word*)t6)[1];
f_1878(t8,t3,C_fix(0),t4);}}

/* k2709 in k2706 in k2703 in k2700 in k2697 in k2694 in k2691 in doloop483 in k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in ... */
static void C_ccall f_2711(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_2711,2,av);}
a=C_alloc(4);
t2=C_a_i_minus(&a,2,((C_word*)t0)[2],C_fix(1));
t3=((C_word*)((C_word*)t0)[3])[1];
f_2683(t3,((C_word*)t0)[4],t2);}

/* k1087 in div in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1089(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_1089,2,av);}
a=C_alloc(4);
if(C_truep(t1)){
t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_1095,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
C_trace("maze.scm:40: exact-integer?");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[12]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[12]+1);
av2[1]=t2;
av2[2]=((C_word*)t0)[4];
tp(3,av2);}}
else{
t2=((C_word*)t0)[2];
f_1039(t2,C_SCHEME_FALSE);}}

/* k2726 in k2703 in k2700 in k2697 in k2694 in k2691 in doloop483 in k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 in ... */
static void C_ccall f_2728(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_2728,2,av);}
C_trace("maze.scm:717: display-hexbottom");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[87]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[87]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=t1;
tp(3,av2);}}

/* k1068 in k1037 in div in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1070(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(12,c,1)))){
C_save_and_reclaim((void *)f_1070,2,av);}
a=C_alloc(12);
t2=C_a_i_times(&a,2,t1,((C_word*)t0)[2]);
t3=C_a_i_minus(&a,2,((C_word*)t0)[3],t2);
t4=C_i_nequalp(t3,C_fix(0));
t5=((C_word*)t0)[4];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t5;
av2[1]=(C_truep(t4)?t1:C_a_i_minus(&a,2,t1,C_fix(1)));
((C_proc)(void*)(*((C_word*)t5+1)))(2,av2);}}

/* k2802 in k2694 in k2691 in doloop483 in k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2804(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_2804,2,av);}
C_trace("maze.scm:704: write-ch");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[86]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[86]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=t1;
tp(3,av2);}}

/* k2773 in k2759 in doloop497 in k2700 in k2697 in k2694 in k2691 in doloop483 in k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in ... */
static void C_ccall f_2775(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_2775,2,av);}
C_trace("maze.scm:714: write-ch");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[86]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[86]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=t1;
tp(3,av2);}}

/* cell:mark in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1437(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1437,3,av);}
t3=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t3;
av2[1]=C_i_vector_ref(t2,C_fix(5));
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}

/* set-cell:parent in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1431(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1431,4,av);}
t4=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=C_i_vector_set(t2,C_fix(4),t3);
((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}

/* toplevel */
static C_TLS int toplevel_initialized=0;
C_main_entry_point

void C_ccall C_toplevel(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
if(toplevel_initialized) {C_kontinue(t1,C_SCHEME_UNDEFINED);}
else C_toplevel_entry(C_text("toplevel"));
C_check_nursery_minimum(C_calculate_demand(3,c,2));
if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
C_save_and_reclaim((void*)C_toplevel,c,av);}
toplevel_initialized=1;
if(C_unlikely(!C_demand_2(728))){
C_save(t1);
C_rereclaim2(728*sizeof(C_word),1);
t1=C_restore;}
a=C_alloc(3);
C_initialize_lf(lf,117);
lf[0]=C_h_intern(&lf[0],17,"flush-output-port");
lf[1]=C_h_intern(&lf[1],12,"flush-output");
lf[2]=C_h_intern(&lf[2],13,"current-jiffy");
lf[3]=C_h_intern(&lf[3],20,"current-milliseconds");
lf[4]=C_h_intern(&lf[4],18,"jiffies-per-second");
lf[5]=C_h_intern(&lf[5],14,"current-second");
lf[6]=C_h_intern(&lf[6],15,"current-seconds");
lf[7]=C_h_intern(&lf[7],7,"inexact");
lf[8]=C_h_intern(&lf[8],14,"exact->inexact");
lf[9]=C_h_intern(&lf[9],5,"exact");
lf[10]=C_h_intern(&lf[10],14,"inexact->exact");
lf[11]=C_h_intern(&lf[11],6,"square");
lf[12]=C_h_intern(&lf[12],14,"exact-integer\077");
lf[13]=C_h_intern(&lf[13],8,"integer\077");
lf[14]=C_h_intern(&lf[14],31,"this-scheme-implementation-name");
lf[15]=C_h_intern(&lf[15],13,"string-append");
lf[16]=C_decode_literal(C_heaptop,"\376B\000\000\010chicken-");
lf[17]=C_h_intern(&lf[17],15,"chicken-version");
lf[18]=C_h_intern(&lf[18],11,"bitwise-not");
lf[19]=C_h_intern(&lf[19],11,"bitwise-and");
lf[20]=C_h_intern(&lf[20],3,"div");
lf[21]=C_h_intern(&lf[21],3,"mod");
lf[22]=C_h_intern(&lf[22],9,"remainder");
lf[23]=C_h_intern(&lf[23],12,"random-state");
lf[24]=C_h_intern(&lf[24],4,"rand");
lf[25]=C_h_intern(&lf[25],10,"random-int");
lf[26]=C_h_intern(&lf[26],8,"base-set");
lf[27]=C_h_intern(&lf[27],12,"get-set-root");
lf[28]=C_h_intern(&lf[28],10,"set-equal\077");
lf[29]=C_h_intern(&lf[29],8,"set-size");
lf[30]=C_h_intern(&lf[30],6,"union!");
lf[31]=C_h_intern(&lf[31],9,"make-wall");
lf[32]=C_h_intern(&lf[32],4,"wall");
lf[33]=C_h_intern(&lf[33],10,"wall:owner");
lf[34]=C_h_intern(&lf[34],14,"set-wall:owner");
lf[35]=C_h_intern(&lf[35],13,"wall:neighbor");
lf[36]=C_h_intern(&lf[36],17,"set-wall:neighbor");
lf[37]=C_h_intern(&lf[37],8,"wall:bit");
lf[38]=C_h_intern(&lf[38],12,"set-wall:bit");
lf[39]=C_h_intern(&lf[39],9,"make-cell");
lf[40]=C_h_intern(&lf[40],4,"cell");
lf[41]=C_h_intern(&lf[41],14,"cell:reachable");
lf[42]=C_h_intern(&lf[42],18,"set-cell:reachable");
lf[43]=C_h_intern(&lf[43],7,"cell:id");
lf[44]=C_h_intern(&lf[44],11,"set-cell:id");
lf[45]=C_h_intern(&lf[45],10,"cell:walls");
lf[46]=C_h_intern(&lf[46],14,"set-cell:walls");
lf[47]=C_h_intern(&lf[47],11,"cell:parent");
lf[48]=C_h_intern(&lf[48],15,"set-cell:parent");
lf[49]=C_h_intern(&lf[49],9,"cell:mark");
lf[50]=C_h_intern(&lf[50],13,"set-cell:mark");
lf[51]=C_h_intern(&lf[51],19,"vector-for-each-rev");
lf[52]=C_h_intern(&lf[52],12,"permute-vec!");
lf[53]=C_h_intern(&lf[53],8,"dig-maze");
lf[54]=C_h_intern(&lf[54],30,"call-with-current-continuation");
lf[55]=C_h_intern(&lf[55],8,"dfs-maze");
lf[56]=C_h_intern(&lf[56],11,"reroot-maze");
lf[57]=C_h_intern(&lf[57],11,"path-length");
lf[58]=C_h_intern(&lf[58],9,"mark-path");
lf[59]=C_h_intern(&lf[59],9,"make-harr");
lf[60]=C_h_intern(&lf[60],4,"harr");
lf[61]=C_h_intern(&lf[61],10,"harr:nrows");
lf[62]=C_h_intern(&lf[62],14,"set-harr:nrows");
lf[63]=C_h_intern(&lf[63],10,"harr:ncols");
lf[64]=C_h_intern(&lf[64],14,"set-harr:ncols");
lf[65]=C_h_intern(&lf[65],9,"harr:elts");
lf[66]=C_h_intern(&lf[66],13,"set-harr:elts");
lf[67]=C_h_intern(&lf[67],11,"make-vector");
lf[68]=C_h_intern(&lf[68],4,"href");
lf[69]=C_h_intern(&lf[69],5,"hset!");
lf[70]=C_h_intern(&lf[70],7,"href/rc");
lf[71]=C_h_intern(&lf[71],13,"harr-tabulate");
lf[72]=C_h_intern(&lf[72],13,"harr-for-each");
lf[73]=C_h_intern(&lf[73],10,"south-west");
lf[74]=C_h_intern(&lf[74],5,"south");
lf[75]=C_h_intern(&lf[75],10,"south-east");
lf[76]=C_h_intern(&lf[76],14,"gen-maze-array");
lf[77]=C_h_intern(&lf[77],13,"make-wall-vec");
lf[78]=C_h_intern(&lf[78],23,"vector-lib#list->vector");
lf[79]=C_h_intern(&lf[79],14,"pick-entrances");
lf[80]=C_h_intern(&lf[80],18,"for-each-hex-child");
lf[81]=C_h_intern(&lf[81],8,"bit-test");
lf[82]=C_h_intern(&lf[82],9,"make-maze");
lf[83]=C_h_intern(&lf[83],5,"pmaze");
lf[84]=C_h_intern(&lf[84],13,"print-hexmaze");
lf[85]=C_h_intern(&lf[85],6,"output");
lf[86]=C_h_intern(&lf[86],8,"write-ch");
lf[87]=C_h_intern(&lf[87],17,"display-hexbottom");
lf[88]=C_h_intern(&lf[88],9,"dot/space");
lf[89]=C_h_intern(&lf[89],3,"run");
lf[90]=C_h_intern(&lf[90],7,"reverse");
lf[91]=C_h_intern(&lf[91],4,"main");
lf[92]=C_h_intern(&lf[92],4,"hide");
lf[93]=C_h_intern(&lf[93],18,"run-r7rs-benchmark");
lf[94]=C_decode_literal(C_heaptop,"\376B\000\000\004maze");
lf[95]=C_decode_literal(C_heaptop,"\376B\000\000\001:");
lf[96]=C_decode_literal(C_heaptop,"\376B\000\000\001:");
lf[97]=C_decode_literal(C_heaptop,"\376B\000\000\001:");
lf[98]=C_h_intern(&lf[98],14,"number->string");
lf[99]=C_h_intern(&lf[99],4,"read");
lf[100]=C_h_intern(&lf[100],6,"values");
lf[101]=C_h_intern(&lf[101],19,"\003sysstandard-output");
lf[102]=C_h_intern(&lf[102],7,"newline");
lf[103]=C_h_intern(&lf[103],7,"display");
lf[104]=C_decode_literal(C_heaptop,"\376B\000\000\001,");
lf[105]=C_decode_literal(C_heaptop,"\376B\000\000\001,");
lf[106]=C_decode_literal(C_heaptop,"\376B\000\000\013+!CSVLINE!+");
lf[107]=C_decode_literal(C_heaptop,"\376B\000\000\006) for ");
lf[108]=C_h_intern(&lf[108],5,"write");
lf[109]=C_decode_literal(C_heaptop,"\376B\000\000\012 seconds (");
lf[110]=C_decode_literal(C_heaptop,"\376B\000\000\016Elapsed time: ");
lf[111]=C_h_intern(&lf[111],5,"round");
lf[112]=C_decode_literal(C_heaptop,"\376B\000\000\042ERROR: returned incorrect result: ");
lf[113]=C_decode_literal(C_heaptop,"\376B\000\000\010Running ");
lf[114]=C_h_intern(&lf[114],25,"\003sysimplicit-exit-handler");
lf[115]=C_h_intern(&lf[115],11,"\003sysrequire");
lf[116]=C_h_intern(&lf[116],10,"vector-lib");
C_register_lf2(lf,117,create_ptable());{}
t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_927,a[2]=t1,tmp=(C_word)a,a+=3,tmp);{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=C_SCHEME_UNDEFINED;
av2[1]=t2;
C_library_toplevel(2,av2);}}

/* k2785 in doloop497 in k2700 in k2697 in k2694 in k2691 in doloop483 in k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 in ... */
static void C_ccall f_2787(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_2787,2,av);}
C_trace("maze.scm:712: display-hexbottom");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[87]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[87]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=t1;
tp(3,av2);}}

/* cell:parent in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1425(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1425,3,av);}
t3=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t3;
av2[1]=C_i_vector_ref(t2,C_fix(4));
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}

/* set-cell:walls in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1419(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1419,4,av);}
t4=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=C_i_vector_set(t2,C_fix(3),t3);
((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}

/* doloop497 in k2700 in k2697 in k2694 in k2691 in doloop483 in k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_2751(C_word t0,C_word t1,C_word t2){
C_word tmp;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(13,0,4)))){
C_save_and_reclaim_args((void *)trf_2751,3,t0,t1,t2);}
a=C_alloc(13);
if(C_truep(C_i_greater_or_equalp(t2,((C_word*)t0)[2]))){
t3=t1;{
C_word av2[2];
av2[0]=t3;
av2[1]=C_SCHEME_UNDEFINED;
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}
else{
t3=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_2761,a[2]=t2,a[3]=((C_word*)t0)[3],a[4]=t1,a[5]=((C_word*)t0)[4],a[6]=((C_word*)t0)[5],tmp=(C_word)a,a+=7,tmp);
t4=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2787,a[2]=t3,tmp=(C_word)a,a+=3,tmp);
t5=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2791,a[2]=t4,tmp=(C_word)a,a+=3,tmp);
C_trace("maze.scm:712: href/rc");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[70]);
C_word av2[5];
av2[0]=*((C_word*)lf[70]+1);
av2[1]=t5;
av2[2]=((C_word*)t0)[5];
av2[3]=((C_word*)t0)[4];
av2[4]=t2;
tp(5,av2);}}}

/* cell:walls in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1413(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1413,3,av);}
t3=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t3;
av2[1]=C_i_vector_ref(t2,C_fix(3));
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}

/* k2762 in k2759 in doloop497 in k2700 in k2697 in k2694 in k2691 in doloop483 in k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in ... */
static void C_ccall f_2764(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_2764,2,av);}
a=C_alloc(4);
t2=C_a_i_plus(&a,2,((C_word*)t0)[2],C_fix(2));
t3=((C_word*)((C_word*)t0)[3])[1];
f_2751(t3,((C_word*)t0)[4],t2);}

/* k2759 in doloop497 in k2700 in k2697 in k2694 in k2691 in doloop483 in k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 in ... */
static void C_ccall f_2761(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(16,c,4)))){
C_save_and_reclaim((void *)f_2761,2,av);}
a=C_alloc(16);
t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2764,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2775,a[2]=t2,tmp=(C_word)a,a+=3,tmp);
t4=C_a_i_minus(&a,2,((C_word*)t0)[5],C_fix(1));
t5=C_a_i_plus(&a,2,((C_word*)t0)[2],C_fix(1));
C_trace("maze.scm:714: dot/space");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[88]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[88]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[6];
av2[3]=t4;
av2[4]=t5;
tp(5,av2);}}

/* k2125 in k2122 in doloop363 in doloop360 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2127(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(19,c,4)))){
C_save_and_reclaim((void *)f_2127,2,av);}
a=C_alloc(19);
t2=(*a=C_CLOSURE_TYPE|9,a[1]=(C_word)f_2130,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],a[7]=((C_word*)t0)[7],a[8]=((C_word*)t0)[8],a[9]=((C_word*)t0)[9],tmp=(C_word)a,a+=10,tmp);
t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2162,a[2]=((C_word*)t0)[7],a[3]=t2,a[4]=((C_word*)t0)[8],tmp=(C_word)a,a+=5,tmp);
t4=C_a_i_minus(&a,2,((C_word*)t0)[2],C_fix(2));
C_trace("maze.scm:513: href");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[68]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[68]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[9];
av2[3]=((C_word*)t0)[5];
av2[4]=t4;
tp(5,av2);}}

/* k1313 in k1310 in k1307 in union! in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1315(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
C_save_and_reclaim((void *)f_1315,2,av);}
a=C_alloc(6);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_1318,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],a[5]=((C_word*)t0)[4],tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:213: set-size");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[29]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[29]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[2];
tp(3,av2);}}

/* k1316 in k1313 in k1310 in k1307 in union! in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1318(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,1)))){
C_save_and_reclaim((void *)f_1318,2,av);}
a=C_alloc(4);
t2=C_a_i_plus(&a,2,((C_word*)t0)[2],t1);
if(C_truep(C_i_greaterp(((C_word*)t0)[2],t1))){
t3=C_i_set_cdr(((C_word*)t0)[3],((C_word*)t0)[4]);
t4=((C_word*)t0)[5];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=C_i_set_car(((C_word*)t0)[4],t2);
((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}
else{
t3=C_i_set_cdr(((C_word*)t0)[4],((C_word*)t0)[3]);
t4=((C_word*)t0)[5];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=C_i_set_car(((C_word*)t0)[3],t2);
((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}}

/* k1310 in k1307 in union! in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1312(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,c,2)))){
C_save_and_reclaim((void *)f_1312,2,av);}
a=C_alloc(5);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1315,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:212: set-size");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[29]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[29]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[2];
tp(3,av2);}}

/* k2122 in doloop363 in doloop360 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2124(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word t7;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(23,c,4)))){
C_save_and_reclaim((void *)f_2124,2,av);}
a=C_alloc(23);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|9,a[1]=(C_word)f_2127,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],a[7]=((C_word*)t0)[7],a[8]=t2,a[9]=((C_word*)t0)[8],tmp=(C_word)a,a+=10,tmp);
if(C_truep(C_i_zerop(((C_word*)t0)[5]))){
t4=t3;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=C_SCHEME_UNDEFINED;
f_2127(2,av2);}}
else{
t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2176,a[2]=((C_word*)t0)[7],a[3]=t3,a[4]=t2,tmp=(C_word)a,a+=5,tmp);
t5=C_a_i_minus(&a,2,((C_word*)t0)[5],C_fix(3));
t6=C_a_i_minus(&a,2,((C_word*)t0)[2],C_fix(1));
C_trace("maze.scm:512: href");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[68]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[68]+1);
av2[1]=t4;
av2[2]=((C_word*)t0)[8];
av2[3]=t5;
av2[4]=t6;
tp(5,av2);}}}

/* doloop363 in doloop360 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_2114(C_word t0,C_word t1,C_word t2){
C_word tmp;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(9,0,4)))){
C_save_and_reclaim_args((void *)trf_2114,3,t0,t1,t2);}
a=C_alloc(9);
if(C_truep(C_i_less_or_equalp(t2,C_fix(1)))){
t3=t1;{
C_word av2[2];
av2[0]=t3;
av2[1]=C_SCHEME_UNDEFINED;
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}
else{
t3=(*a=C_CLOSURE_TYPE|8,a[1]=(C_word)f_2124,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=t1,a[5]=((C_word*)t0)[3],a[6]=((C_word*)t0)[4],a[7]=((C_word*)t0)[5],a[8]=((C_word*)t0)[6],tmp=(C_word)a,a+=9,tmp);
C_trace("maze.scm:510: href");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[68]);
C_word av2[5];
av2[0]=*((C_word*)lf[68]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[6];
av2[3]=((C_word*)t0)[3];
av2[4]=t2;
tp(5,av2);}}}

/* k2893 in k2876 in k2873 in doloop475 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2895(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_2895,2,av);}
C_trace("maze.scm:685: write-ch");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[86]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[86]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=t1;
tp(3,av2);}}

/* k2511 in k2519 in k2343 in k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2513(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_2513,2,av);}
C_trace("maze.scm:581: proc");
t2=((C_word*)t0)[2];{
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=t2;
av2[1]=((C_word*)t0)[3];
av2[2]=t1;
((C_proc)C_fast_retrieve_proc(t2))(3,av2);}}

/* k2558 in k2555 in make-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2560(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(9,c,3)))){
C_save_and_reclaim((void *)f_2560,2,av);}
a=C_alloc(9);
t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2563,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
t3=C_a_i_times(&a,2,((C_word*)t0)[4],((C_word*)t0)[5]);
C_trace("maze.scm:609: dig-maze");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[53]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[53]+1);
av2[1]=t2;
av2[2]=t1;
av2[3]=t3;
tp(4,av2);}}

/* k2561 in k2558 in k2555 in make-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2563(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,c,2)))){
C_save_and_reclaim((void *)f_2563,2,av);}
a=C_alloc(5);
t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2566,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:610: pick-entrances");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[79]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[79]+1);
av2[1]=t2;
av2[2]=((C_word*)t0)[3];
tp(3,av2);}}

/* k2501 in k2346 in k2343 in k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2503(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(12,c,4)))){
C_save_and_reclaim((void *)f_2503,2,av);}
a=C_alloc(12);
if(C_truep(t1)){
t2=((C_word*)t0)[2];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t2;
av2[1]=C_SCHEME_UNDEFINED;
f_2351(2,av2);}}
else{
t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_2491,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[2],tmp=(C_word)a,a+=4,tmp);
t3=C_a_i_plus(&a,2,((C_word*)t0)[4],C_fix(3));
t4=C_a_i_minus(&a,2,((C_word*)t0)[5],C_fix(1));
C_trace("maze.scm:582: href");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[68]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[68]+1);
av2[1]=t2;
av2[2]=((C_word*)t0)[6];
av2[3]=t3;
av2[4]=t4;
tp(5,av2);}}}

/* k2529 in k2541 in k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2531(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_2531,2,av);}
C_trace("maze.scm:580: proc");
t2=((C_word*)t0)[2];{
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=t2;
av2[1]=((C_word*)t0)[3];
av2[2]=t1;
((C_proc)C_fast_retrieve_proc(t2))(3,av2);}}

/* k2989 in k2986 in display-hexbottom in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2991(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(3,c,3)))){
C_save_and_reclaim((void *)f_2991,2,av);}
a=C_alloc(3);
t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3001,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
C_trace("maze.scm:734: bit-test");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[81]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[81]+1);
av2[1]=t2;
av2[2]=((C_word*)t0)[3];
av2[3]=C_fast_retrieve(lf[75]);
tp(4,av2);}}

/* k2564 in k2561 in k2558 in k2555 in make-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2566(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word t7;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(7,c,4)))){
C_save_and_reclaim((void *)f_2566,2,av);}
a=C_alloc(7);
t2=C_i_vector_ref(t1,C_fix(0));
t3=t2;
t4=C_i_vector_ref(t1,C_fix(1));
t5=t4;
t6=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_2575,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=t3,a[5]=t5,a[6]=((C_word*)t0)[4],tmp=(C_word)a,a+=7,tmp);
C_trace("maze.scm:613: href/rc");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[70]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[70]+1);
av2[1]=t6;
av2[2]=((C_word*)t0)[3];
av2[3]=C_fix(0);
av2[4]=t5;
tp(5,av2);}}

/* k2541 in k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2543(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(12,c,4)))){
C_save_and_reclaim((void *)f_2543,2,av);}
a=C_alloc(12);
if(C_truep(t1)){
t2=((C_word*)t0)[2];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t2;
av2[1]=C_SCHEME_UNDEFINED;
f_2345(2,av2);}}
else{
t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_2531,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[2],tmp=(C_word)a,a+=4,tmp);
t3=C_a_i_minus(&a,2,((C_word*)t0)[4],C_fix(3));
t4=C_a_i_minus(&a,2,((C_word*)t0)[5],C_fix(1));
C_trace("maze.scm:580: href");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[68]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[68]+1);
av2[1]=t2;
av2[2]=((C_word*)t0)[6];
av2[3]=t3;
av2[4]=t4;
tp(5,av2);}}}

/* k2573 in k2564 in k2561 in k2558 in k2555 in make-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2575(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,c,2)))){
C_save_and_reclaim((void *)f_2575,2,av);}
a=C_alloc(8);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_2578,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=t2,a[7]=((C_word*)t0)[6],tmp=(C_word)a,a+=8,tmp);
C_trace("maze.scm:614: cell:walls");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[45]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[45]+1);
av2[1]=t3;
av2[2]=t2;
tp(3,av2);}}

/* k2576 in k2573 in k2564 in k2561 in k2558 in k2555 in make-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2578(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(15,c,4)))){
C_save_and_reclaim((void *)f_2578,2,av);}
a=C_alloc(15);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_2581,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=t2,a[7]=((C_word*)t0)[6],tmp=(C_word)a,a+=8,tmp);
t4=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2602,a[2]=t3,tmp=(C_word)a,a+=3,tmp);
t5=C_a_i_minus(&a,2,((C_word*)t0)[7],C_fix(1));
C_trace("maze.scm:615: href/rc");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[70]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[70]+1);
av2[1]=t4;
av2[2]=((C_word*)t0)[3];
av2[3]=t5;
av2[4]=((C_word*)t0)[4];
tp(5,av2);}}

/* k1570 in k1594 in k1564 in k1598 in k1555 in k1552 in k1549 in k1546 in a1543 in a1537 in dig-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1572(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(10,c,3)))){
C_save_and_reclaim((void *)f_1572,2,av);}
a=C_alloc(10);
t2=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_1575,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
t3=C_a_i_bitwise_and(&a,2,((C_word*)t0)[6],((C_word*)t0)[7]);
C_trace("maze.scm:313: set-cell:walls");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[46]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[46]+1);
av2[1]=t2;
av2[2]=((C_word*)t0)[8];
av2[3]=t3;
tp(4,av2);}}

/* k2700 in k2697 in k2694 in k2691 in doloop483 in k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2702(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(16,c,3)))){
C_save_and_reclaim((void *)f_2702,2,av);}
a=C_alloc(16);
t2=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_2705,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],tmp=(C_word)a,a+=7,tmp);
t3=C_SCHEME_UNDEFINED;
t4=(*a=C_VECTOR_TYPE|1,a[1]=t3,tmp=(C_word)a,a+=2,tmp);
t5=C_set_block_item(t4,0,(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_2751,a[2]=((C_word*)t0)[7],a[3]=t4,a[4]=((C_word*)t0)[2],a[5]=((C_word*)t0)[6],a[6]=((C_word)li80),tmp=(C_word)a,a+=7,tmp));
t6=((C_word*)t4)[1];
f_2751(t6,t2,C_fix(0));}

/* k1573 in k1570 in k1594 in k1564 in k1598 in k1555 in k1552 in k1549 in k1546 in a1543 in a1537 in dig-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1575(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,c,2)))){
C_save_and_reclaim((void *)f_1575,2,av);}
a=C_alloc(5);
t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1588,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:314: set-size");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[29]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[29]+1);
av2[1]=t2;
av2[2]=((C_word*)t0)[5];
tp(3,av2);}}

/* k2703 in k2700 in k2697 in k2694 in k2691 in doloop483 in k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2705(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(15,c,4)))){
C_save_and_reclaim((void *)f_2705,2,av);}
a=C_alloc(15);
t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2708,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
if(C_truep(C_i_oddp(((C_word*)t0)[5]))){
t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2728,a[2]=t2,tmp=(C_word)a,a+=3,tmp);
t4=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2732,a[2]=t3,tmp=(C_word)a,a+=3,tmp);
t5=C_a_i_minus(&a,2,((C_word*)t0)[5],C_fix(1));
C_trace("maze.scm:717: href/rc");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[70]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[70]+1);
av2[1]=t4;
av2[2]=((C_word*)t0)[6];
av2[3]=((C_word*)t0)[2];
av2[4]=t5;
tp(5,av2);}}
else{
if(C_truep(C_i_zerop(((C_word*)t0)[2]))){
t3=t2;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t3;
av2[1]=C_SCHEME_UNDEFINED;
f_2708(2,av2);}}
else{
C_trace("maze.scm:718: write-ch");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[86]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[86]+1);
av2[1]=t2;
av2[2]=C_make_character(92);
tp(3,av2);}}}}

/* k2706 in k2703 in k2700 in k2697 in k2694 in k2691 in doloop483 in k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 in ... */
static void C_ccall f_2708(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,c,2)))){
C_save_and_reclaim((void *)f_2708,2,av);}
a=C_alloc(5);
t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2711,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:720: write-ch");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[86]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[86]+1);
av2[1]=t2;
av2[2]=C_make_character(10);
tp(3,av2);}}

/* k1049 in k1037 in div in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1051(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(12,c,1)))){
C_save_and_reclaim((void *)f_1051,2,av);}
a=C_alloc(12);
t2=C_a_i_times(&a,2,t1,((C_word*)t0)[2]);
t3=C_a_i_minus(&a,2,((C_word*)t0)[3],t2);
t4=C_i_nequalp(t3,C_fix(0));
t5=((C_word*)t0)[4];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t5;
av2[1]=(C_truep(t4)?t1:C_a_i_plus(&a,2,t1,C_fix(1)));
((C_proc)(void*)(*((C_word*)t5+1)))(2,av2);}}

/* k3054 in k3047 in k3044 in k3041 in k3038 in k3035 in k3032 in k3029 in main in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3056(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(10,c,5)))){
C_save_and_reclaim((void *)f_3056,2,av);}
a=C_alloc(10);
t2=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3058,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word)li90),tmp=(C_word)a,a+=6,tmp);
t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3072,a[2]=((C_word*)t0)[5],a[3]=((C_word)li91),tmp=(C_word)a,a+=4,tmp);
C_trace("maze.scm:763: run-r7rs-benchmark");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[93]);
C_word *av2;
if(c >= 6) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(6);
}
av2[0]=*((C_word*)lf[93]+1);
av2[1]=((C_word*)t0)[6];
av2[2]=t1;
av2[3]=((C_word*)t0)[2];
av2[4]=t2;
av2[5]=t3;
tp(6,av2);}}

/* a3057 in k3054 in k3047 in k3044 in k3041 in k3038 in k3035 in k3032 in k3029 in main in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3058(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
if(c!=2) C_bad_argc_2(c,2,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,c,3)))){
C_save_and_reclaim((void *)f_3058,2,av);}
a=C_alloc(5);
t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3066,a[2]=t1,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:766: hide");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[92]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[92]+1);
av2[1]=t2;
av2[2]=((C_word*)t0)[2];
av2[3]=((C_word*)t0)[4];
tp(4,av2);}}

/* k3182 in k3179 in k3176 in loop in k3147 in k3144 in k3141 in k3138 in k3135 in k3132 in k3129 in run-r7rs-benchmark in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3184(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(15,c,2)))){
C_save_and_reclaim((void *)f_3184,2,av);}
a=C_alloc(15);
t2=t1;
t3=C_a_i_minus(&a,2,((C_word*)t0)[2],((C_word*)t0)[3]);
t4=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3190,a[2]=((C_word*)t0)[4],a[3]=((C_word*)t0)[5],a[4]=((C_word*)t0)[6],a[5]=t2,a[6]=((C_word*)t0)[7],tmp=(C_word)a,a+=7,tmp);
t5=C_a_i_divide(&a,2,t3,((C_word*)t0)[8]);
C_trace("maze.scm:811: inexact");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[7]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[7]+1);
av2[1]=t4;
av2[2]=t5;
tp(3,av2);}}

/* k3179 in k3176 in loop in k3147 in k3144 in k3141 in k3138 in k3135 in k3132 in k3129 in run-r7rs-benchmark in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3181(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(9,c,2)))){
C_save_and_reclaim((void *)f_3181,2,av);}
a=C_alloc(9);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|8,a[1]=(C_word)f_3184,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],a[5]=((C_word*)t0)[4],a[6]=((C_word*)t0)[5],a[7]=((C_word*)t0)[6],a[8]=((C_word*)t0)[7],tmp=(C_word)a,a+=9,tmp);
C_trace("maze.scm:809: current-second");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[5]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[5]+1);
av2[1]=t3;
tp(2,av2);}}

/* k1564 in k1598 in k1555 in k1552 in k1549 in k1546 in a1543 in a1537 in dig-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1566(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(9,c,2)))){
C_save_and_reclaim((void *)f_1566,2,av);}
a=C_alloc(9);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|8,a[1]=(C_word)f_1596,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=t2,a[7]=((C_word*)t0)[6],a[8]=((C_word*)t0)[7],tmp=(C_word)a,a+=9,tmp);
C_trace("maze.scm:311: wall:bit");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[37]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[37]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[8];
tp(3,av2);}}

/* k3064 in a3057 in k3054 in k3047 in k3044 in k3041 in k3038 in k3035 in k3032 in k3029 in main in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3066(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,3)))){
C_save_and_reclaim((void *)f_3066,2,av);}
a=C_alloc(4);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3070,a[2]=((C_word*)t0)[2],a[3]=t2,tmp=(C_word)a,a+=4,tmp);
C_trace("maze.scm:766: hide");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[92]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[92]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[3];
av2[3]=((C_word*)t0)[4];
tp(4,av2);}}

/* k3194 in k3191 in k3188 in k3182 in k3179 in k3176 in loop in k3147 in k3144 in k3141 in k3138 in k3135 in k3132 in k3129 in run-r7rs-benchmark in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3196(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(7,c,2)))){
C_save_and_reclaim((void *)f_3196,2,av);}
a=C_alloc(7);
t2=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3199,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],tmp=(C_word)a,a+=7,tmp);
C_trace("maze.scm:814: write");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[108]+1));
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[108]+1);
av2[1]=t2;
av2[2]=((C_word*)t0)[4];
tp(3,av2);}}

/* k3191 in k3188 in k3182 in k3179 in k3176 in loop in k3147 in k3144 in k3141 in k3138 in k3135 in k3132 in k3129 in run-r7rs-benchmark in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3193(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(7,c,2)))){
C_save_and_reclaim((void *)f_3193,2,av);}
a=C_alloc(7);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3196,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=t2,tmp=(C_word)a,a+=7,tmp);
C_trace("maze.scm:813: display");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[103]+1));
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[103]+1);
av2[1]=t3;
av2[2]=lf[110];
tp(3,av2);}}

/* k3188 in k3182 in k3179 in k3176 in loop in k3147 in k3144 in k3141 in k3138 in k3135 in k3132 in k3129 in run-r7rs-benchmark in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3190(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word t7;
C_word t8;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(17,c,2)))){
C_save_and_reclaim((void *)f_3190,2,av);}
a=C_alloc(17);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3193,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=t2,a[5]=((C_word*)t0)[4],tmp=(C_word)a,a+=6,tmp);
t4=C_a_i_minus(&a,2,((C_word*)t0)[5],((C_word*)t0)[6]);
t5=t3;
t6=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3124,a[2]=t5,tmp=(C_word)a,a+=3,tmp);
t7=C_a_i_times(&a,2,C_fix(1000),t4);
C_trace("maze.scm:794: round");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[111]+1));
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[111]+1);
av2[1]=t6;
av2[2]=t7;
tp(3,av2);}}

/* k3197 in k3194 in k3191 in k3188 in k3182 in k3179 in k3176 in loop in k3147 in k3144 in k3141 in k3138 in k3135 in k3132 in k3129 in run-r7rs-benchmark in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3199(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(7,c,2)))){
C_save_and_reclaim((void *)f_3199,2,av);}
a=C_alloc(7);
t2=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3202,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],tmp=(C_word)a,a+=7,tmp);
C_trace("maze.scm:815: display");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[103]+1));
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[103]+1);
av2[1]=t2;
av2[2]=lf[109];
tp(3,av2);}}

/* set-cell:id in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1407(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1407,4,av);}
t4=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=C_i_vector_set(t2,C_fix(2),t3);
((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}

/* cell:id in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1401(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1401,3,av);}
t3=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t3;
av2[1]=C_i_vector_ref(t2,C_fix(2));
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}

/* k1549 in k1546 in a1543 in a1537 in dig-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1551(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,c,2)))){
C_save_and_reclaim((void *)f_1551,2,av);}
a=C_alloc(8);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_1554,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=t2,a[6]=((C_word*)t0)[5],a[7]=((C_word*)t0)[6],tmp=(C_word)a,a+=8,tmp);
C_trace("maze.scm:302: wall:neighbor");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[35]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[35]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[6];
tp(3,av2);}}

/* k1555 in k1552 in k1549 in k1546 in a1543 in a1537 in dig-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1557(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(9,c,3)))){
C_save_and_reclaim((void *)f_1557,2,av);}
a=C_alloc(9);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|8,a[1]=(C_word)f_1600,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],a[7]=t2,a[8]=((C_word*)t0)[7],tmp=(C_word)a,a+=9,tmp);
C_trace("maze.scm:309: set-equal?");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[28]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[28]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[5];
av2[3]=t2;
tp(4,av2);}}

/* k1552 in k1549 in k1546 in a1543 in a1537 in dig-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1554(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,c,2)))){
C_save_and_reclaim((void *)f_1554,2,av);}
a=C_alloc(8);
t2=(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_1557,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],a[7]=((C_word*)t0)[7],tmp=(C_word)a,a+=8,tmp);
C_trace("maze.scm:303: cell:reachable");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[41]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[41]+1);
av2[1]=t2;
av2[2]=t1;
tp(3,av2);}}

/* k2970 in dot/space in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2972(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_2972,2,av);}
t2=((C_word*)t0)[2];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t2;
av2[1]=(C_truep(t1)?C_make_character(46):C_make_character(32));
((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}

/* k1028 in k1024 in bitwise-and in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1030(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,c,4)))){
C_save_and_reclaim((void *)f_1030,2,av);}
a=C_alloc(8);
t2=C_a_i_bitwise_and(&a,2,((C_word*)t0)[2],t1);
t3=C_i_oddp(((C_word*)t0)[3]);
t4=(C_truep(t3)?C_i_oddp(((C_word*)t0)[4]):C_SCHEME_FALSE);
if(C_truep(t4)){
C_trace("maze.scm:35: +");{
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=0;
av2[1]=((C_word*)t0)[5];
av2[2]=t2;
av2[3]=t2;
av2[4]=C_fix(1);
C_plus(5,av2);}}
else{
t5=((C_word*)t0)[5];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t5;
av2[1]=C_a_i_plus(&a,2,t2,t2);
((C_proc)(void*)(*((C_word*)t5+1)))(2,av2);}}}

/* div in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1032(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word t5;
C_word t6;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(10,c,2)))){
C_save_and_reclaim((void *)f_1032,4,av);}
a=C_alloc(10);
t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1039,a[2]=t1,a[3]=t2,a[4]=t3,tmp=(C_word)a,a+=5,tmp);
t5=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1089,a[2]=t4,a[3]=t2,a[4]=t3,tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:39: exact-integer?");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[12]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[12]+1);
av2[1]=t5;
av2[2]=t2;
tp(3,av2);}}

/* k3068 in k3064 in a3057 in k3054 in k3047 in k3044 in k3041 in k3038 in k3035 in k3032 in k3029 in main in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3070(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,3)))){
C_save_and_reclaim((void *)f_3070,2,av);}
C_trace("maze.scm:766: run");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[89]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[89]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=((C_word*)t0)[3];
av2[3]=t1;
tp(4,av2);}}

/* a3071 in k3054 in k3047 in k3044 in k3041 in k3038 in k3035 in k3032 in k3029 in main in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3072(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_3072,3,av);}
t3=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t3;
av2[1]=C_i_equalp(t2,((C_word*)t0)[2]);
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}

/* k1994 in k2079 in k1979 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1996(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(12,c,4)))){
C_save_and_reclaim((void *)f_1996,2,av);}
a=C_alloc(12);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_1999,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=t2,tmp=(C_word)a,a+=7,tmp);
if(C_truep(C_i_lessp(((C_word*)t0)[2],((C_word*)t0)[6]))){
t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2073,a[2]=((C_word*)t0)[3],a[3]=t3,a[4]=t2,tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:525: href");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[68]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[68]+1);
av2[1]=t4;
av2[2]=((C_word*)t0)[4];
av2[3]=((C_word*)t0)[6];
av2[4]=C_fix(0);
tp(5,av2);}}
else{
t4=t3;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=C_SCHEME_UNDEFINED;
f_1999(2,av2);}}}

/* k1037 in div in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_1039(C_word t0,C_word t1){
C_word tmp;
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,0,3)))){
C_save_and_reclaim_args((void *)trf_1039,2,t0,t1);}
a=C_alloc(5);
if(C_truep(t1)){{
C_word av2[4];
av2[0]=0;
av2[1]=((C_word*)t0)[2];
av2[2]=((C_word*)t0)[3];
av2[3]=((C_word*)t0)[4];
C_quotient(4,av2);}}
else{
if(C_truep(C_i_lessp(((C_word*)t0)[4],C_fix(0)))){
t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1051,a[2]=((C_word*)t0)[4],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[2],tmp=(C_word)a,a+=5,tmp);{
C_word av2[4];
av2[0]=0;
av2[1]=t2;
av2[2]=((C_word*)t0)[3];
av2[3]=((C_word*)t0)[4];
C_quotient(4,av2);}}
else{
t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1070,a[2]=((C_word*)t0)[4],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[2],tmp=(C_word)a,a+=5,tmp);{
C_word av2[4];
av2[0]=0;
av2[1]=t2;
av2[2]=((C_word*)t0)[3];
av2[3]=((C_word*)t0)[4];
C_quotient(4,av2);}}}}

/* hide in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3078(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word t5;
C_word t6;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,c,4)))){
C_save_and_reclaim((void *)f_3078,4,av);}
a=C_alloc(8);
t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3084,a[2]=t2,a[3]=((C_word)li94),tmp=(C_word)a,a+=4,tmp);
t5=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3104,a[2]=t3,a[3]=((C_word)li95),tmp=(C_word)a,a+=4,tmp);
C_trace("maze.scm:776: call-with-values");{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=0;
av2[1]=t1;
av2[2]=t4;
av2[3]=t5;
C_call_with_values(4,av2);}}

/* k2000 in k1997 in k1994 in k2079 in k1979 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2002(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(12,c,3)))){
C_save_and_reclaim((void *)f_2002,2,av);}
a=C_alloc(12);
t2=C_a_i_minus(&a,2,((C_word*)t0)[2],C_fix(6));
t3=C_SCHEME_UNDEFINED;
t4=(*a=C_VECTOR_TYPE|1,a[1]=t3,tmp=(C_word)a,a+=2,tmp);
t5=C_set_block_item(t4,0,(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_2011,a[2]=t4,a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word)li69),tmp=(C_word)a,a+=6,tmp));
t6=((C_word*)t4)[1];
f_2011(t6,((C_word*)t0)[5],t2);}

/* k2071 in k1994 in k2079 in k1979 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2073(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,4)))){
C_save_and_reclaim((void *)f_2073,2,av);}
C_trace("maze.scm:525: add-wall");
t2=((C_word*)t0)[2];
f_1969(t2,((C_word*)t0)[3],((C_word*)t0)[4],t1,C_fast_retrieve(lf[75]));}

/* k2424 in k2411 in k2352 in k2349 in k2346 in k2343 in k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2426(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_2426,2,av);}
if(C_truep(t1)){
t2=((C_word*)t0)[2];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t2;
av2[1]=C_SCHEME_UNDEFINED;
f_2357(2,av2);}}
else{
C_trace("maze.scm:594: proc");
t2=((C_word*)t0)[3];{
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=t2;
av2[1]=((C_word*)t0)[2];
av2[2]=((C_word*)t0)[4];
((C_proc)C_fast_retrieve_proc(t2))(3,av2);}}}

/* k1979 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1981(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(14,c,3)))){
C_save_and_reclaim((void *)f_1981,2,av);}
a=C_alloc(14);
t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_1984,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
if(C_truep(C_i_greaterp(((C_word*)t0)[4],C_fix(1)))){
t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_2081,a[2]=((C_word*)t0)[5],a[3]=((C_word*)t0)[6],a[4]=t2,a[5]=((C_word*)t0)[7],tmp=(C_word)a,a+=6,tmp);
t4=C_a_i_minus(&a,2,((C_word*)t0)[4],C_fix(2));
C_trace("maze.scm:521: div");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[20]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[20]+1);
av2[1]=t3;
av2[2]=t4;
av2[3]=C_fix(2);
tp(4,av2);}}
else{
t3=t2;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t3;
av2[1]=C_SCHEME_UNDEFINED;
f_1984(2,av2);}}}

/* k1982 in k1979 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1984(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_1984,2,av);}
C_trace("maze.scm:534: vector-lib#list->vector");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[78]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[78]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=((C_word*)((C_word*)t0)[3])[1];
tp(3,av2);}}

/* k1997 in k1994 in k2079 in k1979 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1999(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(15,c,4)))){
C_save_and_reclaim((void *)f_1999,2,av);}
a=C_alloc(15);
t2=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_2002,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2059,a[2]=((C_word*)t0)[3],a[3]=t2,a[4]=((C_word*)t0)[6],tmp=(C_word)a,a+=5,tmp);
t4=C_a_i_minus(&a,2,((C_word*)t0)[2],C_fix(3));
C_trace("maze.scm:526: href");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[68]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[68]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[4];
av2[3]=t4;
av2[4]=C_fix(0);
tp(5,av2);}}

/* k2079 in k1979 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2081(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(15,c,4)))){
C_save_and_reclaim((void *)f_2081,2,av);}
a=C_alloc(15);
t2=C_a_i_times(&a,2,C_fix(6),t1);
t3=C_a_i_plus(&a,2,C_fix(3),t2);
t4=t3;
t5=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_1996,a[2]=t4,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],a[5]=((C_word*)t0)[4],a[6]=((C_word*)t0)[5],tmp=(C_word)a,a+=7,tmp);
C_trace("maze.scm:523: href");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[68]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[68]+1);
av2[1]=t5;
av2[2]=((C_word*)t0)[3];
av2[3]=t4;
av2[4]=C_fix(1);
tp(5,av2);}}

/* k2795 in k2694 in k2691 in doloop483 in k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2797(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_2797,2,av);}
C_trace("maze.scm:705: write-ch");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[86]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[86]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=C_make_character(92);
tp(3,av2);}}

/* k1093 in k1087 in div in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1095(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1095,2,av);}
t2=((C_word*)t0)[2];
f_1039(t2,(C_truep(t1)?C_i_greater_or_equalp(((C_word*)t0)[3],C_fix(0)):C_SCHEME_FALSE));}

/* mod in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1100(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word t5;
C_word t6;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(10,c,2)))){
C_save_and_reclaim((void *)f_1100,4,av);}
a=C_alloc(10);
t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1107,a[2]=t1,a[3]=t2,a[4]=t3,tmp=(C_word)a,a+=5,tmp);
t5=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1157,a[2]=t4,a[3]=t2,a[4]=t3,tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:59: exact-integer?");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[12]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[12]+1);
av2[1]=t5;
av2[2]=t2;
tp(3,av2);}}

/* k2789 in doloop497 in k2700 in k2697 in k2694 in k2691 in doloop483 in k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 in ... */
static void C_ccall f_2791(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_2791,2,av);}
C_trace("maze.scm:712: cell:walls");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[45]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[45]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=t1;
tp(3,av2);}}

/* k2585 in k2582 in k2579 in k2576 in k2573 in k2564 in k2561 in k2558 in k2555 in make-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2587(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,1)))){
C_save_and_reclaim((void *)f_2587,2,av);}
a=C_alloc(4);
t2=((C_word*)t0)[2];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t2;
av2[1]=C_a_i_vector3(&a,3,((C_word*)t0)[3],((C_word*)t0)[4],((C_word*)t0)[5]);
((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}

/* k2582 in k2579 in k2576 in k2573 in k2564 in k2561 in k2558 in k2555 in make-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2584(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(14,c,3)))){
C_save_and_reclaim((void *)f_2584,2,av);}
a=C_alloc(14);
t2=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_2587,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
t3=C_a_i_bitwise_not(&a,1,C_fast_retrieve(lf[74]));
t4=C_a_i_bitwise_and(&a,2,((C_word*)t0)[6],t3);
C_trace("maze.scm:617: set-cell:walls");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[46]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[46]+1);
av2[1]=t2;
av2[2]=((C_word*)t0)[7];
av2[3]=t4;
tp(4,av2);}}

/* k925 */
static void C_ccall f_927(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
C_save_and_reclaim((void *)f_927,2,av);}
a=C_alloc(3);
t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_930,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=C_SCHEME_UNDEFINED;
av2[1]=t2;
C_eval_toplevel(2,av2);}}

/* k2405 in k2355 in k2352 in k2349 in k2346 in k2343 in k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2407(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_2407,2,av);}
t2=((C_word*)t0)[2];
f_2363(t2,C_i_zerop(t1));}

/* k1117 in k1105 in mod in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1119(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(12,c,1)))){
C_save_and_reclaim((void *)f_1119,2,av);}
a=C_alloc(12);
t2=C_a_i_times(&a,2,t1,((C_word*)t0)[2]);
t3=C_a_i_minus(&a,2,((C_word*)t0)[3],t2);
t4=C_i_nequalp(t3,C_fix(0));
t5=((C_word*)t0)[4];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t5;
av2[1]=(C_truep(t4)?C_fix(0):C_a_i_minus(&a,2,t3,((C_word*)t0)[2]));
((C_proc)(void*)(*((C_word*)t5+1)))(2,av2);}}

/* k931 in k928 in k925 */
static void C_ccall f_933(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
C_save_and_reclaim((void *)f_933,2,av);}
a=C_alloc(3);
t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_936,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=C_SCHEME_UNDEFINED;
av2[1]=t2;
C_extras_toplevel(2,av2);}}

/* k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_939(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word t7;
C_word t8;
C_word t9;
C_word t10;
C_word t11;
C_word t12;
C_word t13;
C_word t14;
C_word t15;
C_word t16;
C_word t17;
C_word t18;
C_word t19;
C_word t20;
C_word t21;
C_word t22;
C_word t23;
C_word t24;
C_word t25;
C_word t26;
C_word t27;
C_word t28;
C_word t29;
C_word t30;
C_word t31;
C_word t32;
C_word t33;
C_word t34;
C_word t35;
C_word t36;
C_word t37;
C_word t38;
C_word t39;
C_word t40;
C_word t41;
C_word t42;
C_word t43;
C_word t44;
C_word t45;
C_word t46;
C_word t47;
C_word t48;
C_word t49;
C_word t50;
C_word t51;
C_word t52;
C_word t53;
C_word t54;
C_word t55;
C_word t56;
C_word t57;
C_word t58;
C_word t59;
C_word t60;
C_word t61;
C_word t62;
C_word t63;
C_word t64;
C_word t65;
C_word t66;
C_word t67;
C_word t68;
C_word t69;
C_word t70;
C_word t71;
C_word t72;
C_word t73;
C_word t74;
C_word t75;
C_word t76;
C_word t77;
C_word t78;
C_word t79;
C_word t80;
C_word t81;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(207,c,6)))){
C_save_and_reclaim((void *)f_939,2,av);}
a=C_alloc(207);
t2=C_mutate2((C_word*)lf[0]+1 /* (set! flush-output-port ...) */,*((C_word*)lf[1]+1));
t3=C_mutate2((C_word*)lf[2]+1 /* (set! current-jiffy ...) */,C_fast_retrieve(lf[3]));
t4=C_mutate2((C_word*)lf[4]+1 /* (set! jiffies-per-second ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_943,a[2]=((C_word)li0),tmp=(C_word)a,a+=3,tmp));
t5=C_mutate2((C_word*)lf[5]+1 /* (set! current-second ...) */,C_fast_retrieve(lf[6]));
t6=C_mutate2((C_word*)lf[7]+1 /* (set! inexact ...) */,*((C_word*)lf[8]+1));
t7=C_mutate2((C_word*)lf[9]+1 /* (set! exact ...) */,*((C_word*)lf[10]+1));
t8=C_mutate2((C_word*)lf[11]+1 /* (set! square ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_949,a[2]=((C_word)li1),tmp=(C_word)a,a+=3,tmp));
t9=C_mutate2((C_word*)lf[12]+1 /* (set! exact-integer? ...) */,*((C_word*)lf[13]+1));
t10=C_mutate2((C_word*)lf[14]+1 /* (set! this-scheme-implementation-name ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_956,a[2]=((C_word)li2),tmp=(C_word)a,a+=3,tmp));
t11=C_mutate2((C_word*)lf[18]+1 /* (set! bitwise-not ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_966,a[2]=((C_word)li3),tmp=(C_word)a,a+=3,tmp));
t12=C_mutate2((C_word*)lf[19]+1 /* (set! bitwise-and ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_976,a[2]=((C_word)li4),tmp=(C_word)a,a+=3,tmp));
t13=C_mutate2((C_word*)lf[20]+1 /* (set! div ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1032,a[2]=((C_word)li5),tmp=(C_word)a,a+=3,tmp));
t14=C_mutate2((C_word*)lf[21]+1 /* (set! mod ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1100,a[2]=((C_word)li6),tmp=(C_word)a,a+=3,tmp));
t15=C_mutate2((C_word*)lf[23]+1 /* (set! random-state ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1168,a[2]=((C_word)li7),tmp=(C_word)a,a+=3,tmp));
t16=C_mutate2((C_word*)lf[24]+1 /* (set! rand ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1174,a[2]=((C_word)li8),tmp=(C_word)a,a+=3,tmp));
t17=C_mutate2((C_word*)lf[25]+1 /* (set! random-int ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1209,a[2]=((C_word)li9),tmp=(C_word)a,a+=3,tmp));
t18=C_mutate2((C_word*)lf[26]+1 /* (set! base-set ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1219,a[2]=((C_word)li10),tmp=(C_word)a,a+=3,tmp));
t19=C_mutate2((C_word*)lf[27]+1 /* (set! get-set-root ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1225,a[2]=((C_word)li13),tmp=(C_word)a,a+=3,tmp));
t20=C_mutate2((C_word*)lf[28]+1 /* (set! set-equal? ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1281,a[2]=((C_word)li14),tmp=(C_word)a,a+=3,tmp));
t21=C_mutate2((C_word*)lf[29]+1 /* (set! set-size ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1295,a[2]=((C_word)li15),tmp=(C_word)a,a+=3,tmp));
t22=C_mutate2((C_word*)lf[30]+1 /* (set! union! ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1305,a[2]=((C_word)li16),tmp=(C_word)a,a+=3,tmp));
t23=C_mutate2((C_word*)lf[31]+1 /* (set! make-wall ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1341,a[2]=((C_word)li17),tmp=(C_word)a,a+=3,tmp));
t24=C_mutate2((C_word*)lf[33]+1 /* (set! wall:owner ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1347,a[2]=((C_word)li18),tmp=(C_word)a,a+=3,tmp));
t25=C_mutate2((C_word*)lf[34]+1 /* (set! set-wall:owner ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1353,a[2]=((C_word)li19),tmp=(C_word)a,a+=3,tmp));
t26=C_mutate2((C_word*)lf[35]+1 /* (set! wall:neighbor ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1359,a[2]=((C_word)li20),tmp=(C_word)a,a+=3,tmp));
t27=C_mutate2((C_word*)lf[36]+1 /* (set! set-wall:neighbor ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1365,a[2]=((C_word)li21),tmp=(C_word)a,a+=3,tmp));
t28=C_mutate2((C_word*)lf[37]+1 /* (set! wall:bit ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1371,a[2]=((C_word)li22),tmp=(C_word)a,a+=3,tmp));
t29=C_mutate2((C_word*)lf[38]+1 /* (set! set-wall:bit ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1377,a[2]=((C_word)li23),tmp=(C_word)a,a+=3,tmp));
t30=C_mutate2((C_word*)lf[39]+1 /* (set! make-cell ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1383,a[2]=((C_word)li24),tmp=(C_word)a,a+=3,tmp));
t31=C_mutate2((C_word*)lf[41]+1 /* (set! cell:reachable ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1389,a[2]=((C_word)li25),tmp=(C_word)a,a+=3,tmp));
t32=C_mutate2((C_word*)lf[42]+1 /* (set! set-cell:reachable ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1395,a[2]=((C_word)li26),tmp=(C_word)a,a+=3,tmp));
t33=C_mutate2((C_word*)lf[43]+1 /* (set! cell:id ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1401,a[2]=((C_word)li27),tmp=(C_word)a,a+=3,tmp));
t34=C_mutate2((C_word*)lf[44]+1 /* (set! set-cell:id ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1407,a[2]=((C_word)li28),tmp=(C_word)a,a+=3,tmp));
t35=C_mutate2((C_word*)lf[45]+1 /* (set! cell:walls ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1413,a[2]=((C_word)li29),tmp=(C_word)a,a+=3,tmp));
t36=C_mutate2((C_word*)lf[46]+1 /* (set! set-cell:walls ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1419,a[2]=((C_word)li30),tmp=(C_word)a,a+=3,tmp));
t37=C_mutate2((C_word*)lf[47]+1 /* (set! cell:parent ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1425,a[2]=((C_word)li31),tmp=(C_word)a,a+=3,tmp));
t38=C_mutate2((C_word*)lf[48]+1 /* (set! set-cell:parent ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1431,a[2]=((C_word)li32),tmp=(C_word)a,a+=3,tmp));
t39=C_mutate2((C_word*)lf[49]+1 /* (set! cell:mark ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1437,a[2]=((C_word)li33),tmp=(C_word)a,a+=3,tmp));
t40=C_mutate2((C_word*)lf[50]+1 /* (set! set-cell:mark ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1443,a[2]=((C_word)li34),tmp=(C_word)a,a+=3,tmp));
t41=C_mutate2((C_word*)lf[51]+1 /* (set! vector-for-each-rev ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1449,a[2]=((C_word)li36),tmp=(C_word)a,a+=3,tmp));
t42=C_mutate2((C_word*)lf[52]+1 /* (set! permute-vec! ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1486,a[2]=((C_word)li38),tmp=(C_word)a,a+=3,tmp));
t43=C_mutate2((C_word*)lf[53]+1 /* (set! dig-maze ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1532,a[2]=((C_word)li41),tmp=(C_word)a,a+=3,tmp));
t44=C_mutate2((C_word*)lf[55]+1 /* (set! dfs-maze ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1602,a[2]=((C_word)li44),tmp=(C_word)a,a+=3,tmp));
t45=C_mutate2((C_word*)lf[56]+1 /* (set! reroot-maze ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1633,a[2]=((C_word)li46),tmp=(C_word)a,a+=3,tmp));
t46=C_mutate2((C_word*)lf[57]+1 /* (set! path-length ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1654,a[2]=((C_word)li48),tmp=(C_word)a,a+=3,tmp));
t47=C_mutate2((C_word*)lf[58]+1 /* (set! mark-path ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1684,a[2]=((C_word)li50),tmp=(C_word)a,a+=3,tmp));
t48=C_mutate2((C_word*)lf[59]+1 /* (set! make-harr ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1705,a[2]=((C_word)li51),tmp=(C_word)a,a+=3,tmp));
t49=C_mutate2((C_word*)lf[61]+1 /* (set! harr:nrows ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1711,a[2]=((C_word)li52),tmp=(C_word)a,a+=3,tmp));
t50=C_mutate2((C_word*)lf[62]+1 /* (set! set-harr:nrows ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1717,a[2]=((C_word)li53),tmp=(C_word)a,a+=3,tmp));
t51=C_mutate2((C_word*)lf[63]+1 /* (set! harr:ncols ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1723,a[2]=((C_word)li54),tmp=(C_word)a,a+=3,tmp));
t52=C_mutate2((C_word*)lf[64]+1 /* (set! set-harr:ncols ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1729,a[2]=((C_word)li55),tmp=(C_word)a,a+=3,tmp));
t53=C_mutate2((C_word*)lf[65]+1 /* (set! harr:elts ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1735,a[2]=((C_word)li56),tmp=(C_word)a,a+=3,tmp));
t54=C_mutate2((C_word*)lf[66]+1 /* (set! set-harr:elts ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1741,a[2]=((C_word)li57),tmp=(C_word)a,a+=3,tmp));
t55=C_mutate2((C_word*)lf[60]+1 /* (set! harr ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1747,a[2]=((C_word)li58),tmp=(C_word)a,a+=3,tmp));
t56=C_mutate2((C_word*)lf[68]+1 /* (set! href ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1761,a[2]=((C_word)li59),tmp=(C_word)a,a+=3,tmp));
t57=C_mutate2((C_word*)lf[69]+1 /* (set! hset! ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1789,a[2]=((C_word)li60),tmp=(C_word)a,a+=3,tmp));
t58=C_mutate2((C_word*)lf[70]+1 /* (set! href/rc ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1817,a[2]=((C_word)li61),tmp=(C_word)a,a+=3,tmp));
t59=C_mutate2((C_word*)lf[71]+1 /* (set! harr-tabulate ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1839,a[2]=((C_word)li64),tmp=(C_word)a,a+=3,tmp));
t60=C_mutate2((C_word*)lf[72]+1 /* (set! harr-for-each ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1925,a[2]=((C_word)li65),tmp=(C_word)a,a+=3,tmp));
t61=C_set_block_item(lf[73] /* south-west */,0,C_fix(1));
t62=C_set_block_item(lf[74] /* south */,0,C_fix(2));
t63=C_set_block_item(lf[75] /* south-east */,0,C_fix(4));
t64=C_mutate2((C_word*)lf[76]+1 /* (set! gen-maze-array ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1938,a[2]=((C_word)li67),tmp=(C_word)a,a+=3,tmp));
t65=C_mutate2((C_word*)lf[77]+1 /* (set! make-wall-vec ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1958,a[2]=((C_word)li72),tmp=(C_word)a,a+=3,tmp));
t66=C_mutate2((C_word*)lf[79]+1 /* (set! pick-entrances ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2210,a[2]=((C_word)li75),tmp=(C_word)a,a+=3,tmp));
t67=C_mutate2((C_word*)lf[80]+1 /* (set! for-each-hex-child ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2317,a[2]=((C_word)li76),tmp=(C_word)a,a+=3,tmp));
t68=C_mutate2((C_word*)lf[82]+1 /* (set! make-maze ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2553,a[2]=((C_word)li77),tmp=(C_word)a,a+=3,tmp));
t69=C_mutate2((C_word*)lf[83]+1 /* (set! pmaze ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2620,a[2]=((C_word)li78),tmp=(C_word)a,a+=3,tmp));
t70=C_set_block_item(lf[85] /* output */,0,C_SCHEME_FALSE);
t71=C_mutate2((C_word*)lf[86]+1 /* (set! write-ch ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2639,a[2]=((C_word)li79),tmp=(C_word)a,a+=3,tmp));
t72=C_mutate2((C_word*)lf[84]+1 /* (set! print-hexmaze ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2646,a[2]=((C_word)li85),tmp=(C_word)a,a+=3,tmp));
t73=C_mutate2((C_word*)lf[81]+1 /* (set! bit-test ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2951,a[2]=((C_word)li86),tmp=(C_word)a,a+=3,tmp));
t74=C_mutate2((C_word*)lf[88]+1 /* (set! dot/space ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2965,a[2]=((C_word)li87),tmp=(C_word)a,a+=3,tmp));
t75=C_mutate2((C_word*)lf[87]+1 /* (set! display-hexbottom ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2984,a[2]=((C_word)li88),tmp=(C_word)a,a+=3,tmp));
t76=C_mutate2((C_word*)lf[89]+1 /* (set! run ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3017,a[2]=((C_word)li89),tmp=(C_word)a,a+=3,tmp));
t77=C_mutate2((C_word*)lf[91]+1 /* (set! main ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3027,a[2]=((C_word)li92),tmp=(C_word)a,a+=3,tmp));
t78=C_mutate2((C_word*)lf[92]+1 /* (set! hide ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3078,a[2]=((C_word)li96),tmp=(C_word)a,a+=3,tmp));
t79=C_mutate2((C_word*)lf[93]+1 /* (set! run-r7rs-benchmark ...) */,(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3113,a[2]=((C_word)li98),tmp=(C_word)a,a+=3,tmp));
t80=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3277,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
C_trace("maze.scm:835: main");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[91]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[91]+1);
av2[1]=t80;
tp(2,av2);}}

/* k934 in k931 in k928 in k925 */
static void C_ccall f_936(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
C_save_and_reclaim((void *)f_936,2,av);}
a=C_alloc(3);
t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_939,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);
C_trace("maze.scm:2: ##sys#require");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[115]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[115]+1);
av2[1]=t2;
av2[2]=lf[116];
tp(3,av2);}}

/* k2435 in k2349 in k2346 in k2343 in k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_2437(C_word t0,C_word t1){
C_word tmp;
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(12,0,4)))){
C_save_and_reclaim_args((void *)trf_2437,2,t0,t1);}
a=C_alloc(12);
if(C_truep(t1)){
t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_2440,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
t3=C_a_i_minus(&a,2,((C_word*)t0)[4],C_fix(3));
t4=C_a_i_plus(&a,2,((C_word*)t0)[5],C_fix(1));
C_trace("maze.scm:588: href");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[68]);
C_word av2[5];
av2[0]=*((C_word*)lf[68]+1);
av2[1]=t2;
av2[2]=((C_word*)t0)[6];
av2[3]=t3;
av2[4]=t4;
tp(5,av2);}}
else{
t2=((C_word*)t0)[2];{
C_word av2[2];
av2[0]=t2;
av2[1]=C_SCHEME_UNDEFINED;
f_2354(2,av2);}}}

/* k928 in k925 */
static void C_ccall f_930(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
C_save_and_reclaim((void *)f_930,2,av);}
a=C_alloc(3);
t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_933,a[2]=((C_word*)t0)[2],tmp=(C_word)a,a+=3,tmp);{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=C_SCHEME_UNDEFINED;
av2[1]=t2;
C_chicken_2dsyntax_toplevel(2,av2);}}

/* k2428 in k2411 in k2352 in k2349 in k2346 in k2343 in k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2430(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,3)))){
C_save_and_reclaim((void *)f_2430,2,av);}
C_trace("maze.scm:594: bit-test");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[81]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[81]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=t1;
av2[3]=C_fast_retrieve(lf[74]);
tp(4,av2);}}

/* k1105 in mod in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_1107(C_word t0,C_word t1){
C_word tmp;
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,0,3)))){
C_save_and_reclaim_args((void *)trf_1107,2,t0,t1);}
a=C_alloc(5);
if(C_truep(t1)){
C_trace("maze.scm:62: remainder");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[22]+1));
C_word av2[4];
av2[0]=*((C_word*)lf[22]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=((C_word*)t0)[3];
av2[3]=((C_word*)t0)[4];
tp(4,av2);}}
else{
if(C_truep(C_i_lessp(((C_word*)t0)[4],C_fix(0)))){
t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1119,a[2]=((C_word*)t0)[4],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[2],tmp=(C_word)a,a+=5,tmp);{
C_word av2[4];
av2[0]=0;
av2[1]=t2;
av2[2]=((C_word*)t0)[3];
av2[3]=((C_word*)t0)[4];
C_quotient(4,av2);}}
else{
t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1138,a[2]=((C_word*)t0)[4],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[2],tmp=(C_word)a,a+=5,tmp);{
C_word av2[4];
av2[0]=0;
av2[1]=t2;
av2[2]=((C_word*)t0)[3];
av2[3]=((C_word*)t0)[4];
C_quotient(4,av2);}}}}

/* k3281 in k3275 in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3283(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_3283,2,av);}
t2=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t2;
av2[1]=((C_word*)t0)[2];
((C_proc)C_fast_retrieve_proc(t2))(2,av2);}}

/* k3278 in k3275 in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3280(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_3280,2,av);}
t2=((C_word*)t0)[2];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t2;
av2[1]=C_SCHEME_UNDEFINED;
((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}

/* jiffies-per-second in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_943(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
if(c!=2) C_bad_argc_2(c,2,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_943,2,av);}
t2=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t2;
av2[1]=C_fix(1000);
((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}

/* square in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_949(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,1)))){
C_save_and_reclaim((void *)f_949,3,av);}
a=C_alloc(4);
t3=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t3;
av2[1]=C_a_i_times(&a,2,t2,t2);
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}

/* k3135 in k3132 in k3129 in run-r7rs-benchmark in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3137(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(7,c,2)))){
C_save_and_reclaim((void *)f_3137,2,av);}
a=C_alloc(7);
t2=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3140,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],tmp=(C_word)a,a+=7,tmp);
t3=*((C_word*)lf[101]+1);
C_trace("maze.scm:799: flush-output-port");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[0]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[0]+1);
av2[1]=t2;
av2[2]=*((C_word*)lf[101]+1);
tp(3,av2);}}

/* k3129 in run-r7rs-benchmark in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3131(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(7,c,2)))){
C_save_and_reclaim((void *)f_3131,2,av);}
a=C_alloc(7);
t2=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3134,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],tmp=(C_word)a,a+=7,tmp);
C_trace("maze.scm:797: display");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[103]+1));
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[103]+1);
av2[1]=t2;
av2[2]=((C_word*)t0)[4];
tp(3,av2);}}

/* k3041 in k3038 in k3035 in k3032 in k3029 in main in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3043(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,c,2)))){
C_save_and_reclaim((void *)f_3043,2,av);}
a=C_alloc(8);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_3046,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],a[7]=t2,tmp=(C_word)a,a+=8,tmp);
C_trace("maze.scm:760: number->string");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[98]+1));
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[98]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[3];
tp(3,av2);}}

/* k3132 in k3129 in run-r7rs-benchmark in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3134(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(7,c,2)))){
C_save_and_reclaim((void *)f_3134,2,av);}
a=C_alloc(7);
t2=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3137,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],tmp=(C_word)a,a+=7,tmp);
C_trace("maze.scm:798: newline");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[102]+1));
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[102]+1);
av2[1]=t2;
tp(2,av2);}}

/* k3038 in k3035 in k3032 in k3029 in main in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3040(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(7,c,2)))){
C_save_and_reclaim((void *)f_3040,2,av);}
a=C_alloc(7);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3043,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=t2,a[6]=((C_word*)t0)[5],tmp=(C_word)a,a+=7,tmp);
C_trace("maze.scm:759: number->string");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[98]+1));
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[98]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[2];
tp(3,av2);}}

/* k3044 in k3041 in k3038 in k3035 in k3032 in k3029 in main in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3046(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(9,c,2)))){
C_save_and_reclaim((void *)f_3046,2,av);}
a=C_alloc(9);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|8,a[1]=(C_word)f_3049,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],a[7]=t2,a[8]=((C_word*)t0)[7],tmp=(C_word)a,a+=9,tmp);
C_trace("maze.scm:761: number->string");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[98]+1));
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[98]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[4];
tp(3,av2);}}

/* k3047 in k3044 in k3041 in k3038 in k3035 in k3032 in k3029 in main in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3049(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(7,c,8)))){
C_save_and_reclaim((void *)f_3049,2,av);}
a=C_alloc(7);
t2=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3056,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],tmp=(C_word)a,a+=7,tmp);
C_trace("maze.scm:764: string-append");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[15]+1));
C_word *av2;
if(c >= 9) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(9);
}
av2[0]=*((C_word*)lf[15]+1);
av2[1]=t2;
av2[2]=lf[94];
av2[3]=lf[95];
av2[4]=t1;
av2[5]=lf[96];
av2[6]=((C_word*)t0)[7];
av2[7]=lf[97];
av2[8]=((C_word*)t0)[8];
tp(9,av2);}}

/* k2519 in k2343 in k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2521(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,c,4)))){
C_save_and_reclaim((void *)f_2521,2,av);}
a=C_alloc(8);
if(C_truep(t1)){
t2=((C_word*)t0)[2];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t2;
av2[1]=C_SCHEME_UNDEFINED;
f_2348(2,av2);}}
else{
t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_2513,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[2],tmp=(C_word)a,a+=4,tmp);
t3=C_a_i_minus(&a,2,((C_word*)t0)[4],C_fix(2));
C_trace("maze.scm:581: href");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[68]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[68]+1);
av2[1]=t2;
av2[2]=((C_word*)t0)[5];
av2[3]=((C_word*)t0)[6];
av2[4]=t3;
tp(5,av2);}}}

/* this-scheme-implementation-name in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_956(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
if(c!=2) C_bad_argc_2(c,2,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
C_save_and_reclaim((void *)f_956,2,av);}
a=C_alloc(3);
t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_964,a[2]=t1,tmp=(C_word)a,a+=3,tmp);
C_trace("maze.scm:17: chicken-version");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[17]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[17]+1);
av2[1]=t2;
tp(2,av2);}}

/* make-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2553(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word t5;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,c,3)))){
C_save_and_reclaim((void *)f_2553,4,av);}
a=C_alloc(5);
t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2557,a[2]=t1,a[3]=t2,a[4]=t3,tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:607: gen-maze-array");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[76]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[76]+1);
av2[1]=t4;
av2[2]=t2;
av2[3]=t3;
tp(4,av2);}}

/* k1586 in k1573 in k1570 in k1594 in k1564 in k1598 in k1555 in k1552 in k1549 in k1546 in a1543 in a1537 in dig-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1588(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_1588,2,av);}
if(C_truep(C_i_nequalp(t1,((C_word*)t0)[2]))){
C_trace("maze.scm:314: quit");
t2=((C_word*)t0)[3];{
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=t2;
av2[1]=((C_word*)t0)[4];
av2[2]=C_SCHEME_FALSE;
((C_proc)C_fast_retrieve_proc(t2))(3,av2);}}
else{
t2=((C_word*)t0)[4];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t2;
av2[1]=C_SCHEME_UNDEFINED;
((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}}

/* a3103 in hide in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3104(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word t5;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_3104,4,av);}
t4=C_i_vector_ref(t2,t3);
C_trace("maze.scm:780: g554");
t5=t4;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t5;
av2[1]=t1;
av2[2]=((C_word*)t0)[2];
((C_proc)C_fast_retrieve_proc(t5))(3,av2);}}

/* a3100 in a3083 in hide in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3101(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_3101,3,av);}
t3=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t3;
av2[1]=t2;
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}

/* k1791 in hset! in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1793(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,3)))){
C_save_and_reclaim((void *)f_1793,2,av);}
a=C_alloc(6);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_1796,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],a[5]=((C_word*)t0)[4],tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:422: div");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[20]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[20]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[5];
av2[3]=C_fix(3);
tp(4,av2);}}

/* k1794 in k1791 in hset! in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1796(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(7,c,2)))){
C_save_and_reclaim((void *)f_1796,2,av);}
a=C_alloc(7);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_1803,a[2]=((C_word*)t0)[2],a[3]=t2,a[4]=((C_word*)t0)[3],a[5]=((C_word*)t0)[4],a[6]=((C_word*)t0)[5],tmp=(C_word)a,a+=7,tmp);
C_trace("maze.scm:423: harr:elts");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[65]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[65]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[5];
tp(3,av2);}}

/* k1660 in path-length in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1662(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,4)))){
C_save_and_reclaim((void *)f_1662,2,av);}
a=C_alloc(6);
t2=C_SCHEME_UNDEFINED;
t3=(*a=C_VECTOR_TYPE|1,a[1]=t2,tmp=(C_word)a,a+=2,tmp);
t4=C_set_block_item(t3,0,(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_1664,a[2]=t3,a[3]=((C_word)li47),tmp=(C_word)a,a+=4,tmp));
t5=((C_word*)t3)[1];
f_1664(t5,((C_word*)t0)[2],C_fix(0),t1);}

/* doloop266 in k1660 in path-length in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_1664(C_word t0,C_word t1,C_word t2,C_word t3){
C_word tmp;
C_word t4;
C_word t5;
C_word t6;
C_word t7;
C_word t8;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(9,0,2)))){
C_save_and_reclaim_args((void *)trf_1664,4,t0,t1,t2,t3);}
a=C_alloc(9);
t4=t3;
if(C_truep(t4)){
t5=C_a_i_plus(&a,2,t2,C_fix(1));
t6=t5;
t7=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1682,a[2]=((C_word*)t0)[2],a[3]=t1,a[4]=t6,tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:346: cell:parent");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[47]);
C_word av2[3];
av2[0]=*((C_word*)lf[47]+1);
av2[1]=t7;
av2[2]=t3;
tp(3,av2);}}
else{
t5=t1;{
C_word av2[2];
av2[0]=t5;
av2[1]=t2;
((C_proc)(void*)(*((C_word*)t5+1)))(2,av2);}}}

/* k962 in this-scheme-implementation-name in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_964(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,3)))){
C_save_and_reclaim((void *)f_964,2,av);}
C_trace("maze.scm:17: string-append");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[15]+1));
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[15]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=lf[16];
av2[3]=t1;
tp(4,av2);}}

/* bitwise-not in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_966(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word t4;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
C_save_and_reclaim((void *)f_966,3,av);}
a=C_alloc(3);
t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_974,a[2]=t1,tmp=(C_word)a,a+=3,tmp);
C_trace("maze.scm:25: -");{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=0;
av2[1]=t3;
av2[2]=t2;
C_minus(3,av2);}}

/* run-r7rs-benchmark in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3113(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4=av[4];
C_word t5=av[5];
C_word t6;
C_word t7;
C_word *a;
if(c!=6) C_bad_argc_2(c,6,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(7,c,2)))){
C_save_and_reclaim((void *)f_3113,6,av);}
a=C_alloc(7);
t6=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_3131,a[2]=t3,a[3]=t4,a[4]=t2,a[5]=t5,a[6]=t1,tmp=(C_word)a,a+=7,tmp);
C_trace("maze.scm:796: display");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[103]+1));
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[103]+1);
av2[1]=t6;
av2[2]=lf[113];
tp(3,av2);}}

/* k2555 in make-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2557(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(9,c,2)))){
C_save_and_reclaim((void *)f_2557,2,av);}
a=C_alloc(9);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_2560,a[2]=((C_word*)t0)[2],a[3]=t2,a[4]=((C_word*)t0)[3],a[5]=((C_word*)t0)[4],tmp=(C_word)a,a+=6,tmp);
t4=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2614,a[2]=t3,tmp=(C_word)a,a+=3,tmp);
C_trace("maze.scm:608: make-wall-vec");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[77]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[77]+1);
av2[1]=t4;
av2[2]=t2;
tp(3,av2);}}

/* bitwise-and in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_976(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word t5;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,c,3)))){
C_save_and_reclaim((void *)f_976,4,av);}
a=C_alloc(5);
if(C_truep(C_i_nequalp(t2,C_fix(0)))){
t4=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=C_fix(0);
((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}
else{
if(C_truep(C_i_nequalp(t3,C_fix(0)))){
t4=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=C_fix(0);
((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}
else{
if(C_truep(C_i_nequalp(t2,C_fix(-1)))){
t4=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=t3;
((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}
else{
if(C_truep(C_i_nequalp(t3,C_fix(-1)))){
t4=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=t2;
((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}
else{
t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1026,a[2]=t2,a[3]=t3,a[4]=t1,tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:33: div");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[20]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[20]+1);
av2[1]=t4;
av2[2]=t2;
av2[3]=C_fix(2);
tp(4,av2);}}}}}}

/* k972 in bitwise-not in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_974(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,1)))){
C_save_and_reclaim((void *)f_974,2,av);}
a=C_alloc(4);
t2=((C_word*)t0)[2];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t2;
av2[1]=C_a_i_minus(&a,2,t1,C_fix(1));
((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}

/* k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2324(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word t7;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,c,2)))){
C_save_and_reclaim((void *)f_2324,2,av);}
a=C_alloc(8);
t2=C_i_car(t1);
t3=t2;
t4=C_i_cdr(t1);
t5=t4;
t6=(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_2333,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=t3,a[5]=t5,a[6]=((C_word*)t0)[4],a[7]=((C_word*)t0)[5],tmp=(C_word)a,a+=8,tmp);
C_trace("maze.scm:576: harr:nrows");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[61]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[61]+1);
av2[1]=t6;
av2[2]=((C_word*)t0)[4];
tp(3,av2);}}

/* k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2321(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
C_save_and_reclaim((void *)f_2321,2,av);}
a=C_alloc(6);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_2324,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=t2,tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:573: cell:id");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[43]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[43]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[5];
tp(3,av2);}}

/* a1543 in a1537 in dig-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1544(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word t4;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
C_save_and_reclaim((void *)f_1544,3,av);}
a=C_alloc(6);
t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_1548,a[2]=t1,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],a[5]=t2,tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:299: wall:owner");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[33]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[33]+1);
av2[1]=t3;
av2[2]=t2;
tp(3,av2);}}

/* k2579 in k2576 in k2573 in k2564 in k2561 in k2558 in k2555 in make-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2581(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,c,2)))){
C_save_and_reclaim((void *)f_2581,2,av);}
a=C_alloc(8);
t2=(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_2584,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],a[7]=((C_word*)t0)[7],tmp=(C_word)a,a+=8,tmp);
C_trace("maze.scm:616: mark-path");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[58]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[58]+1);
av2[1]=t2;
av2[2]=((C_word*)t0)[7];
tp(3,av2);}}

/* k1215 in random-int in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1217(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,3)))){
C_save_and_reclaim((void *)f_1217,2,av);}
C_trace("maze.scm:107: mod");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[21]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[21]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=t1;
av2[3]=((C_word*)t0)[3];
tp(4,av2);}}

/* k1291 in k1287 in set-equal? in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1293(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1293,2,av);}
t2=((C_word*)t0)[2];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t2;
av2[1]=C_eqp(((C_word*)t0)[3],t1);
((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}

/* base-set in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1219(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(3,c,1)))){
C_save_and_reclaim((void *)f_1219,3,av);}
a=C_alloc(3);
t3=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t3;
av2[1]=C_a_i_cons(&a,2,t2,C_SCHEME_END_OF_LIST);
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}

/* set-size in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1295(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word t4;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
C_save_and_reclaim((void *)f_1295,3,av);}
a=C_alloc(3);
t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1303,a[2]=t1,tmp=(C_word)a,a+=3,tmp);
C_trace("maze.scm:207: get-set-root");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[27]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[27]+1);
av2[1]=t3;
av2[2]=t2;
tp(3,av2);}}

/* a3083 in hide in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3084(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
if(c!=2) C_bad_argc_2(c,2,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,3)))){
C_save_and_reclaim((void *)f_3084,2,av);}
a=C_alloc(6);
t2=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3101,a[2]=((C_word)li93),tmp=(C_word)a,a+=3,tmp);
t3=C_a_i_vector2(&a,2,*((C_word*)lf[100]+1),t2);
t4=C_i_lessp(((C_word*)t0)[2],C_fix(100));
t5=(C_truep(t4)?C_fix(0):C_fix(1));
C_trace("maze.scm:778: values");{
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=0;
av2[1]=t1;
av2[2]=t3;
av2[3]=t5;
C_values(4,av2);}}

/* k2313 in pick-entrances in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2315(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,4)))){
C_save_and_reclaim((void *)f_2315,2,av);}
C_trace("maze.scm:542: dfs-maze");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[55]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[55]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=((C_word*)t0)[3];
av2[3]=t1;
av2[4]=C_fast_retrieve(lf[80]);
tp(5,av2);}}

/* for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2317(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4=av[4];
C_word t5;
C_word t6;
C_word *a;
if(c!=5) C_bad_argc_2(c,5,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
C_save_and_reclaim((void *)f_2317,5,av);}
a=C_alloc(6);
t5=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_2321,a[2]=t1,a[3]=t2,a[4]=t3,a[5]=t4,tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:572: cell:walls");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[45]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[45]+1);
av2[1]=t5;
av2[2]=t4;
tp(3,av2);}}

/* k1546 in a1543 in a1537 in dig-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1548(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(7,c,2)))){
C_save_and_reclaim((void *)f_1548,2,av);}
a=C_alloc(7);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_1551,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=t2,a[6]=((C_word*)t0)[5],tmp=(C_word)a,a+=7,tmp);
C_trace("maze.scm:300: cell:reachable");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[41]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[41]+1);
av2[1]=t3;
av2[2]=t2;
tp(3,av2);}}

/* k2057 in k1997 in k1994 in k2079 in k1979 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2059(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,4)))){
C_save_and_reclaim((void *)f_2059,2,av);}
C_trace("maze.scm:526: add-wall");
t2=((C_word*)t0)[2];
f_1969(t2,((C_word*)t0)[3],((C_word*)t0)[4],t1,C_fast_retrieve(lf[73]));}

/* k2049 in k2045 in doloop376 in k2000 in k1997 in k1994 in k2079 in k1979 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2051(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,4)))){
C_save_and_reclaim((void *)f_2051,2,av);}
C_trace("maze.scm:531: add-wall");
t2=((C_word*)t0)[2];
f_1969(t2,((C_word*)t0)[3],((C_word*)t0)[4],t1,C_fast_retrieve(lf[73]));}

/* k1692 in lp in mark-path in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1694(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_1694,2,av);}
a=C_alloc(4);
t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_1697,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
C_trace("maze.scm:354: cell:parent");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[47]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[47]+1);
av2[1]=t2;
av2[2]=((C_word*)t0)[4];
tp(3,av2);}}

/* lp in mark-path in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_1690(C_word t0,C_word t1,C_word t2){
C_word tmp;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,0,3)))){
C_save_and_reclaim_args((void *)trf_1690,3,t0,t1,t2);}
a=C_alloc(5);
t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1694,a[2]=((C_word*)t0)[2],a[3]=t1,a[4]=t2,tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:353: set-cell:mark");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[50]);
C_word av2[4];
av2[0]=*((C_word*)lf[50]+1);
av2[1]=t3;
av2[2]=t2;
av2[3]=C_SCHEME_TRUE;
tp(4,av2);}}

/* k1695 in k1692 in lp in mark-path in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1697(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_1697,2,av);}
if(C_truep(t1)){
C_trace("maze.scm:354: lp");
t2=((C_word*)((C_word*)t0)[2])[1];
f_1690(t2,((C_word*)t0)[3],t1);}
else{
t2=((C_word*)t0)[3];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t2;
av2[1]=C_SCHEME_UNDEFINED;
((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}}

/* k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2336(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word t7;
C_word t8;
C_word t9;
C_word t10;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(33,c,3)))){
C_save_and_reclaim((void *)f_2336,2,av);}
a=C_alloc(33);
t2=C_a_i_minus(&a,2,((C_word*)t0)[2],C_fix(1));
t3=C_a_i_times(&a,2,C_fix(2),t2);
t4=t3;
t5=C_a_i_minus(&a,2,t1,C_fix(1));
t6=C_a_i_times(&a,2,C_fix(3),t5);
t7=t6;
t8=(*a=C_CLOSURE_TYPE|9,a[1]=(C_word)f_2345,a[2]=((C_word*)t0)[3],a[3]=((C_word*)t0)[4],a[4]=((C_word*)t0)[5],a[5]=((C_word*)t0)[6],a[6]=((C_word*)t0)[7],a[7]=t7,a[8]=t4,a[9]=((C_word*)t0)[8],tmp=(C_word)a,a+=10,tmp);
t9=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_2543,a[2]=t8,a[3]=((C_word*)t0)[4],a[4]=((C_word*)t0)[5],a[5]=((C_word*)t0)[6],a[6]=((C_word*)t0)[7],tmp=(C_word)a,a+=7,tmp);
C_trace("maze.scm:580: bit-test");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[81]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[81]+1);
av2[1]=t9;
av2[2]=((C_word*)t0)[8];
av2[3]=C_fast_retrieve(lf[73]);
tp(4,av2);}}

/* k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2333(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(9,c,2)))){
C_save_and_reclaim((void *)f_2333,2,av);}
a=C_alloc(9);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|8,a[1]=(C_word)f_2336,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],a[5]=((C_word*)t0)[4],a[6]=((C_word*)t0)[5],a[7]=((C_word*)t0)[6],a[8]=((C_word*)t0)[7],tmp=(C_word)a,a+=9,tmp);
C_trace("maze.scm:577: harr:ncols");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[63]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[63]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[6];
tp(3,av2);}}

/* k1594 in k1564 in k1598 in k1555 in k1552 in k1549 in k1546 in a1543 in a1537 in dig-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1596(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(13,c,3)))){
C_save_and_reclaim((void *)f_1596,2,av);}
a=C_alloc(13);
t2=C_a_i_bitwise_not(&a,1,t1);
t3=t2;
t4=(*a=C_CLOSURE_TYPE|8,a[1]=(C_word)f_1572,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],a[7]=t3,a[8]=((C_word*)t0)[7],tmp=(C_word)a,a+=9,tmp);
C_trace("maze.scm:312: union!");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[30]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[30]+1);
av2[1]=t4;
av2[2]=((C_word*)t0)[5];
av2[3]=((C_word*)t0)[8];
tp(4,av2);}}

/* get-set-root in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1225(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(7,c,3)))){
C_save_and_reclaim((void *)f_1225,3,av);}
a=C_alloc(7);
t3=C_SCHEME_UNDEFINED;
t4=(*a=C_VECTOR_TYPE|1,a[1]=t3,tmp=(C_word)a,a+=2,tmp);
t5=C_set_block_item(t4,0,(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1231,a[2]=t4,a[3]=t2,a[4]=((C_word)li12),tmp=(C_word)a,a+=5,tmp));
t6=((C_word*)t4)[1];
f_1231(t6,t1,t2);}

/* k3122 in k3188 in k3182 in k3179 in k3176 in loop in k3147 in k3144 in k3141 in k3138 in k3135 in k3132 in k3129 in run-r7rs-benchmark in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_3124(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,1)))){
C_save_and_reclaim((void *)f_3124,2,av);}
a=C_alloc(4);
t2=((C_word*)t0)[2];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t2;
av2[1]=C_a_i_divide(&a,2,t1,C_fix(1000));
((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}

/* k2037 in k2033 in k2019 in doloop376 in k2000 in k1997 in k1994 in k2079 in k1979 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2039(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,4)))){
C_save_and_reclaim((void *)f_2039,2,av);}
C_trace("maze.scm:532: add-wall");
t2=((C_word*)t0)[2];
f_1969(t2,((C_word*)t0)[3],((C_word*)t0)[4],t1,C_fast_retrieve(lf[75]));}

/* k2033 in k2019 in doloop376 in k2000 in k1997 in k1994 in k2079 in k1979 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2035(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(9,c,4)))){
C_save_and_reclaim((void *)f_2035,2,av);}
a=C_alloc(9);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2039,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=t2,tmp=(C_word)a,a+=5,tmp);
t4=C_a_i_plus(&a,2,((C_word*)t0)[4],C_fix(3));
C_trace("maze.scm:532: href");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[68]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[68]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[5];
av2[3]=t4;
av2[4]=C_fix(0);
tp(5,av2);}}

/* mark-path in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1684(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,3)))){
C_save_and_reclaim((void *)f_1684,3,av);}
a=C_alloc(6);
t3=C_SCHEME_UNDEFINED;
t4=(*a=C_VECTOR_TYPE|1,a[1]=t3,tmp=(C_word)a,a+=2,tmp);
t5=C_set_block_item(t4,0,(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_1690,a[2]=t4,a[3]=((C_word)li49),tmp=(C_word)a,a+=4,tmp));
t6=((C_word*)t4)[1];
f_1690(t6,t1,t2);}

/* k1680 in doloop266 in k1660 in path-length in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1682(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,3)))){
C_save_and_reclaim((void *)f_1682,2,av);}
t2=((C_word*)((C_word*)t0)[2])[1];
f_1664(t2,((C_word*)t0)[3],((C_word*)t0)[4],t1);}

/* k3203 in k3200 in k3197 in k3194 in k3191 in k3188 in k3182 in k3179 in k3176 in loop in k3147 in k3144 in k3141 in k3138 in k3135 in k3132 in k3129 in run-r7rs-benchmark in k937 in k934 in k931 in k928 in ... */
static void C_ccall f_3205(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
C_save_and_reclaim((void *)f_3205,2,av);}
a=C_alloc(6);
t2=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3208,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:817: display");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[103]+1));
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[103]+1);
av2[1]=t2;
av2[2]=lf[107];
tp(3,av2);}}

/* k3206 in k3203 in k3200 in k3197 in k3194 in k3191 in k3188 in k3182 in k3179 in k3176 in loop in k3147 in k3144 in k3141 in k3138 in k3135 in k3132 in k3129 in run-r7rs-benchmark in k937 in k934 in k931 in ... */
static void C_ccall f_3208(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
C_save_and_reclaim((void *)f_3208,2,av);}
a=C_alloc(6);
t2=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3211,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:818: display");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[103]+1));
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[103]+1);
av2[1]=t2;
av2[2]=((C_word*)t0)[5];
tp(3,av2);}}

/* k3200 in k3197 in k3194 in k3191 in k3188 in k3182 in k3179 in k3176 in loop in k3147 in k3144 in k3141 in k3138 in k3135 in k3132 in k3129 in run-r7rs-benchmark in k937 in k934 in k931 in k928 in k925 in ... */
static void C_ccall f_3202(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
C_save_and_reclaim((void *)f_3202,2,av);}
a=C_alloc(6);
t2=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3205,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:816: write");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[108]+1));
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[108]+1);
av2[1]=t2;
av2[2]=((C_word*)t0)[6];
tp(3,av2);}}

/* lp in lp in get-set-root in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_1255(C_word t0,C_word t1,C_word t2){
C_word tmp;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word t7;
C_word t8;
C_word *a;
loop:
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,0,2)))){
C_save_and_reclaim_args((void *)trf_1255,3,t0,t1,t2);}
t3=C_i_cdr(t2);
t4=C_eqp(((C_word*)t0)[2],t3);
if(C_truep(t4)){
t5=t1;{
C_word av2[2];
av2[0]=t5;
av2[1]=C_SCHEME_UNDEFINED;
((C_proc)(void*)(*((C_word*)t5+1)))(2,av2);}}
else{
t5=C_i_set_cdr(t2,((C_word*)t0)[2]);
C_trace("maze.scm:202: lp");
t7=t1;
t8=t3;
t1=t7;
t2=t8;
goto loop;}}

/* k2045 in doloop376 in k2000 in k1997 in k1994 in k2079 in k1979 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2047(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(9,c,4)))){
C_save_and_reclaim((void *)f_2047,2,av);}
a=C_alloc(9);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2051,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=t2,tmp=(C_word)a,a+=5,tmp);
t4=C_a_i_minus(&a,2,((C_word*)t0)[4],C_fix(3));
C_trace("maze.scm:531: href");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[68]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[68]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[5];
av2[3]=t4;
av2[4]=C_fix(0);
tp(5,av2);}}

/* k3215 in k3212 in k3209 in k3206 in k3203 in k3200 in k3197 in k3194 in k3191 in k3188 in k3182 in k3179 in k3176 in loop in k3147 in k3144 in k3141 in k3138 in k3135 in k3132 in k3129 in run-r7rs-benchmark in ... */
static void C_ccall f_3217(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(9,c,2)))){
C_save_and_reclaim((void *)f_3217,2,av);}
a=C_alloc(9);
t2=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3220,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_3246,a[2]=t2,tmp=(C_word)a,a+=3,tmp);
C_trace("maze.scm:821: this-scheme-implementation-name");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[14]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[14]+1);
av2[1]=t3;
tp(2,av2);}}

/* k3209 in k3206 in k3203 in k3200 in k3197 in k3194 in k3191 in k3188 in k3182 in k3179 in k3176 in loop in k3147 in k3144 in k3141 in k3138 in k3135 in k3132 in k3129 in run-r7rs-benchmark in k937 in k934 in ... */
static void C_ccall f_3211(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
C_save_and_reclaim((void *)f_3211,2,av);}
a=C_alloc(6);
t2=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3214,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:819: newline");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[102]+1));
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[102]+1);
av2[1]=t2;
tp(2,av2);}}

/* k3212 in k3209 in k3206 in k3203 in k3200 in k3197 in k3194 in k3191 in k3188 in k3182 in k3179 in k3176 in loop in k3147 in k3144 in k3141 in k3138 in k3135 in k3132 in k3129 in run-r7rs-benchmark in k937 in ... */
static void C_ccall f_3214(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
C_save_and_reclaim((void *)f_3214,2,av);}
a=C_alloc(6);
t2=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3217,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:820: display");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[103]+1));
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[103]+1);
av2[1]=t2;
av2[2]=lf[106];
tp(3,av2);}}

/* set-equal? in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1281(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word t5;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_1281,4,av);}
a=C_alloc(4);
t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_1289,a[2]=t1,a[3]=t3,tmp=(C_word)a,a+=4,tmp);
C_trace("maze.scm:205: get-set-root");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[27]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[27]+1);
av2[1]=t4;
av2[2]=t2;
tp(3,av2);}}

/* k2411 in k2352 in k2349 in k2346 in k2343 in k2334 in k2331 in k2322 in k2319 in for-each-hex-child in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2413(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,c,2)))){
C_save_and_reclaim((void *)f_2413,2,av);}
a=C_alloc(8);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2426,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=t2,tmp=(C_word)a,a+=5,tmp);
t4=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2430,a[2]=t3,tmp=(C_word)a,a+=3,tmp);
C_trace("maze.scm:594: cell:walls");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[45]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[45]+1);
av2[1]=t4;
av2[2]=t2;
tp(3,av2);}}

/* k1287 in set-equal? in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1289(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_1289,2,av);}
a=C_alloc(4);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_1293,a[2]=((C_word*)t0)[2],a[3]=t2,tmp=(C_word)a,a+=4,tmp);
C_trace("maze.scm:205: get-set-root");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[27]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[27]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[3];
tp(3,av2);}}

/* doloop360 in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_2091(C_word t0,C_word t1,C_word t2){
C_word tmp;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word t7;
C_word t8;
C_word t9;
C_word t10;
C_word t11;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(31,0,3)))){
C_save_and_reclaim_args((void *)trf_2091,3,t0,t1,t2);}
a=C_alloc(31);
if(C_truep(C_i_lessp(t2,C_fix(0)))){
t3=t1;{
C_word av2[2];
av2[0]=t3;
av2[1]=C_SCHEME_UNDEFINED;
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}
else{
t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2101,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=t1,tmp=(C_word)a,a+=5,tmp);
t4=C_a_i_minus(&a,2,((C_word*)t0)[3],C_fix(1));
t5=C_a_i_times(&a,2,t4,C_fix(2));
t6=C_a_i_bitwise_and(&a,2,t2,C_fix(1));
t7=C_a_i_plus(&a,2,t5,t6);
t8=C_SCHEME_UNDEFINED;
t9=(*a=C_VECTOR_TYPE|1,a[1]=t8,tmp=(C_word)a,a+=2,tmp);
t10=C_set_block_item(t9,0,(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_2114,a[2]=t9,a[3]=t2,a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],a[7]=((C_word)li70),tmp=(C_word)a,a+=8,tmp));
t11=((C_word*)t9)[1];
f_2114(t11,t3,t7);}}

/* k3227 in k3224 in k3221 in k3218 in k3215 in k3212 in k3209 in k3206 in k3203 in k3200 in k3197 in k3194 in k3191 in k3188 in k3182 in k3179 in k3176 in loop in k3147 in k3144 in k3141 in k3138 in ... */
static void C_ccall f_3229(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_3229,2,av);}
a=C_alloc(4);
t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3232,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
C_trace("maze.scm:825: display");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[103]+1));
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[103]+1);
av2[1]=t2;
av2[2]=((C_word*)t0)[4];
tp(3,av2);}}

/* k3224 in k3221 in k3218 in k3215 in k3212 in k3209 in k3206 in k3203 in k3200 in k3197 in k3194 in k3191 in k3188 in k3182 in k3179 in k3176 in loop in k3147 in k3144 in k3141 in k3138 in k3135 in ... */
static void C_ccall f_3226(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,c,2)))){
C_save_and_reclaim((void *)f_3226,2,av);}
a=C_alloc(5);
t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3229,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:824: display");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[103]+1));
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[103]+1);
av2[1]=t2;
av2[2]=lf[104];
tp(3,av2);}}

/* k3221 in k3218 in k3215 in k3212 in k3209 in k3206 in k3203 in k3200 in k3197 in k3194 in k3191 in k3188 in k3182 in k3179 in k3176 in loop in k3147 in k3144 in k3141 in k3138 in k3135 in k3132 in ... */
static void C_ccall f_3223(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,c,2)))){
C_save_and_reclaim((void *)f_3223,2,av);}
a=C_alloc(5);
t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_3226,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:823: display");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[103]+1));
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[103]+1);
av2[1]=t2;
av2[2]=((C_word*)t0)[5];
tp(3,av2);}}

/* k3218 in k3215 in k3212 in k3209 in k3206 in k3203 in k3200 in k3197 in k3194 in k3191 in k3188 in k3182 in k3179 in k3176 in loop in k3147 in k3144 in k3141 in k3138 in k3135 in k3132 in k3129 in ... */
static void C_ccall f_3220(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
C_save_and_reclaim((void *)f_3220,2,av);}
a=C_alloc(6);
t2=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_3223,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:822: display");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[103]+1));
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[103]+1);
av2[1]=t2;
av2[2]=lf[105];
tp(3,av2);}}

/* lp in get-set-root in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_1231(C_word t0,C_word t1,C_word t2){
C_word tmp;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word t7;
C_word t8;
C_word t9;
C_word t10;
C_word t11;
C_word *a;
loop:
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(11,0,3)))){
C_save_and_reclaim_args((void *)trf_1231,3,t0,t1,t2);}
a=C_alloc(11);
t3=C_i_cdr(t2);
if(C_truep(C_i_pairp(t3))){
C_trace("maze.scm:194: lp");
t10=t1;
t11=t3;
t1=t10;
t2=t11;
goto loop;}
else{
t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_1247,a[2]=t1,a[3]=t2,tmp=(C_word)a,a+=4,tmp);
t5=C_eqp(t2,((C_word*)t0)[3]);
if(C_truep(t5)){
t6=t4;{
C_word av2[2];
av2[0]=t6;
av2[1]=C_SCHEME_UNDEFINED;
f_1247(2,av2);}}
else{
t6=C_SCHEME_UNDEFINED;
t7=(*a=C_VECTOR_TYPE|1,a[1]=t6,tmp=(C_word)a,a+=2,tmp);
t8=C_set_block_item(t7,0,(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1255,a[2]=t2,a[3]=t7,a[4]=((C_word)li11),tmp=(C_word)a,a+=5,tmp));
t9=((C_word*)t7)[1];
f_1255(t9,t4,((C_word*)t0)[3]);}}}

/* path-length in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1654(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word t4;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(3,c,2)))){
C_save_and_reclaim((void *)f_1654,3,av);}
a=C_alloc(3);
t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_1662,a[2]=t1,tmp=(C_word)a,a+=3,tmp);
C_trace("maze.scm:346: cell:parent");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[47]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[47]+1);
av2[1]=t3;
av2[2]=t2;
tp(3,av2);}}

/* k3236 in k3233 in k3230 in k3227 in k3224 in k3221 in k3218 in k3215 in k3212 in k3209 in k3206 in k3203 in k3200 in k3197 in k3194 in k3191 in k3188 in k3182 in k3179 in k3176 in loop in k3147 in ... */
static void C_ccall f_3238(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_3238,2,av);}
t2=((C_word*)t0)[2];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t2;
av2[1]=((C_word*)t0)[3];
((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}

/* k3233 in k3230 in k3227 in k3224 in k3221 in k3218 in k3215 in k3212 in k3209 in k3206 in k3203 in k3200 in k3197 in k3194 in k3191 in k3188 in k3182 in k3179 in k3176 in loop in k3147 in k3144 in ... */
static void C_ccall f_3235(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_3235,2,av);}
a=C_alloc(4);
t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3238,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
t3=*((C_word*)lf[101]+1);
C_trace("maze.scm:827: flush-output-port");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[0]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[0]+1);
av2[1]=t2;
av2[2]=*((C_word*)lf[101]+1);
tp(3,av2);}}

/* k3230 in k3227 in k3224 in k3221 in k3218 in k3215 in k3212 in k3209 in k3206 in k3203 in k3200 in k3197 in k3194 in k3191 in k3188 in k3182 in k3179 in k3176 in loop in k3147 in k3144 in k3141 in ... */
static void C_ccall f_3232(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_3232,2,av);}
a=C_alloc(4);
t2=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_3235,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],tmp=(C_word)a,a+=4,tmp);
C_trace("maze.scm:826: newline");
{C_proc tp=(C_proc)C_fast_retrieve_proc(*((C_word*)lf[102]+1));
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[102]+1);
av2[1]=t2;
tp(2,av2);}}

/* k1641 in lp in reroot-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1643(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,3)))){
C_save_and_reclaim((void *)f_1643,2,av);}
a=C_alloc(6);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_1646,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],a[5]=((C_word*)t0)[4],tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:339: set-cell:parent");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[48]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[48]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[4];
av2[3]=((C_word*)t0)[5];
tp(4,av2);}}

/* k1644 in k1641 in lp in reroot-maze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1646(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,3)))){
C_save_and_reclaim((void *)f_1646,2,av);}
if(C_truep(((C_word*)t0)[2])){
C_trace("maze.scm:340: lp");
t2=((C_word*)((C_word*)t0)[3])[1];
f_1639(t2,((C_word*)t0)[4],((C_word*)t0)[2],((C_word*)t0)[5]);}
else{
t2=((C_word*)t0)[4];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t2;
av2[1]=C_SCHEME_UNDEFINED;
((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}}

/* k1245 in lp in get-set-root in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1247(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1247,2,av);}
t2=((C_word*)t0)[2];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t2;
av2[1]=((C_word*)t0)[3];
((C_proc)(void*)(*((C_word*)t2+1)))(2,av2);}}

/* k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2665(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(18,c,3)))){
C_save_and_reclaim((void *)f_2665,2,av);}
a=C_alloc(18);
t2=(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_2668,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],a[7]=((C_word*)t0)[7],tmp=(C_word)a,a+=8,tmp);
t3=C_SCHEME_UNDEFINED;
t4=(*a=C_VECTOR_TYPE|1,a[1]=t3,tmp=(C_word)a,a+=2,tmp);
t5=C_set_block_item(t4,0,(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_2865,a[2]=((C_word*)t0)[5],a[3]=t4,a[4]=((C_word*)t0)[2],a[5]=((C_word*)t0)[4],a[6]=((C_word*)t0)[7],a[7]=((C_word)li83),tmp=(C_word)a,a+=8,tmp));
t6=((C_word*)t4)[1];
f_2865(t6,t2,C_fix(0));}

/* k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2668(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(11,c,2)))){
C_save_and_reclaim((void *)f_2668,2,av);}
a=C_alloc(11);
t2=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_2671,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],tmp=(C_word)a,a+=7,tmp);
if(C_truep(C_i_oddp(((C_word*)t0)[3]))){
t3=C_a_i_minus(&a,2,((C_word*)t0)[3],C_fix(1));
t4=C_i_nequalp(((C_word*)t0)[7],t3);
t5=(C_truep(t4)?C_make_character(32):C_make_character(95));
C_trace("maze.scm:688: write-ch");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[86]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[86]+1);
av2[1]=t2;
av2[2]=t5;
tp(3,av2);}}
else{
t3=t2;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t3;
av2[1]=C_SCHEME_UNDEFINED;
f_2671(2,av2);}}}

/* k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2662(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,c,2)))){
C_save_and_reclaim((void *)f_2662,2,av);}
a=C_alloc(8);
t2=(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_2665,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],a[7]=((C_word*)t0)[7],tmp=(C_word)a,a+=8,tmp);
C_trace("maze.scm:677: write-ch");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[86]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[86]+1);
av2[1]=t2;
av2[2]=C_make_character(32);
tp(3,av2);}}

/* set-cell:mark in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1443(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,1)))){
C_save_and_reclaim((void *)f_1443,4,av);}
t4=t1;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=C_i_vector_set(t2,C_fix(5),t3);
((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}

/* k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2674(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(13,c,3)))){
C_save_and_reclaim((void *)f_2674,2,av);}
a=C_alloc(13);
t2=C_a_i_minus(&a,2,((C_word*)t0)[2],C_fix(1));
t3=C_SCHEME_UNDEFINED;
t4=(*a=C_VECTOR_TYPE|1,a[1]=t3,tmp=(C_word)a,a+=2,tmp);
t5=C_set_block_item(t4,0,(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_2683,a[2]=t4,a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word)li82),tmp=(C_word)a,a+=7,tmp));
t6=((C_word*)t4)[1];
f_2683(t6,((C_word*)t0)[6],t2);}

/* vector-for-each-rev in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1449(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word t5;
C_word t6;
C_word t7;
C_word t8;
C_word t9;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(12,c,3)))){
C_save_and_reclaim((void *)f_1449,4,av);}
a=C_alloc(12);
t4=C_i_vector_length(t3);
t5=C_a_i_minus(&a,2,t4,C_fix(1));
t6=C_SCHEME_UNDEFINED;
t7=(*a=C_VECTOR_TYPE|1,a[1]=t6,tmp=(C_word)a,a+=2,tmp);
t8=C_set_block_item(t7,0,(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_1459,a[2]=t7,a[3]=t3,a[4]=t2,a[5]=((C_word)li35),tmp=(C_word)a,a+=6,tmp));
t9=((C_word*)t7)[1];
f_1459(t9,t1,t5);}

/* k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2671(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(7,c,2)))){
C_save_and_reclaim((void *)f_2671,2,av);}
a=C_alloc(7);
t2=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_2674,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],tmp=(C_word)a,a+=7,tmp);
C_trace("maze.scm:690: write-ch");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[86]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[86]+1);
av2[1]=t2;
av2[2]=C_make_character(10);
tp(3,av2);}}

/* k2305 in bt-lp in k2243 in k2240 in tp-lp in k2218 in k2215 in k2212 in pick-entrances in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2307(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,2)))){
C_save_and_reclaim((void *)f_2307,2,av);}
C_trace("maze.scm:559: path-length");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[57]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[57]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=t1;
tp(3,av2);}}

/* permute-vec! in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1486(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word t5;
C_word t6;
C_word t7;
C_word t8;
C_word t9;
C_word t10;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(16,c,3)))){
C_save_and_reclaim((void *)f_1486,4,av);}
a=C_alloc(16);
t4=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_1490,a[2]=t1,a[3]=t2,tmp=(C_word)a,a+=4,tmp);
t5=C_i_vector_length(t2);
t6=C_a_i_minus(&a,2,t5,C_fix(1));
t7=C_SCHEME_UNDEFINED;
t8=(*a=C_VECTOR_TYPE|1,a[1]=t7,tmp=(C_word)a,a+=2,tmp);
t9=C_set_block_item(t8,0,(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_1496,a[2]=t2,a[3]=t8,a[4]=t3,a[5]=((C_word)li37),tmp=(C_word)a,a+=6,tmp));
t10=((C_word*)t8)[1];
f_1496(t10,t4,t6);}

/* k2281 in bt-lp in k2243 in k2240 in tp-lp in k2218 in k2215 in k2212 in pick-entrances in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2283(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,5)))){
C_save_and_reclaim((void *)f_2283,2,av);}
a=C_alloc(4);
if(C_truep(C_i_greaterp(t1,((C_word*)t0)[2]))){
t2=C_a_i_minus(&a,2,((C_word*)t0)[3],C_fix(1));
C_trace("maze.scm:561: bt-lp");
t3=((C_word*)((C_word*)t0)[4])[1];
f_2270(t3,((C_word*)t0)[5],t1,((C_word*)t0)[6],((C_word*)t0)[3],t2);}
else{
t2=C_a_i_minus(&a,2,((C_word*)t0)[3],C_fix(1));
C_trace("maze.scm:562: bt-lp");
t3=((C_word*)((C_word*)t0)[4])[1];
f_2270(t3,((C_word*)t0)[5],((C_word*)t0)[2],((C_word*)t0)[7],((C_word*)t0)[8],t2);}}

/* doloop483 in k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_2683(C_word t0,C_word t1,C_word t2){
C_word tmp;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,0,2)))){
C_save_and_reclaim_args((void *)trf_2683,3,t0,t1,t2);}
a=C_alloc(8);
if(C_truep(C_i_lessp(t2,C_fix(0)))){
t3=t1;{
C_word av2[2];
av2[0]=t3;
av2[1]=C_SCHEME_UNDEFINED;
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}
else{
t3=(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_2693,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=t1,a[5]=((C_word*)t0)[3],a[6]=((C_word*)t0)[4],a[7]=((C_word*)t0)[5],tmp=(C_word)a,a+=8,tmp);
C_trace("maze.scm:696: write-ch");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[86]);
C_word av2[3];
av2[0]=*((C_word*)lf[86]+1);
av2[1]=t3;
av2[2]=C_make_character(47);
tp(3,av2);}}}

/* k2697 in k2694 in k2691 in doloop483 in k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2699(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,c,2)))){
C_save_and_reclaim((void *)f_2699,2,av);}
a=C_alloc(8);
t2=(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_2702,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],a[7]=((C_word*)t0)[7],tmp=(C_word)a,a+=8,tmp);
C_trace("maze.scm:707: write-ch");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[86]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[86]+1);
av2[1]=t2;
av2[2]=C_make_character(10);
tp(3,av2);}}

/* k2694 in k2691 in doloop483 in k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2696(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(18,c,4)))){
C_save_and_reclaim((void *)f_2696,2,av);}
a=C_alloc(18);
t2=(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_2699,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],a[7]=((C_word*)t0)[7],tmp=(C_word)a,a+=8,tmp);
if(C_truep(C_i_oddp(((C_word*)t0)[5]))){
t3=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2797,a[2]=t2,tmp=(C_word)a,a+=3,tmp);
t4=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2804,a[2]=t3,tmp=(C_word)a,a+=3,tmp);
t5=C_a_i_minus(&a,2,((C_word*)t0)[5],C_fix(1));
C_trace("maze.scm:704: dot/space");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[88]);
C_word *av2;
if(c >= 5) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(5);
}
av2[0]=*((C_word*)lf[88]+1);
av2[1]=t4;
av2[2]=((C_word*)t0)[6];
av2[3]=((C_word*)t0)[2];
av2[4]=t5;
tp(5,av2);}}
else{
t3=t2;{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t3;
av2[1]=C_SCHEME_UNDEFINED;
f_2699(2,av2);}}}

/* k1467 in lp in vector-for-each-rev in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1469(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_1469,2,av);}
a=C_alloc(4);
t2=C_a_i_minus(&a,2,((C_word*)t0)[2],C_fix(1));
C_trace("maze.scm:277: lp");
t3=((C_word*)((C_word*)t0)[3])[1];
f_1459(t3,((C_word*)t0)[4],t2);}

/* k2691 in doloop483 in k2672 in k2669 in k2666 in k2663 in k2660 in k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2693(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(17,c,3)))){
C_save_and_reclaim((void *)f_2693,2,av);}
a=C_alloc(17);
t2=(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_2696,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],a[7]=((C_word*)t0)[7],tmp=(C_word)a,a+=8,tmp);
t3=C_SCHEME_UNDEFINED;
t4=(*a=C_VECTOR_TYPE|1,a[1]=t3,tmp=(C_word)a,a+=2,tmp);
t5=C_set_block_item(t4,0,(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_2810,a[2]=((C_word*)t0)[7],a[3]=t4,a[4]=((C_word*)t0)[6],a[5]=((C_word*)t0)[2],a[6]=((C_word)li81),tmp=(C_word)a,a+=7,tmp));
t6=((C_word*)t4)[1];
f_2810(t6,t2,C_fix(1));}

/* lp in vector-for-each-rev in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_1459(C_word t0,C_word t1,C_word t2){
C_word tmp;
C_word t3;
C_word t4;
C_word t5;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,0,2)))){
C_save_and_reclaim_args((void *)trf_1459,3,t0,t1,t2);}
a=C_alloc(5);
if(C_truep(C_i_greater_or_equalp(t2,C_fix(0)))){
t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1469,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=t1,tmp=(C_word)a,a+=5,tmp);
t4=C_i_vector_ref(((C_word*)t0)[3],t2);
C_trace("maze.scm:276: proc");
t5=((C_word*)t0)[4];{
C_word av2[3];
av2[0]=t5;
av2[1]=t3;
av2[2]=t4;
((C_proc)C_fast_retrieve_proc(t5))(3,av2);}}
else{
t3=t1;{
C_word av2[2];
av2[0]=t3;
av2[1]=C_SCHEME_UNDEFINED;
((C_proc)(void*)(*((C_word*)t3+1)))(2,av2);}}}

/* k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1965(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word t7;
C_word t8;
C_word t9;
C_word t10;
C_word t11;
C_word t12;
C_word t13;
C_word t14;
C_word t15;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(40,c,5)))){
C_save_and_reclaim((void *)f_1965,2,av);}
a=C_alloc(40);
t2=t1;
t3=C_a_i_minus(&a,2,t2,C_fix(1));
t4=C_a_i_times(&a,2,C_fix(3),t3);
t5=t4;
t6=C_SCHEME_END_OF_LIST;
t7=(*a=C_VECTOR_TYPE|1,a[1]=t6,tmp=(C_word)a,a+=2,tmp);
t8=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_1969,a[2]=t7,a[3]=((C_word)li68),tmp=(C_word)a,a+=4,tmp);
t9=(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_1981,a[2]=((C_word*)t0)[2],a[3]=t7,a[4]=t2,a[5]=t8,a[6]=((C_word*)t0)[3],a[7]=t5,tmp=(C_word)a,a+=8,tmp);
t10=C_a_i_minus(&a,2,t2,C_fix(1));
t11=C_a_i_times(&a,2,t10,C_fix(3));
t12=C_SCHEME_UNDEFINED;
t13=(*a=C_VECTOR_TYPE|1,a[1]=t12,tmp=(C_word)a,a+=2,tmp);
t14=C_set_block_item(t13,0,(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_2091,a[2]=t13,a[3]=((C_word*)t0)[4],a[4]=t5,a[5]=t8,a[6]=((C_word*)t0)[3],a[7]=((C_word)li71),tmp=(C_word)a,a+=8,tmp));
t15=((C_word*)t13)[1];
f_2091(t15,t9,t11);}

/* k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1962(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,c,2)))){
C_save_and_reclaim((void *)f_1962,2,av);}
a=C_alloc(5);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1965,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=t2,tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:496: harr:ncols");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[63]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[63]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[3];
tp(3,av2);}}

/* k1976 in add-wall in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1978(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(3,c,1)))){
C_save_and_reclaim((void *)f_1978,2,av);}
a=C_alloc(3);
t2=C_a_i_cons(&a,2,t1,((C_word*)((C_word*)t0)[2])[1]);
t3=C_mutate2(((C_word *)((C_word*)t0)[2])+1,t2);
t4=((C_word*)t0)[3];{
C_word *av2=av; /* Re-use our own argvector */
av2[0]=t4;
av2[1]=t3;
((C_proc)(void*)(*((C_word*)t4+1)))(2,av2);}}

/* bt-lp in k2243 in k2240 in tp-lp in k2218 in k2215 in k2212 in pick-entrances in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_2270(C_word t0,C_word t1,C_word t2,C_word t3,C_word t4,C_word t5){
C_word tmp;
C_word t6;
C_word t7;
C_word t8;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(12,0,4)))){
C_save_and_reclaim_args((void *)trf_2270,6,t0,t1,t2,t3,t4,t5);}
a=C_alloc(12);
if(C_truep(C_i_lessp(t5,C_fix(0)))){
t6=t1;{
C_word av2[2];
av2[0]=t6;
av2[1]=C_a_i_vector3(&a,3,t2,t3,t4);
((C_proc)(void*)(*((C_word*)t6+1)))(2,av2);}}
else{
t6=(*a=C_CLOSURE_TYPE|8,a[1]=(C_word)f_2283,a[2]=t2,a[3]=t5,a[4]=((C_word*)t0)[2],a[5]=t1,a[6]=((C_word*)t0)[3],a[7]=t3,a[8]=t4,tmp=(C_word)a,a+=9,tmp);
t7=(*a=C_CLOSURE_TYPE|2,a[1]=(C_word)f_2307,a[2]=t6,tmp=(C_word)a,a+=3,tmp);
C_trace("maze.scm:559: href/rc");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[70]);
C_word av2[5];
av2[0]=*((C_word*)lf[70]+1);
av2[1]=t7;
av2[2]=((C_word*)t0)[4];
av2[3]=C_fix(0);
av2[4]=t5;
tp(5,av2);}}}

/* k1950 in a1943 in gen-maze-array in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1952(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(3,c,3)))){
C_save_and_reclaim((void *)f_1952,2,av);}
a=C_alloc(3);
t2=C_a_i_cons(&a,2,((C_word*)t0)[2],((C_word*)t0)[3]);
C_trace("maze.scm:491: make-cell");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[39]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[39]+1);
av2[1]=((C_word*)t0)[4];
av2[2]=t1;
av2[3]=t2;
tp(4,av2);}}

/* k2246 in k2243 in k2240 in tp-lp in k2218 in k2215 in k2212 in pick-entrances in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2248(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,5)))){
C_save_and_reclaim((void *)f_2248,2,av);}
a=C_alloc(4);
t2=C_i_vector_ref(t1,C_fix(0));
t3=C_i_vector_ref(t1,C_fix(1));
t4=C_i_vector_ref(t1,C_fix(2));
t5=C_a_i_minus(&a,2,((C_word*)t0)[2],C_fix(1));
C_trace("maze.scm:566: tp-lp");
t6=((C_word*)((C_word*)t0)[3])[1];
f_2229(t6,((C_word*)t0)[4],t2,t3,t4,t5);}

/* k2243 in k2240 in tp-lp in k2218 in k2215 in k2212 in pick-entrances in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2245(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word t5;
C_word t6;
C_word t7;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(17,c,6)))){
C_save_and_reclaim((void *)f_2245,2,av);}
a=C_alloc(17);
t2=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2248,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],tmp=(C_word)a,a+=5,tmp);
t3=C_a_i_minus(&a,2,((C_word*)t0)[5],C_fix(1));
t4=C_SCHEME_UNDEFINED;
t5=(*a=C_VECTOR_TYPE|1,a[1]=t4,tmp=(C_word)a,a+=2,tmp);
t6=C_set_block_item(t5,0,(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_2270,a[2]=t5,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[6],a[5]=((C_word)li73),tmp=(C_word)a,a+=6,tmp));
t7=((C_word*)t5)[1];
f_2270(t7,t2,((C_word*)t0)[7],((C_word*)t0)[8],((C_word*)t0)[9],t3);}

/* add-wall in k1963 in k1960 in make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_fcall f_1969(C_word t0,C_word t1,C_word t2,C_word t3,C_word t4){
C_word tmp;
C_word t5;
C_word t6;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,0,4)))){
C_save_and_reclaim_args((void *)trf_1969,5,t0,t1,t2,t3,t4);}
a=C_alloc(4);
t5=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_1978,a[2]=((C_word*)t0)[2],a[3]=t1,tmp=(C_word)a,a+=4,tmp);
C_trace("maze.scm:502: make-wall");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[31]);
C_word av2[5];
av2[0]=*((C_word*)lf[31]+1);
av2[1]=t5;
av2[2]=t2;
av2[3]=t3;
av2[4]=t4;
tp(5,av2);}}

/* k2240 in tp-lp in k2218 in k2215 in k2212 in pick-entrances in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2242(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(10,c,2)))){
C_save_and_reclaim((void *)f_2242,2,av);}
a=C_alloc(10);
t2=(*a=C_CLOSURE_TYPE|9,a[1]=(C_word)f_2245,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],a[7]=((C_word*)t0)[7],a[8]=((C_word*)t0)[8],a[9]=((C_word*)t0)[9],tmp=(C_word)a,a+=10,tmp);
C_trace("maze.scm:551: reroot-maze");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[56]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[56]+1);
av2[1]=t2;
av2[2]=t1;
tp(3,av2);}}

/* print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2646(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word t5;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,c,2)))){
C_save_and_reclaim((void *)f_2646,4,av);}
a=C_alloc(5);
t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_2650,a[2]=t2,a[3]=t1,a[4]=t3,tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:660: harr:nrows");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[61]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[61]+1);
av2[1]=t4;
av2[2]=t2;
tp(3,av2);}}

/* a1943 in gen-maze-array in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1944(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3=av[3];
C_word t4;
C_word t5;
C_word *a;
if(c!=4) C_bad_argc_2(c,4,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(5,c,2)))){
C_save_and_reclaim((void *)f_1944,4,av);}
a=C_alloc(5);
t4=(*a=C_CLOSURE_TYPE|4,a[1]=(C_word)f_1952,a[2]=t2,a[3]=t3,a[4]=t1,tmp=(C_word)a,a+=5,tmp);
C_trace("maze.scm:491: base-set");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[26]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[26]+1);
av2[1]=t4;
av2[2]=C_fix(1);
tp(3,av2);}}

/* make-wall-vec in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1958(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2=av[2];
C_word t3;
C_word t4;
C_word *a;
if(c!=3) C_bad_argc_2(c,3,t0);
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(4,c,2)))){
C_save_and_reclaim((void *)f_1958,3,av);}
a=C_alloc(4);
t3=(*a=C_CLOSURE_TYPE|3,a[1]=(C_word)f_1962,a[2]=t1,a[3]=t2,tmp=(C_word)a,a+=4,tmp);
C_trace("maze.scm:495: harr:nrows");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[61]);
C_word *av2=av; /* Re-use our own argvector */
av2[0]=*((C_word*)lf[61]+1);
av2[1]=t3;
av2[2]=t2;
tp(3,av2);}}

/* k2657 in k2947 in k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2659(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(8,c,2)))){
C_save_and_reclaim((void *)f_2659,2,av);}
a=C_alloc(8);
t2=(*a=C_CLOSURE_TYPE|7,a[1]=(C_word)f_2662,a[2]=((C_word*)t0)[2],a[3]=((C_word*)t0)[3],a[4]=((C_word*)t0)[4],a[5]=((C_word*)t0)[5],a[6]=((C_word*)t0)[6],a[7]=((C_word*)t0)[7],tmp=(C_word)a,a+=8,tmp);
C_trace("maze.scm:673: write-ch");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[86]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[86]+1);
av2[1]=t2;
av2[2]=C_make_character(10);
tp(3,av2);}}

/* k1931 in harr-for-each in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_1933(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(0,c,3)))){
C_save_and_reclaim((void *)f_1933,2,av);}
C_trace("maze.scm:448: vector-for-each-rev");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[51]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[51]+1);
av2[1]=((C_word*)t0)[2];
av2[2]=((C_word*)t0)[3];
av2[3]=t1;
tp(4,av2);}}

/* k2651 in k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2653(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(7,c,3)))){
C_save_and_reclaim((void *)f_2653,2,av);}
a=C_alloc(7);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|6,a[1]=(C_word)f_2949,a[2]=((C_word*)t0)[2],a[3]=t2,a[4]=((C_word*)t0)[3],a[5]=((C_word*)t0)[4],a[6]=((C_word*)t0)[5],tmp=(C_word)a,a+=7,tmp);
C_trace("maze.scm:662: div");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[20]);
C_word *av2;
if(c >= 4) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(4);
}
av2[0]=*((C_word*)lf[20]+1);
av2[1]=t3;
av2[2]=t2;
av2[3]=C_fix(2);
tp(4,av2);}}

/* k2648 in print-hexmaze in k937 in k934 in k931 in k928 in k925 */
static void C_ccall f_2650(C_word c,C_word *av){
C_word tmp;
C_word t0=av[0];
C_word t1=av[1];
C_word t2;
C_word t3;
C_word t4;
C_word *a;
C_check_for_interrupt;
if(C_unlikely(!C_demand(C_calculate_demand(6,c,2)))){
C_save_and_reclaim((void *)f_2650,2,av);}
a=C_alloc(6);
t2=t1;
t3=(*a=C_CLOSURE_TYPE|5,a[1]=(C_word)f_2653,a[2]=t2,a[3]=((C_word*)t0)[2],a[4]=((C_word*)t0)[3],a[5]=((C_word*)t0)[4],tmp=(C_word)a,a+=6,tmp);
C_trace("maze.scm:661: harr:ncols");
{C_proc tp=(C_proc)C_fast_retrieve_symbol_proc(lf[63]);
C_word *av2;
if(c >= 3) {
  av2=av; /* Re-use our own argvector */
} else {
  av2=C_alloc(3);
}
av2[0]=*((C_word*)lf[63]+1);
av2[1]=t3;
av2[2]=((C_word*)t0)[2];
tp(3,av2);}}

#ifdef C_ENABLE_PTABLES
static C_PTABLE_ENTRY ptable[337] = {
{"f_2229:maze_2escm",(void*)f_2229},
{"f_2220:maze_2escm",(void*)f_2220},
{"f_1938:maze_2escm",(void*)f_1938},
{"f_2217:maze_2escm",(void*)f_2217},
{"f_2210:maze_2escm",(void*)f_2210},
{"f_2214:maze_2escm",(void*)f_2214},
{"f_1925:maze_2escm",(void*)f_1925},
{"f_2457:maze_2escm",(void*)f_2457},
{"f_1903:maze_2escm",(void*)f_1903},
{"f_2453:maze_2escm",(void*)f_2453},
{"f_3172:maze_2escm",(void*)f_3172},
{"f_3178:maze_2escm",(void*)f_3178},
{"f_3143:maze_2escm",(void*)f_3143},
{"f_3140:maze_2escm",(void*)f_3140},
{"f_3146:maze_2escm",(void*)f_3146},
{"f_3149:maze_2escm",(void*)f_3149},
{"f_2602:maze_2escm",(void*)f_2602},
{"f_3154:maze_2escm",(void*)f_3154},
{"f_2491:maze_2escm",(void*)f_2491},
{"f_1705:maze_2escm",(void*)f_1705},
{"f_2639:maze_2escm",(void*)f_2639},
{"f_2951:maze_2escm",(void*)f_2951},
{"f_2440:maze_2escm",(void*)f_2440},
{"f_2624:maze_2escm",(void*)f_2624},
{"f_3246:maze_2escm",(void*)f_3246},
{"f_2620:maze_2escm",(void*)f_2620},
{"f_2982:maze_2escm",(void*)f_2982},
{"f_2984:maze_2escm",(void*)f_2984},
{"f_2988:maze_2escm",(void*)f_2988},
{"f_1026:maze_2escm",(void*)f_1026},
{"f_2618:maze_2escm",(void*)f_2618},
{"f_2614:maze_2escm",(void*)f_2614},
{"f_2176:maze_2escm",(void*)f_2176},
{"f_3257:maze_2escm",(void*)f_3257},
{"f_2345:maze_2escm",(void*)f_2345},
{"f_2348:maze_2escm",(void*)f_2348},
{"f_2150:maze_2escm",(void*)f_2150},
{"f_3017:maze_2escm",(void*)f_3017},
{"f_3015:maze_2escm",(void*)f_3015},
{"f_3263:maze_2escm",(void*)f_3263},
{"f_3260:maze_2escm",(void*)f_3260},
{"f_3266:maze_2escm",(void*)f_3266},
{"f_1747:maze_2escm",(void*)f_1747},
{"f_2965:maze_2escm",(void*)f_2965},
{"f_1181:maze_2escm",(void*)f_1181},
{"f_1184:maze_2escm",(void*)f_1184},
{"f_2162:maze_2escm",(void*)f_2162},
{"f_1741:maze_2escm",(void*)f_1741},
{"f_3027:maze_2escm",(void*)f_3027},
{"f_3022:maze_2escm",(void*)f_3022},
{"f_3277:maze_2escm",(void*)f_3277},
{"f_1735:maze_2escm",(void*)f_1735},
{"f_2931:maze_2escm",(void*)f_2931},
{"f_1174:maze_2escm",(void*)f_1174},
{"f_2130:maze_2escm",(void*)f_2130},
{"f_1359:maze_2escm",(void*)f_1359},
{"f_3037:maze_2escm",(void*)f_3037},
{"f_3031:maze_2escm",(void*)f_3031},
{"f_3034:maze_2escm",(void*)f_3034},
{"f_1509:maze_2escm",(void*)f_1509},
{"f_1729:maze_2escm",(void*)f_1729},
{"f_2949:maze_2escm",(void*)f_2949},
{"f_1163:maze_2escm",(void*)f_1163},
{"f_2379:maze_2escm",(void*)f_2379},
{"f_1353:maze_2escm",(void*)f_1353},
{"f_1723:maze_2escm",(void*)f_1723},
{"f_1389:maze_2escm",(void*)f_1389},
{"f_2133:maze_2escm",(void*)f_2133},
{"f_1717:maze_2escm",(void*)f_1717},
{"f_2912:maze_2escm",(void*)f_2912},
{"f_2383:maze_2escm",(void*)f_2383},
{"f_1168:maze_2escm",(void*)f_1168},
{"f_1383:maze_2escm",(void*)f_1383},
{"f_1711:maze_2escm",(void*)f_1711},
{"f_1789:maze_2escm",(void*)f_1789},
{"f_1787:maze_2escm",(void*)f_1787},
{"f_2101:maze_2escm",(void*)f_2101},
{"f_2928:maze_2escm",(void*)f_2928},
{"f_2925:maze_2escm",(void*)f_2925},
{"f_2922:maze_2escm",(void*)f_2922},
{"f_2354:maze_2escm",(void*)f_2354},
{"f_2357:maze_2escm",(void*)f_2357},
{"f_1803:maze_2escm",(void*)f_1803},
{"f_1157:maze_2escm",(void*)f_1157},
{"f_2351:maze_2escm",(void*)f_2351},
{"f_2366:maze_2escm",(void*)f_2366},
{"f_2838:maze_2escm",(void*)f_2838},
{"f_2834:maze_2escm",(void*)f_2834},
{"f_1365:maze_2escm",(void*)f_1365},
{"f_2363:maze_2escm",(void*)f_2363},
{"f_1775:maze_2escm",(void*)f_1775},
{"f_1768:maze_2escm",(void*)f_1768},
{"f_2842:maze_2escm",(void*)f_2842},
{"f_1138:maze_2escm",(void*)f_1138},
{"f_1395:maze_2escm",(void*)f_1395},
{"f_3008:maze_2escm",(void*)f_3008},
{"f_1761:maze_2escm",(void*)f_1761},
{"f_1765:maze_2escm",(void*)f_1765},
{"f_3001:maze_2escm",(void*)f_3001},
{"f_1538:maze_2escm",(void*)f_1538},
{"f_1532:maze_2escm",(void*)f_1532},
{"f_1341:maze_2escm",(void*)f_1341},
{"f_2810:maze_2escm",(void*)f_2810},
{"f_1347:maze_2escm",(void*)f_1347},
{"f_1755:maze_2escm",(void*)f_1755},
{"f_1843:maze_2escm",(void*)f_1843},
{"f_1846:maze_2escm",(void*)f_1846},
{"f_2823:maze_2escm",(void*)f_2823},
{"f_2820:maze_2escm",(void*)f_2820},
{"f_1371:maze_2escm",(void*)f_1371},
{"f_1377:maze_2escm",(void*)f_1377},
{"f_1617:maze_2escm",(void*)f_1617},
{"f_1612:maze_2escm",(void*)f_1612},
{"f_1839:maze_2escm",(void*)f_1839},
{"f_1837:maze_2escm",(void*)f_1837},
{"f_2875:maze_2escm",(void*)f_2875},
{"f_2878:maze_2escm",(void*)f_2878},
{"f_2481:maze_2escm",(void*)f_2481},
{"f_1608:maze_2escm",(void*)f_1608},
{"f_1602:maze_2escm",(void*)f_1602},
{"f_1600:maze_2escm",(void*)f_1600},
{"f_1825:maze_2escm",(void*)f_1825},
{"f_2884:maze_2escm",(void*)f_2884},
{"f_2881:maze_2escm",(void*)f_2881},
{"f_1309:maze_2escm",(void*)f_1309},
{"f_1305:maze_2escm",(void*)f_1305},
{"f_1303:maze_2escm",(void*)f_1303},
{"f_1209:maze_2escm",(void*)f_1209},
{"f_1815:maze_2escm",(void*)f_1815},
{"f_1817:maze_2escm",(void*)f_1817},
{"f_2021:maze_2escm",(void*)f_2021},
{"f_1496:maze_2escm",(void*)f_1496},
{"f_1490:maze_2escm",(void*)f_1490},
{"f_2024:maze_2escm",(void*)f_2024},
{"f_2865:maze_2escm",(void*)f_2865},
{"f_2011:maze_2escm",(void*)f_2011},
{"f_1878:maze_2escm",(void*)f_1878},
{"f_2732:maze_2escm",(void*)f_2732},
{"f_1865:maze_2escm",(void*)f_1865},
{"f_1639:maze_2escm",(void*)f_1639},
{"f_1633:maze_2escm",(void*)f_1633},
{"f_1855:maze_2escm",(void*)f_1855},
{"f_2711:maze_2escm",(void*)f_2711},
{"f_1089:maze_2escm",(void*)f_1089},
{"f_2728:maze_2escm",(void*)f_2728},
{"f_1070:maze_2escm",(void*)f_1070},
{"f_2804:maze_2escm",(void*)f_2804},
{"f_2775:maze_2escm",(void*)f_2775},
{"f_1437:maze_2escm",(void*)f_1437},
{"f_1431:maze_2escm",(void*)f_1431},
{"toplevel:maze_2escm",(void*)C_toplevel},
{"f_2787:maze_2escm",(void*)f_2787},
{"f_1425:maze_2escm",(void*)f_1425},
{"f_1419:maze_2escm",(void*)f_1419},
{"f_2751:maze_2escm",(void*)f_2751},
{"f_1413:maze_2escm",(void*)f_1413},
{"f_2764:maze_2escm",(void*)f_2764},
{"f_2761:maze_2escm",(void*)f_2761},
{"f_2127:maze_2escm",(void*)f_2127},
{"f_1315:maze_2escm",(void*)f_1315},
{"f_1318:maze_2escm",(void*)f_1318},
{"f_1312:maze_2escm",(void*)f_1312},
{"f_2124:maze_2escm",(void*)f_2124},
{"f_2114:maze_2escm",(void*)f_2114},
{"f_2895:maze_2escm",(void*)f_2895},
{"f_2513:maze_2escm",(void*)f_2513},
{"f_2560:maze_2escm",(void*)f_2560},
{"f_2563:maze_2escm",(void*)f_2563},
{"f_2503:maze_2escm",(void*)f_2503},
{"f_2531:maze_2escm",(void*)f_2531},
{"f_2991:maze_2escm",(void*)f_2991},
{"f_2566:maze_2escm",(void*)f_2566},
{"f_2543:maze_2escm",(void*)f_2543},
{"f_2575:maze_2escm",(void*)f_2575},
{"f_2578:maze_2escm",(void*)f_2578},
{"f_1572:maze_2escm",(void*)f_1572},
{"f_2702:maze_2escm",(void*)f_2702},
{"f_1575:maze_2escm",(void*)f_1575},
{"f_2705:maze_2escm",(void*)f_2705},
{"f_2708:maze_2escm",(void*)f_2708},
{"f_1051:maze_2escm",(void*)f_1051},
{"f_3056:maze_2escm",(void*)f_3056},
{"f_3058:maze_2escm",(void*)f_3058},
{"f_3184:maze_2escm",(void*)f_3184},
{"f_3181:maze_2escm",(void*)f_3181},
{"f_1566:maze_2escm",(void*)f_1566},
{"f_3066:maze_2escm",(void*)f_3066},
{"f_3196:maze_2escm",(void*)f_3196},
{"f_3193:maze_2escm",(void*)f_3193},
{"f_3190:maze_2escm",(void*)f_3190},
{"f_3199:maze_2escm",(void*)f_3199},
{"f_1407:maze_2escm",(void*)f_1407},
{"f_1401:maze_2escm",(void*)f_1401},
{"f_1551:maze_2escm",(void*)f_1551},
{"f_1557:maze_2escm",(void*)f_1557},
{"f_1554:maze_2escm",(void*)f_1554},
{"f_2972:maze_2escm",(void*)f_2972},
{"f_1030:maze_2escm",(void*)f_1030},
{"f_1032:maze_2escm",(void*)f_1032},
{"f_3070:maze_2escm",(void*)f_3070},
{"f_3072:maze_2escm",(void*)f_3072},
{"f_1996:maze_2escm",(void*)f_1996},
{"f_1039:maze_2escm",(void*)f_1039},
{"f_3078:maze_2escm",(void*)f_3078},
{"f_2002:maze_2escm",(void*)f_2002},
{"f_2073:maze_2escm",(void*)f_2073},
{"f_2426:maze_2escm",(void*)f_2426},
{"f_1981:maze_2escm",(void*)f_1981},
{"f_1984:maze_2escm",(void*)f_1984},
{"f_1999:maze_2escm",(void*)f_1999},
{"f_2081:maze_2escm",(void*)f_2081},
{"f_2797:maze_2escm",(void*)f_2797},
{"f_1095:maze_2escm",(void*)f_1095},
{"f_1100:maze_2escm",(void*)f_1100},
{"f_2791:maze_2escm",(void*)f_2791},
{"f_2587:maze_2escm",(void*)f_2587},
{"f_2584:maze_2escm",(void*)f_2584},
{"f_927:maze_2escm",(void*)f_927},
{"f_2407:maze_2escm",(void*)f_2407},
{"f_1119:maze_2escm",(void*)f_1119},
{"f_933:maze_2escm",(void*)f_933},
{"f_939:maze_2escm",(void*)f_939},
{"f_936:maze_2escm",(void*)f_936},
{"f_2437:maze_2escm",(void*)f_2437},
{"f_930:maze_2escm",(void*)f_930},
{"f_2430:maze_2escm",(void*)f_2430},
{"f_1107:maze_2escm",(void*)f_1107},
{"f_3283:maze_2escm",(void*)f_3283},
{"f_3280:maze_2escm",(void*)f_3280},
{"f_943:maze_2escm",(void*)f_943},
{"f_949:maze_2escm",(void*)f_949},
{"f_3137:maze_2escm",(void*)f_3137},
{"f_3131:maze_2escm",(void*)f_3131},
{"f_3043:maze_2escm",(void*)f_3043},
{"f_3134:maze_2escm",(void*)f_3134},
{"f_3040:maze_2escm",(void*)f_3040},
{"f_3046:maze_2escm",(void*)f_3046},
{"f_3049:maze_2escm",(void*)f_3049},
{"f_2521:maze_2escm",(void*)f_2521},
{"f_956:maze_2escm",(void*)f_956},
{"f_2553:maze_2escm",(void*)f_2553},
{"f_1588:maze_2escm",(void*)f_1588},
{"f_3104:maze_2escm",(void*)f_3104},
{"f_3101:maze_2escm",(void*)f_3101},
{"f_1793:maze_2escm",(void*)f_1793},
{"f_1796:maze_2escm",(void*)f_1796},
{"f_1662:maze_2escm",(void*)f_1662},
{"f_1664:maze_2escm",(void*)f_1664},
{"f_964:maze_2escm",(void*)f_964},
{"f_966:maze_2escm",(void*)f_966},
{"f_3113:maze_2escm",(void*)f_3113},
{"f_2557:maze_2escm",(void*)f_2557},
{"f_976:maze_2escm",(void*)f_976},
{"f_974:maze_2escm",(void*)f_974},
{"f_2324:maze_2escm",(void*)f_2324},
{"f_2321:maze_2escm",(void*)f_2321},
{"f_1544:maze_2escm",(void*)f_1544},
{"f_2581:maze_2escm",(void*)f_2581},
{"f_1217:maze_2escm",(void*)f_1217},
{"f_1293:maze_2escm",(void*)f_1293},
{"f_1219:maze_2escm",(void*)f_1219},
{"f_1295:maze_2escm",(void*)f_1295},
{"f_3084:maze_2escm",(void*)f_3084},
{"f_2315:maze_2escm",(void*)f_2315},
{"f_2317:maze_2escm",(void*)f_2317},
{"f_1548:maze_2escm",(void*)f_1548},
{"f_2059:maze_2escm",(void*)f_2059},
{"f_2051:maze_2escm",(void*)f_2051},
{"f_1694:maze_2escm",(void*)f_1694},
{"f_1690:maze_2escm",(void*)f_1690},
{"f_1697:maze_2escm",(void*)f_1697},
{"f_2336:maze_2escm",(void*)f_2336},
{"f_2333:maze_2escm",(void*)f_2333},
{"f_1596:maze_2escm",(void*)f_1596},
{"f_1225:maze_2escm",(void*)f_1225},
{"f_3124:maze_2escm",(void*)f_3124},
{"f_2039:maze_2escm",(void*)f_2039},
{"f_2035:maze_2escm",(void*)f_2035},
{"f_1684:maze_2escm",(void*)f_1684},
{"f_1682:maze_2escm",(void*)f_1682},
{"f_3205:maze_2escm",(void*)f_3205},
{"f_3208:maze_2escm",(void*)f_3208},
{"f_3202:maze_2escm",(void*)f_3202},
{"f_1255:maze_2escm",(void*)f_1255},
{"f_2047:maze_2escm",(void*)f_2047},
{"f_3217:maze_2escm",(void*)f_3217},
{"f_3211:maze_2escm",(void*)f_3211},
{"f_3214:maze_2escm",(void*)f_3214},
{"f_1281:maze_2escm",(void*)f_1281},
{"f_2413:maze_2escm",(void*)f_2413},
{"f_1289:maze_2escm",(void*)f_1289},
{"f_2091:maze_2escm",(void*)f_2091},
{"f_3229:maze_2escm",(void*)f_3229},
{"f_3226:maze_2escm",(void*)f_3226},
{"f_3223:maze_2escm",(void*)f_3223},
{"f_3220:maze_2escm",(void*)f_3220},
{"f_1231:maze_2escm",(void*)f_1231},
{"f_1654:maze_2escm",(void*)f_1654},
{"f_3238:maze_2escm",(void*)f_3238},
{"f_3235:maze_2escm",(void*)f_3235},
{"f_3232:maze_2escm",(void*)f_3232},
{"f_1643:maze_2escm",(void*)f_1643},
{"f_1646:maze_2escm",(void*)f_1646},
{"f_1247:maze_2escm",(void*)f_1247},
{"f_2665:maze_2escm",(void*)f_2665},
{"f_2668:maze_2escm",(void*)f_2668},
{"f_2662:maze_2escm",(void*)f_2662},
{"f_1443:maze_2escm",(void*)f_1443},
{"f_2674:maze_2escm",(void*)f_2674},
{"f_1449:maze_2escm",(void*)f_1449},
{"f_2671:maze_2escm",(void*)f_2671},
{"f_2307:maze_2escm",(void*)f_2307},
{"f_1486:maze_2escm",(void*)f_1486},
{"f_2283:maze_2escm",(void*)f_2283},
{"f_2683:maze_2escm",(void*)f_2683},
{"f_2699:maze_2escm",(void*)f_2699},
{"f_2696:maze_2escm",(void*)f_2696},
{"f_1469:maze_2escm",(void*)f_1469},
{"f_2693:maze_2escm",(void*)f_2693},
{"f_1459:maze_2escm",(void*)f_1459},
{"f_1965:maze_2escm",(void*)f_1965},
{"f_1962:maze_2escm",(void*)f_1962},
{"f_1978:maze_2escm",(void*)f_1978},
{"f_2270:maze_2escm",(void*)f_2270},
{"f_1952:maze_2escm",(void*)f_1952},
{"f_2248:maze_2escm",(void*)f_2248},
{"f_2245:maze_2escm",(void*)f_2245},
{"f_1969:maze_2escm",(void*)f_1969},
{"f_2242:maze_2escm",(void*)f_2242},
{"f_2646:maze_2escm",(void*)f_2646},
{"f_1944:maze_2escm",(void*)f_1944},
{"f_1958:maze_2escm",(void*)f_1958},
{"f_2659:maze_2escm",(void*)f_2659},
{"f_1933:maze_2escm",(void*)f_1933},
{"f_2653:maze_2escm",(void*)f_2653},
{"f_2650:maze_2escm",(void*)f_2650},
{NULL,NULL}};
#endif

static C_PTABLE_ENTRY *create_ptable(void){
#ifdef C_ENABLE_PTABLES
return ptable;
#else
return NULL;
#endif
}

/*
(o e)|assignments to immediate values: 4 
o|Removed `not' forms: 13 
o|substituted constant variable: M108 
o|substituted constant variable: R110 
o|substituted constant variable: A107 
o|substituted constant variable: Q109 
o|substituted constant variable: Q109 
o|contracted procedure: k1248 
o|contracted procedure: k1263 
o|contracted procedure: k1561 
o|contracted procedure: k1622 
o|contracted procedure: k1669 
o|contracted procedure: k2167 
o|contracted procedure: k2370 
o|contracted procedure: k2417 
o|contracted procedure: k2444 
o|contracted procedure: k2482 
o|contracted procedure: k2504 
o|contracted procedure: k2522 
o|contracted procedure: k2740 
o|substituted constant variable: name546 
o|contracted procedure: "(maze.scm:812) rounded561" 
o|replaced variables: 395 
o|removed binding forms: 215 
o|removed binding forms: 349 
o|replaced variables: 13 
o|removed binding forms: 13 
o|simplifications: ((if . 16) (##core#call . 253)) 
o|  call simplifications:
o|    /	2
o|    current-output-port	3
o|    call-with-values
o|    values
o|    equal?
o|    not
o|    <=	3
o|    zero?	5
o|    bitwise-not	2
o|    vector-length	2
o|    vector-set!	15
o|    vector-ref	25
o|    vector	7
o|    pair?
o|    cdr	3
o|    eq?	4
o|    set-cdr!	3
o|    car	3
o|    >	6
o|    set-car!	3
o|    cons	5
o|    >=	8
o|    <	14
o|    quotient	5
o|    =	13
o|    bitwise-and	6
o|    odd?	5
o|    +	29
o|    -	53
o|    *	24
o|contracted procedure: k981 
o|contracted procedure: k987 
o|contracted procedure: k993 
o|contracted procedure: k999 
o|contracted procedure: k1002 
o|contracted procedure: k1017 
o|contracted procedure: k1008 
o|contracted procedure: k1046 
o|contracted procedure: k1065 
o|contracted procedure: k1052 
o|contracted procedure: k1058 
o|contracted procedure: k1084 
o|contracted procedure: k1071 
o|contracted procedure: k1077 
o|contracted procedure: k1114 
o|contracted procedure: k1133 
o|contracted procedure: k1120 
o|contracted procedure: k1126 
o|contracted procedure: k1152 
o|contracted procedure: k1139 
o|contracted procedure: k1145 
o|contracted procedure: k1176 
o|contracted procedure: k1201 
o|contracted procedure: k1205 
o|contracted procedure: k1185 
o|contracted procedure: k1194 
o|contracted procedure: k1188 
o|contracted procedure: k1191 
o|contracted procedure: k1233 
o|contracted procedure: k1239 
o|contracted procedure: k1277 
o|contracted procedure: k1257 
o|contracted procedure: k1273 
o|contracted procedure: k1266 
o|contracted procedure: k1319 
o|contracted procedure: k1325 
o|contracted procedure: k1328 
o|contracted procedure: k1334 
o|contracted procedure: k1482 
o|contracted procedure: k1455 
o|contracted procedure: k1464 
o|contracted procedure: k1474 
o|contracted procedure: k1478 
o|contracted procedure: k1528 
o|contracted procedure: k1492 
o|contracted procedure: k1501 
o|contracted procedure: k1504 
o|contracted procedure: k1524 
o|contracted procedure: k1510 
o|contracted procedure: k1513 
o|contracted procedure: k1520 
o|contracted procedure: k1567 
o|contracted procedure: k1579 
o|contracted procedure: k1590 
o|contracted procedure: k1629 
o|contracted procedure: k1676 
o|contracted procedure: k1757 
o|contracted procedure: k1781 
o|contracted procedure: k1777 
o|contracted procedure: k1809 
o|contracted procedure: k1805 
o|contracted procedure: k1831 
o|contracted procedure: k1827 
o|contracted procedure: k1851 
o|contracted procedure: k1860 
o|contracted procedure: k1870 
o|contracted procedure: k1874 
o|contracted procedure: k1883 
o|contracted procedure: k1886 
o|contracted procedure: k1893 
o|contracted procedure: k1897 
o|contracted procedure: k1905 
o|contracted procedure: k1913 
o|contracted procedure: k1917 
o|contracted procedure: k1909 
o|contracted procedure: k1921 
o|contracted procedure: k1954 
o|contracted procedure: k2206 
o|contracted procedure: k1966 
o|contracted procedure: k1972 
o|contracted procedure: k1988 
o|contracted procedure: k2075 
o|contracted procedure: k1991 
o|contracted procedure: k2007 
o|contracted procedure: k2016 
o|contracted procedure: k2029 
o|contracted procedure: k2041 
o|contracted procedure: k2053 
o|contracted procedure: k2061 
o|contracted procedure: k2064 
o|contracted procedure: k2083 
o|contracted procedure: k2202 
o|contracted procedure: k2087 
o|contracted procedure: k2096 
o|contracted procedure: k2106 
o|contracted procedure: k2198 
o|contracted procedure: k2190 
o|contracted procedure: k2194 
o|contracted procedure: k2110 
o|contracted procedure: k2119 
o|contracted procedure: k2138 
o|contracted procedure: k2141 
o|contracted procedure: k2152 
o|contracted procedure: k2156 
o|contracted procedure: k2164 
o|contracted procedure: k2186 
o|contracted procedure: k2178 
o|contracted procedure: k2182 
o|contracted procedure: k2225 
o|contracted procedure: k2234 
o|contracted procedure: k2249 
o|contracted procedure: k2252 
o|contracted procedure: k2255 
o|contracted procedure: k2262 
o|contracted procedure: k2266 
o|contracted procedure: k2275 
o|contracted procedure: k2287 
o|contracted procedure: k2294 
o|contracted procedure: k2301 
o|contracted procedure: k2309 
o|contracted procedure: k2325 
o|contracted procedure: k2328 
o|contracted procedure: k2549 
o|contracted procedure: k2337 
o|contracted procedure: k2545 
o|contracted procedure: k2340 
o|contracted procedure: k2385 
o|contracted procedure: k2389 
o|contracted procedure: k2392 
o|contracted procedure: k2395 
o|contracted procedure: k2408 
o|contracted procedure: k2432 
o|contracted procedure: k2459 
o|contracted procedure: k2463 
o|contracted procedure: k2466 
o|contracted procedure: k2469 
o|contracted procedure: k2493 
o|contracted procedure: k2497 
o|contracted procedure: k2515 
o|contracted procedure: k2533 
o|contracted procedure: k2537 
o|contracted procedure: k2567 
o|contracted procedure: k2570 
o|contracted procedure: k2596 
o|contracted procedure: k2592 
o|contracted procedure: k2604 
o|contracted procedure: k2608 
o|contracted procedure: k2625 
o|contracted procedure: k2628 
o|contracted procedure: k2631 
o|contracted procedure: k2642 
o|contracted procedure: k2654 
o|contracted procedure: k2679 
o|contracted procedure: k2688 
o|contracted procedure: k2716 
o|contracted procedure: k2719 
o|contracted procedure: k2734 
o|contracted procedure: k2747 
o|contracted procedure: k2756 
o|contracted procedure: k2769 
o|contracted procedure: k2777 
o|contracted procedure: k2781 
o|contracted procedure: k2792 
o|contracted procedure: k2806 
o|contracted procedure: k2815 
o|contracted procedure: k2828 
o|contracted procedure: k2844 
o|contracted procedure: k2847 
o|contracted procedure: k2861 
o|contracted procedure: k2857 
o|contracted procedure: k2854 
o|contracted procedure: k2870 
o|contracted procedure: k2889 
o|contracted procedure: k2897 
o|contracted procedure: k2901 
o|contracted procedure: k2908 
o|contracted procedure: k2905 
o|contracted procedure: k2917 
o|contracted procedure: k2936 
o|contracted procedure: k2943 
o|contracted procedure: k2940 
o|contracted procedure: k2961 
o|contracted procedure: k2957 
o|contracted procedure: k2973 
o|contracted procedure: k2996 
o|contracted procedure: k3003 
o|contracted procedure: k3010 
o|contracted procedure: k3090 
o|contracted procedure: k3097 
o|contracted procedure: k3094 
o|contracted procedure: k3106 
o|contracted procedure: k3159 
o|contracted procedure: k3166 
o|contracted procedure: k3185 
o|contracted procedure: k3240 
o|propagated global variable: r3241 ##sys#standard-output 
o|contracted procedure: k3248 
o|contracted procedure: k3126 
o|contracted procedure: k3252 
o|contracted procedure: k3268 
o|propagated global variable: r3269 ##sys#standard-output 
o|contracted procedure: k3272 
o|propagated global variable: r3273 ##sys#standard-output 
o|simplifications: ((let . 37)) 
o|removed binding forms: 200 
o|replaced variables: 63 
o|removed binding forms: 39 
o|customizable procedures: (loop566 doloop467468 doloop475476 doloop486487 doloop497498 doloop483484 k2435 k2361 bt-lp396 tp-lp389 doloop363364 doloop360361 add-wall356 doloop376377 doloop330331 doloop327328 lp273 doloop266267 lp258 search250 lp221 lp210 lp130 lp123 k1105 k1037) 
o|calls to known targets: 76 
o|identified direct recursive calls: f_1255 1 
o|identified direct recursive calls: f_1231 1 
o|fast box initializations: 21 
*/
/* end of file */
