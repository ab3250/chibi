; Copyright 1998 Lars T Hansen.              -*- scheme -*-
;
; $Id$
;
; Configuration file for the memstats structure offsets, will normally be
; included from globals.cfg.

(define-const mstat-wahi     0 "STAT_WALLOCATED_HI" #f "$mstat.wallocated-hi")
(define-const mstat-walo     1 "STAT_WALLOCATED_LO" #f "$mstat.wallocated-lo")
(define-const mstat-wchi     2 "STAT_WCOLLECTED_HI" #f "$mstat.wcollected-hi")
(define-const mstat-wclo     3 "STAT_WCOLLECTED_LO" #f "$mstat.wcollected-lo")
(define-const mstat-wcphi    4 "STAT_WCOPIED_HI" #f "$mstat.wcopied-hi")
(define-const mstat-wcplo    5 "STAT_WCOPIED_LO" #f "$mstat.wcopied-lo")
(define-const mstat-np-k     6 "STAT_NP_K" #f "$mstat.np-k")
(define-const mstat-np-j     7 "STAT_NP_J" #f "$mstat.np-j")
(define-const mstat-resets   8 "STAT_DOF_RESETS" #f "$mstat.dof-resets")
(define-const mstat-repeats  9 "STAT_DOF_REPEATS" #f "$mstat.dof-repeats")
(define-const mstat-gens    10 "STAT_GENERATIONS" #f "$mstat.generations")
(define-const mstat-rems    11 "STAT_REMSETS" #f "$mstat.remsets")
(define-const mstat-ffhi    12 "STAT_FFLUSHED_HI" #f "$mstat.fflushed-hi")
(define-const mstat-fflo    13 "STAT_FFLUSHED_LO" #f "$mstat.fflushed-lo")
(define-const mstat-wfhi    14 "STAT_WFLUSHED_HI" #f "$mstat.wflushed-hi")
(define-const mstat-wflo    15 "STAT_WFLUSHED_LO" #f "$mstat.wflushed-lo")
(define-const mstat-stkc    16 "STAT_STK_CREATED" #f "$mstat.stk-created")
(define-const mstat-frhi    17 "STAT_FRESTORED_HI" #f "$mstat.frestored-hi")
(define-const mstat-frlo    18 "STAT_FRESTORED_LO" #f "$mstat.frestored-lo")
(define-const mstat-wheap   19 "STAT_WORDS_HEAP" #f "$mstat.words-heap")
(define-const mstat-wrem    20 "STAT_WORDS_REMSET" #f "$mstat.words-remset")
(define-const mstat-wrts    21 "STAT_WORDS_RTS" #f "$mstat.words-rts")
(define-const mstat-swbaa   22 "STAT_SWB_ASSIGN" #f "$mstat.swb-assign")
(define-const mstat-swbyr   23 "STAT_SWB_LHS_OK" #f "$mstat.swb-lhs-ok")
(define-const mstat-swbnp   24 "STAT_SWB_RHS_CONST" #f "$mstat.swb-rhs-const")
(define-const mstat-swbnc   25 "STAT_SWB_NOTXGEN" #f "$mstat.swb-not-xgen")
(define-const mstat-swbat   26 "STAT_SWB_TRANS" #f "$mstat.swb-trans")
(define-const mstat-swbtot  27 "STAT_SWB_TOTAL" #f "$mstat.swb-total")

(define-const mstat-rtime   28 "STAT_RTIME" #f "$mstat.rtime")
(define-const mstat-stime   29 "STAT_STIME" #f "$mstat.stime")
(define-const mstat-utime   30 "STAT_UTIME" #f "$mstat.utime")
(define-const mstat-minflt  31 "STAT_MINFAULTS" #f "$mstat.minfaults")
(define-const mstat-majflt  32 "STAT_MAJFAULTS" #f "$mstat.majfaults")
(define-const mstat-heap-max 33 "STAT_HEAP_MAX" #f "$mstat.heap-max")
(define-const mstat-wmvhi   34 "STAT_WMOVED_HI" #f "$mstat.wmoved-hi")
(define-const mstat-wmvlo   35 "STAT_WMOVED_LO" #f "$mstat.wmoved-lo")

(define-const mstat-remset-max  36 "STAT_REMSET_MAX" #f "$mstat.remset-max")
(define-const mstat-rts-max     37 "STAT_RTS_MAX" #f "$mstat.rts-max")
(define-const mstat-wastage     38 "STAT_WORDS_WASTAGE" #f "$mstat.wastage")
(define-const mstat-wastage-max 39 "STAT_WASTAGE_MAX" #f "$mstat.wastage-max")

(define-const mstat-full-gcs    40 "STAT_FULL_GCS" #f "$mstat.full-gcs")
(define-const mstat-full-gctime 41 "STAT_FULL_GCTIME" #f "$mstat.full-gctime")
(define-const mstat-full-gctime-cpu 42
  "STAT_FULL_GCTIME_CPU" #f "$mstat.full-gctime-cpu")
(define-const mstat-full-cphi   43
  "STAT_FULL_COPIED_HI" #f "$mstat.full-copied-hi")
(define-const mstat-full-cplo   44
  "STAT_FULL_COPIED_LO" #f "$mstat.full-copied-lo")
(define-const mstat-full-mvhi   45
  "STAT_FULL_MOVED_HI" #f "$mstat.full-moved-hi")
(define-const mstat-full-mvlo   46
  "STAT_FULL_MOVED_LO" #f "$mstat.full-moved-lo")
(define-const mstat-full-mkhi   47
  "STAT_FULL_MARKED_HI" #f "$mstat.full-marked-hi")
(define-const mstat-full-mklo   48
  "STAT_FULL_MARKED_LO" #f "$mstat.full-marked-lo")
(define-const mstat-full-wmkhi  49
  "STAT_FULL_WMARKED_HI" #f "$mstat.full-words-marked-hi")
(define-const mstat-full-wmklo  50
  "STAT_FULL_WMARKED_LO" #f "$mstat.full-words-marked-lo")
(define-const mstat-full-trhi   51
  "STAT_FULL_PTRACED_HI" #f "$mstat.full-pointers-traced-hi")
(define-const mstat-full-trlo   52
  "STAT_FULL_PTRACED_LO" #f "$mstat.full-pointers-traced-lo")
(define-const mstat-wmem        53 "STAT_WORDS_MEM" #f "$mstat.words-mem")
(define-const mstat-wmem-max    54 
  "STAT_WORDS_MEM_MAX" #f "$mstat.words-mem-max")

(define-const mstat-gce_gctime_hi 55
  "STAT_GCE_GCTIME_HI" #f "$mstat.gce-gctime-hi")
(define-const mstat-gce_gctime_lo 56
  "STAT_GCE_GCTIME_LO" #f "$mstat.gce-gctime-lo")
(define-const mstat-gce_promtime_hi 57
  "STAT_GCE_PROMTIME_HI" #f "$mstat.gce-promtime-hi")
(define-const mstat-gce_promtime_lo 58
  "STAT_GCE_PROMTIME_LO" #f "$mstat.gce-promtime-lo")
(define-const mstat-gce_free_unused_hi 59
  "STAT_GCE_FREE_UNUSED_HI" #f "$mstat.gce-free-unused-hi")
(define-const mstat-gce_free_unused_lo 60
  "STAT_GCE_FREE_UNUSED_LO" #f "$mstat.gce-free-unused-lo")
(define-const mstat-gce_root_scan_gc_hi 61
  "STAT_GCE_ROOT_SCAN_GC_HI" #f "$mstat.gce-root-scan-gc-hi")
(define-const mstat-gce_root_scan_gc_lo 62
  "STAT_GCE_ROOT_SCAN_GC_LO" #f "$mstat.gce-root-scan-gc-lo")
(define-const mstat-gce_root_scan_prom_hi 63
  "STAT_GCE_ROOT_SCAN_PROM_HI" #f "$mstat.gce-root-scan-prom-hi")
(define-const mstat-gce_root_scan_prom_lo 64
  "STAT_GCE_ROOT_SCAN_PROM_LO" #f "$mstat.gce-root-scan-prom-lo")
(define-const mstat-gce_los_sweep_gc_hi 65
  "STAT_GCE_LOS_SWEEP_GC_HI" #f "$mstat.gce-los-sweep-gc-hi")
(define-const mstat-gce_los_sweep_gc_lo 66
  "STAT_GCE_LOS_SWEEP_GC_LO" #f "$mstat.gce-los-sweep-gc-lo")
(define-const mstat-gce_los_sweep_prom_hi 67
  "STAT_GCE_LOS_SWEEP_PROM_HI" #f "$mstat.gce-los-sweep-prom-hi")
(define-const mstat-gce_los_sweep_prom_lo 68
  "STAT_GCE_LOS_SWEEP_PROM_LO" #f "$mstat.gce-los-sweep-prom-lo")
(define-const mstat-gce_remset_scan_gc_hi 69
  "STAT_GCE_REMSET_SCAN_GC_HI" #f "$mstat.gce-remset-scan-gc-hi")
(define-const mstat-gce_remset_scan_gc_lo 70
  "STAT_GCE_REMSET_SCAN_GC_LO" #f "$mstat.gce-remset-scan-gc-lo")
(define-const mstat-gce_remset_scan_prom_hi 71
  "STAT_GCE_REMSET_SCAN_PROM_HI" #f "$mstat.gce-remset-scan-prom-hi")
(define-const mstat-gce_remset_scan_prom_lo 72
  "STAT_GCE_REMSET_SCAN_PROM_LO" #f "$mstat.gce-remset-scan-prom-lo")
(define-const mstat-gce_tospace_scan_gc_hi 73
  "STAT_GCE_TOSPACE_SCAN_GC_HI" #f "$mstat.gce-tospace-scan-gc-hi")
(define-const mstat-gce_tospace_scan_gc_lo 74
  "STAT_GCE_TOSPACE_SCAN_GC_LO" #f "$mstat.gce-tospace-scan-gc-lo")
(define-const mstat-gce_tospace_scan_prom_hi 75
  "STAT_GCE_TOSPACE_SCAN_PROM_HI" #f "$mstat.gce-tospace-scan-prom-hi")
(define-const mstat-gce_tospace_scan_prom_lo 76
  "STAT_GCE_TOSPACE_SCAN_PROM_LO" #f "$mstat.gce-tospace-scan-prom-lo")
(define-const mstat-gce_reset_after_gc_hi 77
  "STAT_GCE_RESET_AFTER_GC_HI" #f "$mstat.gce-reset-after-gc-hi")
(define-const mstat-gce_reset_after_gc_lo 78
  "STAT_GCE_RESET_AFTER_GC_LO" #f "$mstat.gce-reset-after-gc-lo")
(define-const mstat-gce_decrement_after_gc_hi 79
  "STAT_GCE_DECREMENT_AFTER_GC_HI" #f "$mstat.gce-decrement-after-gc-hi")
(define-const mstat-gce_decrement_after_gc_lo 80
  "STAT_GCE_DECREMENT_AFTER_GC_LO" #f "$mstat.gce-decrement-after-gc-lo")
(define-const mstat-gce_dof_remset_scan_hi 81
  "STAT_GCE_DOF_REMSET_SCAN_HI" #f "$mstat.gce-dof-remset-scan-hi")
(define-const mstat-gce_dof_remset_scan_lo 82
  "STAT_GCE_DOF_REMSET_SCAN_LO" #f "$mstat.gce-dof-remset-scan-lo")
(define-const mstat-gce_sweep_shadow_hi 83
  "STAT_GCE_SWEEP_SHADOW_HI" #f "$mstat.gce-sweep-shadow-hi")
(define-const mstat-gce_sweep_shadow_lo 84
  "STAT_GCE_SWEEP_SHADOW_LO" #f "$mstat.gce-sweep-shadow-lo")
(define-const mstat-gce_msgc_mark_hi 85
  "STAT_GCE_MSGC_MARK_HI" #f "$mstat.gce-msgc-mark-hi")
(define-const mstat-gce_msgc_mark_lo 86
  "STAT_GCE_MSGC_MARK_LO" #f "$mstat.gce-msgc-mark-lo")
(define-const mstat-gce_sweep_dof_sets_hi 87
  "STAT_GCE_SWEEP_DOF_SETS_HI" #f "$mstat.gce-sweep-dof-sets-hi")
(define-const mstat-gce_sweep_dof_sets_lo 88
  "STAT_GCE_SWEEP_DOF_SETS_LO" #f "$mstat.gce-sweep-dof-sets-lo")
(define-const mstat-gce_sweep_remset_hi 89
  "STAT_GCE_SWEEP_REMSET_HI" #f "$mstat.gce-sweep-remset-hi")
(define-const mstat-gce_sweep_remset_lo 90
  "STAT_GCE_SWEEP_REMSET_LO" #f "$mstat.gce-sweep-remset-lo")
(define-const mstat-gce_sweep_los_hi 91
  "STAT_GCE_SWEEP_LOS_HI" #f "$mstat.gce-sweep-los-hi")
(define-const mstat-gce_sweep_los_lo 92
  "STAT_GCE_SWEEP_LOS_LO" #f "$mstat.gce-sweep-los-lo")
(define-const mstat-gce_assimilate_prom_hi 93
  "STAT_GCE_ASSIMILATE_PROM_HI" #f "$mstat.gce-assimilate-prom-hi")
(define-const mstat-gce_assimilate_prom_lo 94
  "STAT_GCE_ASSIMILATE_PROM_LO" #f "$mstat.gce-assimilate-prom-lo")
(define-const mstat-gce_assimilate_gc_hi 95
  "STAT_GCE_ASSIMILATE_GC_HI" #f "$mstat.gce-assimilate-gc-hi")
(define-const mstat-gce_assimilate_gc_lo 96
  "STAT_GCE_ASSIMILATE_GC_LO" #f "$mstat.gce-assimilate-gc-lo")
(define-const mstat-GCE_COPIED_BY_GC 97
  "STAT_GCE_COPIED_BY_GC" #f "$mstat.gce-copied-by-gc")
(define-const mstat-GCE_COPIED_BY_PROM 98
  "STAT_GCE_COPIED_BY_PROM" #f "$mstat.gce-copied-by-prom")
(define-const mstat-GCE_WORDS_FORWARDED 99
  "STAT_GCE_WORDS_FORWARDED" #f "$mstat.gce-words-forwarded")
(define-const mstat-GCE_PTRS_FORWARDED 100
  "STAT_GCE_PTRS_FORWARDED" #f "$mstat.gce-ptrs-forwarded")
(define-const mstat-GCE_GC_BARRIER_HIT 101
  "STAT_GCE_GC_BARRIER_HIT" #f "$mstat.gce-gc-barrier-hit")
(define-const mstat-GCE_REMSET_LO_SCANNED 102
  "STAT_GCE_REMSET_LO_SCANNED" #f "$mstat.gce-remset-lo-scanned")
(define-const mstat-GCE_REMSET_LOW_SCANNED 103
  "STAT_GCE_REMSET_LOW_SCANNED" #f "$mstat.gce-remset-low-scanned")

(define-const mstat-max-cheney-gctime     104 
  "STAT_MAX_CHENEY_GCTIME" #f "$mstat.max-cheney-gctime")
(define-const mstat-max-cheney-gctime-cpu 105 
  "STAT_MAX_CHENEY_GCTIME_CPU" #f "$mstat.max-cheney-gctime-cpu")

(define-const mstat-max-remset-scan       106 "STAT_MAX_REMSET_SCAN" #f
  "$mstat.max-remset-scan")
(define-const mstat-max-remset-scan-cpu   107 "STAT_MAX_REMSET_SCAN_CPU" #f
  "$mstat.max-remset-scan-cpu")
(define-const mstat-total-remset-scan     108 "STAT_TOTAL_REMSET_SCAN" #f
  "$mstat.total-remset-scan")
(define-const mstat-total-remset-scan-cpu 109 "STAT_TOTAL_REMSET_SCAN_CPU" #f
  "$mstat.total-remset-scan-cpu")
(define-const mstat-remset-scan-count     110 "STAT_REMSET_SCAN_COUNT" #f
  "$mstat.remset-scan-count")

(define-const mstat-max-mark-pause        111 "STAT_MAX_MARK_PAUSE" #f
  "$mstat.max-mark-pause")
(define-const mstat-max-mark-pause-cpu    112 "STAT_MAX_MARK_PAUSE_CPU" #f
  "$mstat.max-mark-pause-cpu")
(define-const mstat-total-mark-pause      113 "STAT_TOTAL_MARK_PAUSE" #f
  "$mstat.total-mark-pause")
(define-const mstat-total-mark-pause-cpu  114 "STAT_TOTAL_MARK_PAUSE_CPU" #f
  "$mstat.total-mark-pause-cpu")
(define-const mstat-mark-pause-count      115 "STAT_MARK_PAUSE_COUNT" #f
  "$mstat.mark-pause-count")
(define-const mstat-max-entries-remset-scan 116 "STAT_MAX_ENTRIES_REMSET_SCAN" #f
  "$mstat.max-entries-remset-scan")
(define-const mstat-total-entries-remset-scan_hi 117 "STAT_TOTAL_ENTRIES_REMSET_SCAN_HI" #f
  "$mstat.total-entries-remset-scan-hi")
(define-const mstat-total-entries-remset-scan_lo 118 "STAT_TOTAL_ENTRIES_REMSET_SCAN_LO" #f
  "$mstat.total-entries-remset-scan-lo")

(define-const mstat-max-build-remset-summary       119
  "STAT_MAX_BUILD_REMSET_SUMMARY"       #f "$mstat.max-build-remset-summary")
(define-const mstat-max-build-remset-summary-cpu   120
  "STAT_MAX_BUILD_REMSET_SUMMARY_CPU"   #f
  "$mstat.max-build-remset-summary-cpu")
(define-const mstat-total-build-remset-summary     121
  "STAT_TOTAL_BUILD_REMSET_SUMMARY"     #f "$mstat.total-build-remset-summary")
(define-const mstat-total-build-remset-summary-cpu 122
  "STAT_TOTAL_BUILD_REMSET_SUMMARY_CPU" #f "$mstat.total-build-remset-summary-cpu")
(define-const mstat-build-remset-summary-count     123
  "STAT_BUILD_REMSET_SUMMARY_COUNT"     #f "$mstat.build-remset-summary-count")

(define-const mstat-max-majorgc-pause       124 "STAT_MAX_MAJORGC_PAUSE"     
  #f "$mstat.max-majorgc-pause")
(define-const mstat-max-majorgc-pause-cpu   125 "STAT_MAX_MAJORGC_PAUSE_CPU" 
  #f "$mstat.max-majorgc-pause-cpu")
(define-const mstat-total-majorgc-pause     126 "STAT_TOTAL_MAJORGC_PAUSE"
  #f "$mstat.total-majorgc-pause")
(define-const mstat-total-majorgc-pause-cpu 127 "STAT_TOTAL_MAJORGC_PAUSE_CPU" 
  #f "$mstat.total-majorgc-pause-cpu")
(define-const mstat-majorgc-pause-count     128 "STAT_MAJORGC_PAUSE_COUNT" 
  #f "$mstat.majorgc-pause-count")

(define-const mstat-max-minorgc-pause       129 "STAT_MAX_MINORGC_PAUSE"     
  #f "$mstat.max-minorgc-pause")
(define-const mstat-max-minorgc-pause-cpu   130 "STAT_MAX_MINORGC_PAUSE_CPU" 
  #f "$mstat.max-minorgc-pause-cpu")
(define-const mstat-total-minorgc-pause     131 "STAT_TOTAL_MINORGC_PAUSE"
  #f "$mstat.total-minorgc-pause")
(define-const mstat-total-minorgc-pause-cpu 132 "STAT_TOTAL_MINORGC_PAUSE_CPU" 
  #f "$mstat.total-minorgc-pause-cpu")
(define-const mstat-minorgc-pause-count     133 "STAT_MINORGC_PAUSE_COUNT" 
  #f "$mstat.minorgc-pause-count")

(define-const mstat-wsumm      134 "STAT_WORDS_SUMMSETS" 
  #f "$mstat.words-summsets")
(define-const mstat-summ-max   135 "STAT_SUMMSETS_MAX" 
  #f "$mstat.summsets-max")
(define-const mstat-wsmircy    136 "STAT_WORDS_SMIRCY" 
  #f "$mstat.words-smircy")
(define-const mstat-smircy-max 137 "STAT_SMIRCY_MAX" 
  #f "$mstat.smircy-max")

;;; Most of the below definitions were generated via the following code 
;;; (which builds up to the const-defns as the main entry point),
;;; with some manual cleanup (such as replacing _0_ with _00_)
;;; > (define (make-const-defn low high num scm-name c-name) 
;;;     (let* ((n->s (lambda (n) 
;;;                    (let ((s (number->string n))) 
;;;                      (string-append (if (< n 10) "0" "") s))))
;;;            (l (n->s low))
;;;            (h (n->s high)))
;;;       `(define-const ,(string->symbol
;;;                         (string-append "mstat-" scm-name "-" l "-" h))
;;;                      ,num
;;;                      ,(string-append "STAT_" c-name "_" l "_" h)  
;;;                      #f 
;;;                      ,(string-append "$mstat." scm-name "-" l "-" h))))
;;; > (define (sequence low high incr) 
;;;     (if (> low high) '() (cons low (sequence (+ low incr) high incr))))
;;; > (define (make-ranges low high incr) 
;;;     (map list (sequence low (- high incr) incr) 
;;;               (sequence (+ low incr) high incr)))
;;; > (define (names->writer scm-name c-name)
;;;     (lambda (range num)
;;;       (write (make-const-defn (car range) (cadr range) num scm-name c-name))
;;;       (newline)))                                                            
;;; > (define (const-defns scm-name c-name lo hi incr start-seq)
;;;     (let* ((func (names->writer scm-name c-name))
;;;            (rng  (make-ranges lo hi incr))
;;;            (finis-seq (+ start-seq (length rng) -1))
;;;            (seq  (sequence start-seq finis-seq 1)))
;;;       (for-each func rng seq)
;;;       (+ finis-seq 1)))                                       
;;;
;;;
;;;
;;;> (const-defns "count-collect" "COUNT_COLLECT" 0   100  10 138)
(define-const mstat-count-collect-00-10 138 "STAT_COUNT_COLLECT_00_10" #f "$mstat.count-collect-00-10")
(define-const mstat-count-collect-10-20 139 "STAT_COUNT_COLLECT_10_20" #f "$mstat.count-collect-10-20")
(define-const mstat-count-collect-20-30 140 "STAT_COUNT_COLLECT_20_30" #f "$mstat.count-collect-20-30")
(define-const mstat-count-collect-30-40 141 "STAT_COUNT_COLLECT_30_40" #f "$mstat.count-collect-30-40")
(define-const mstat-count-collect-40-50 142 "STAT_COUNT_COLLECT_40_50" #f "$mstat.count-collect-40-50")
(define-const mstat-count-collect-50-60 143 "STAT_COUNT_COLLECT_50_60" #f "$mstat.count-collect-50-60")
(define-const mstat-count-collect-60-70 144 "STAT_COUNT_COLLECT_60_70" #f "$mstat.count-collect-60-70")
(define-const mstat-count-collect-70-80 145 "STAT_COUNT_COLLECT_70_80" #f "$mstat.count-collect-70-80")
(define-const mstat-count-collect-80-90 146 "STAT_COUNT_COLLECT_80_90" #f "$mstat.count-collect-80-90")
(define-const mstat-count-collect-90-100 147 "STAT_COUNT_COLLECT_90_100" #f "$mstat.count-collect-90-100")
;;;> (const-defns "count-collect" "COUNT_COLLECT" 100   1000  100 133)
(define-const mstat-count-collect-100-200 148 "STAT_COUNT_COLLECT_100_200" #f "$mstat.count-collect-100-200")
(define-const mstat-count-collect-200-300 149 "STAT_COUNT_COLLECT_200_300" #f "$mstat.count-collect-200-300")
(define-const mstat-count-collect-300-400 150 "STAT_COUNT_COLLECT_300_400" #f "$mstat.count-collect-300-400")
(define-const mstat-count-collect-400-500 151 "STAT_COUNT_COLLECT_400_500" #f "$mstat.count-collect-400-500")
(define-const mstat-count-collect-500-600 152 "STAT_COUNT_COLLECT_500_600" #f "$mstat.count-collect-500-600")
(define-const mstat-count-collect-600-700 153 "STAT_COUNT_COLLECT_600_700" #f "$mstat.count-collect-600-700")
(define-const mstat-count-collect-700-800 154 "STAT_COUNT_COLLECT_700_800" #f "$mstat.count-collect-700-800")
(define-const mstat-count-collect-800-900 155 "STAT_COUNT_COLLECT_800_900" #f "$mstat.count-collect-800-900")
(define-const mstat-count-collect-900-1000 156 "STAT_COUNT_COLLECT_900_1000" #f "$mstat.count-collect-900-1000")

(define-const mstat-count-collect-1000-2000 157 "STAT_COUNT_COLLECT_1000_2000" #f "$mstat.count-collect-1000-2000")
(define-const mstat-count-collect-geq-2000 158 "STAT_COUNT_COLLECT_GEQ_2000" #f "$mstat.count-collect-geq-2000")

;;;> (const-defns "count-minorgc" "COUNT_MINORGC" 0   100  10 144)
(define-const mstat-count-minorgc-00-10 159 "STAT_COUNT_MINORGC_00_10" #f "$mstat.count-minorgc-00-10")
(define-const mstat-count-minorgc-10-20 160 "STAT_COUNT_MINORGC_10_20" #f "$mstat.count-minorgc-10-20")
(define-const mstat-count-minorgc-20-30 161 "STAT_COUNT_MINORGC_20_30" #f "$mstat.count-minorgc-20-30")
(define-const mstat-count-minorgc-30-40 162 "STAT_COUNT_MINORGC_30_40" #f "$mstat.count-minorgc-30-40")
(define-const mstat-count-minorgc-40-50 163 "STAT_COUNT_MINORGC_40_50" #f "$mstat.count-minorgc-40-50")
(define-const mstat-count-minorgc-50-60 164 "STAT_COUNT_MINORGC_50_60" #f "$mstat.count-minorgc-50-60")
(define-const mstat-count-minorgc-60-70 165 "STAT_COUNT_MINORGC_60_70" #f "$mstat.count-minorgc-60-70")
(define-const mstat-count-minorgc-70-80 166 "STAT_COUNT_MINORGC_70_80" #f "$mstat.count-minorgc-70-80")
(define-const mstat-count-minorgc-80-90 167 "STAT_COUNT_MINORGC_80_90" #f "$mstat.count-minorgc-80-90")
(define-const mstat-count-minorgc-90-100 168 "STAT_COUNT_MINORGC_90_100" #f "$mstat.count-minorgc-90-100")
;;;> (const-defns "count-minorgc" "COUNT_MINORGC" 100   1000  100 169)
(define-const mstat-count-minorgc-100-200 169 "STAT_COUNT_MINORGC_100_200" #f "$mstat.count-minorgc-100-200")
(define-const mstat-count-minorgc-200-300 170 "STAT_COUNT_MINORGC_200_300" #f "$mstat.count-minorgc-200-300")
(define-const mstat-count-minorgc-300-400 171 "STAT_COUNT_MINORGC_300_400" #f "$mstat.count-minorgc-300-400")
(define-const mstat-count-minorgc-400-500 172 "STAT_COUNT_MINORGC_400_500" #f "$mstat.count-minorgc-400-500")
(define-const mstat-count-minorgc-500-600 173 "STAT_COUNT_MINORGC_500_600" #f "$mstat.count-minorgc-500-600")
(define-const mstat-count-minorgc-600-700 174 "STAT_COUNT_MINORGC_600_700" #f "$mstat.count-minorgc-600-700")
(define-const mstat-count-minorgc-700-800 175 "STAT_COUNT_MINORGC_700_800" #f "$mstat.count-minorgc-700-800")
(define-const mstat-count-minorgc-800-900 176 "STAT_COUNT_MINORGC_800_900" #f "$mstat.count-minorgc-800-900")
(define-const mstat-count-minorgc-900-1000 177 "STAT_COUNT_MINORGC_900_1000" #f "$mstat.count-minorgc-900-1000")

(define-const mstat-count-minorgc-1000-2000 178 "STAT_COUNT_MINORGC_1000_2000" #f "$mstat.count-minorgc-1000-2000")
(define-const mstat-count-minorgc-geq-2000 179 "STAT_COUNT_MINORGC_GEQ_2000" #f "$mstat.count-minorgc-geq-2000")

;;;> (const-defns "count-majorgc" "COUNT_MAJORGC" 0   100  10 165)
(define-const mstat-count-majorgc-00-10 180 "STAT_COUNT_MAJORGC_00_10" #f "$mstat.count-majorgc-00-10")
(define-const mstat-count-majorgc-10-20 181 "STAT_COUNT_MAJORGC_10_20" #f "$mstat.count-majorgc-10-20")
(define-const mstat-count-majorgc-20-30 182 "STAT_COUNT_MAJORGC_20_30" #f "$mstat.count-majorgc-20-30")
(define-const mstat-count-majorgc-30-40 183 "STAT_COUNT_MAJORGC_30_40" #f "$mstat.count-majorgc-30-40")
(define-const mstat-count-majorgc-40-50 184 "STAT_COUNT_MAJORGC_40_50" #f "$mstat.count-majorgc-40-50")
(define-const mstat-count-majorgc-50-60 185 "STAT_COUNT_MAJORGC_50_60" #f "$mstat.count-majorgc-50-60")
(define-const mstat-count-majorgc-60-70 186 "STAT_COUNT_MAJORGC_60_70" #f "$mstat.count-majorgc-60-70")
(define-const mstat-count-majorgc-70-80 187 "STAT_COUNT_MAJORGC_70_80" #f "$mstat.count-majorgc-70-80")
(define-const mstat-count-majorgc-80-90 188 "STAT_COUNT_MAJORGC_80_90" #f "$mstat.count-majorgc-80-90")
(define-const mstat-count-majorgc-90-100 189 "STAT_COUNT_MAJORGC_90_100" #f "$mstat.count-majorgc-90-100")
;;;> (const-defns "count-majorgc" "COUNT_MAJORGC" 100   1000  100 190)
(define-const mstat-count-majorgc-100-200 190 "STAT_COUNT_MAJORGC_100_200" #f "$mstat.count-majorgc-100-200")
(define-const mstat-count-majorgc-200-300 191 "STAT_COUNT_MAJORGC_200_300" #f "$mstat.count-majorgc-200-300")
(define-const mstat-count-majorgc-300-400 192 "STAT_COUNT_MAJORGC_300_400" #f "$mstat.count-majorgc-300-400")
(define-const mstat-count-majorgc-400-500 193 "STAT_COUNT_MAJORGC_400_500" #f "$mstat.count-majorgc-400-500")
(define-const mstat-count-majorgc-500-600 194 "STAT_COUNT_MAJORGC_500_600" #f "$mstat.count-majorgc-500-600")
(define-const mstat-count-majorgc-600-700 195 "STAT_COUNT_MAJORGC_600_700" #f "$mstat.count-majorgc-600-700")
(define-const mstat-count-majorgc-700-800 196 "STAT_COUNT_MAJORGC_700_800" #f "$mstat.count-majorgc-700-800")
(define-const mstat-count-majorgc-800-900 197 "STAT_COUNT_MAJORGC_800_900" #f "$mstat.count-majorgc-800-900")
(define-const mstat-count-majorgc-900-1000 198 "STAT_COUNT_MAJORGC_900_1000" #f "$mstat.count-majorgc-900-1000")

(define-const mstat-count-majorgc-1000-2000 199 "STAT_COUNT_MAJORGC_1000_2000" #f "$mstat.count-majorgc-1000-2000")
(define-const mstat-count-majorgc-geq-2000 200 "STAT_COUNT_MAJORGC_GEQ_2000" #f "$mstat.count-majorgc-geq-2000")

;;;> (const-defns "count-summarize" "COUNT_SUMMARIZE" 0   100  10 201)
(define-const mstat-count-summarize-00-10 201 "STAT_COUNT_SUMMARIZE_00_10" #f "$mstat.count-summarize-00-10")
(define-const mstat-count-summarize-10-20 202 "STAT_COUNT_SUMMARIZE_10_20" #f "$mstat.count-summarize-10-20")
(define-const mstat-count-summarize-20-30 203 "STAT_COUNT_SUMMARIZE_20_30" #f "$mstat.count-summarize-20-30")
(define-const mstat-count-summarize-30-40 204 "STAT_COUNT_SUMMARIZE_30_40" #f "$mstat.count-summarize-30-40")
(define-const mstat-count-summarize-40-50 205 "STAT_COUNT_SUMMARIZE_40_50" #f "$mstat.count-summarize-40-50")
(define-const mstat-count-summarize-50-60 206 "STAT_COUNT_SUMMARIZE_50_60" #f "$mstat.count-summarize-50-60")
(define-const mstat-count-summarize-60-70 207 "STAT_COUNT_SUMMARIZE_60_70" #f "$mstat.count-summarize-60-70")
(define-const mstat-count-summarize-70-80 208 "STAT_COUNT_SUMMARIZE_70_80" #f "$mstat.count-summarize-70-80")
(define-const mstat-count-summarize-80-90 209 "STAT_COUNT_SUMMARIZE_80_90" #f "$mstat.count-summarize-80-90")
(define-const mstat-count-summarize-90-100 210 "STAT_COUNT_SUMMARIZE_90_100" #f "$mstat.count-summarize-90-100")
;;;> (const-defns "count-summarize" "COUNT_SUMMARIZE" 100   1000  100 211)
(define-const mstat-count-summarize-100-200 211 "STAT_COUNT_SUMMARIZE_100_200" #f "$mstat.count-summarize-100-200")
(define-const mstat-count-summarize-200-300 212 "STAT_COUNT_SUMMARIZE_200_300" #f "$mstat.count-summarize-200-300")
(define-const mstat-count-summarize-300-400 213 "STAT_COUNT_SUMMARIZE_300_400" #f "$mstat.count-summarize-300-400")
(define-const mstat-count-summarize-400-500 214 "STAT_COUNT_SUMMARIZE_400_500" #f "$mstat.count-summarize-400-500")
(define-const mstat-count-summarize-500-600 215 "STAT_COUNT_SUMMARIZE_500_600" #f "$mstat.count-summarize-500-600")
(define-const mstat-count-summarize-600-700 216 "STAT_COUNT_SUMMARIZE_600_700" #f "$mstat.count-summarize-600-700")
(define-const mstat-count-summarize-700-800 217 "STAT_COUNT_SUMMARIZE_700_800" #f "$mstat.count-summarize-700-800")
(define-const mstat-count-summarize-800-900 218 "STAT_COUNT_SUMMARIZE_800_900" #f "$mstat.count-summarize-800-900")
(define-const mstat-count-summarize-900-1000 219 "STAT_COUNT_SUMMARIZE_900_1000" #f "$mstat.count-summarize-900-1000")

(define-const mstat-count-summarize-1000-2000 220 "STAT_COUNT_SUMMARIZE_1000_2000" #f "$mstat.count-summarize-1000-2000")
(define-const mstat-count-summarize-geq-2000 221 "STAT_COUNT_SUMMARIZE_GEQ_2000" #f "$mstat.count-summarize-geq-2000")

;;;> (const-defns "count-minor-runs" "COUNT_MINOR_RUNS" 0   10  2 222)
(define-const mstat-count-minor-runs-00-02 222 "STAT_COUNT_MINOR_RUNS_00_02" #f "$mstat.count-minor-runs-00-02")
(define-const mstat-count-minor-runs-02-04 223 "STAT_COUNT_MINOR_RUNS_02_04" #f "$mstat.count-minor-runs-02-04")
(define-const mstat-count-minor-runs-04-06 224 "STAT_COUNT_MINOR_RUNS_04_06" #f "$mstat.count-minor-runs-04-06")
(define-const mstat-count-minor-runs-06-08 225 "STAT_COUNT_MINOR_RUNS_06_08" #f "$mstat.count-minor-runs-06-08")
(define-const mstat-count-minor-runs-08-10 226 "STAT_COUNT_MINOR_RUNS_08_10" #f "$mstat.count-minor-runs-08-10")
;;;> (const-defns "count-minor-runs" "COUNT_MINOR_RUNS" 10   100  10 227)
(define-const mstat-count-minor-runs-10-20 227 "STAT_COUNT_MINOR_RUNS_10_20" #f "$mstat.count-minor-runs-10-20")
(define-const mstat-count-minor-runs-20-30 228 "STAT_COUNT_MINOR_RUNS_20_30" #f "$mstat.count-minor-runs-20-30")
(define-const mstat-count-minor-runs-30-40 229 "STAT_COUNT_MINOR_RUNS_30_40" #f "$mstat.count-minor-runs-30-40")
(define-const mstat-count-minor-runs-40-50 230 "STAT_COUNT_MINOR_RUNS_40_50" #f "$mstat.count-minor-runs-40-50")
(define-const mstat-count-minor-runs-50-60 231 "STAT_COUNT_MINOR_RUNS_50_60" #f "$mstat.count-minor-runs-50-60")
(define-const mstat-count-minor-runs-60-70 232 "STAT_COUNT_MINOR_RUNS_60_70" #f "$mstat.count-minor-runs-60-70")
(define-const mstat-count-minor-runs-70-80 233 "STAT_COUNT_MINOR_RUNS_70_80" #f "$mstat.count-minor-runs-70-80")
(define-const mstat-count-minor-runs-80-90 234 "STAT_COUNT_MINOR_RUNS_80_90" #f "$mstat.count-minor-runs-80-90")
(define-const mstat-count-minor-runs-90-100 235 "STAT_COUNT_MINOR_RUNS_90_100" #f "$mstat.count-minor-runs-90-100")
;;;> (const-defns "count-minor-runs" "COUNT_MINOR_RUNS" 100   1000  100 236)
(define-const mstat-count-minor-runs-100-200 236 "STAT_COUNT_MINOR_RUNS_100_200" #f "$mstat.count-minor-runs-100-200")
(define-const mstat-count-minor-runs-200-300 237 "STAT_COUNT_MINOR_RUNS_200_300" #f "$mstat.count-minor-runs-200-300")
(define-const mstat-count-minor-runs-300-400 238 "STAT_COUNT_MINOR_RUNS_300_400" #f "$mstat.count-minor-runs-300-400")
(define-const mstat-count-minor-runs-400-500 239 "STAT_COUNT_MINOR_RUNS_400_500" #f "$mstat.count-minor-runs-400-500")
(define-const mstat-count-minor-runs-500-600 240 "STAT_COUNT_MINOR_RUNS_500_600" #f "$mstat.count-minor-runs-500-600")
(define-const mstat-count-minor-runs-600-700 241 "STAT_COUNT_MINOR_RUNS_600_700" #f "$mstat.count-minor-runs-600-700")
(define-const mstat-count-minor-runs-700-800 242 "STAT_COUNT_MINOR_RUNS_700_800" #f "$mstat.count-minor-runs-700-800")
(define-const mstat-count-minor-runs-800-900 243 "STAT_COUNT_MINOR_RUNS_800_900" #f "$mstat.count-minor-runs-800-900")
(define-const mstat-count-minor-runs-900-1000 244 "STAT_COUNT_MINOR_RUNS_900_1000" #f "$mstat.count-minor-runs-900-1000")

(define-const mstat-count-minor-runs-1000-2000 245 "STAT_COUNT_MINOR_RUNS_1000_2000" #f "$mstat.count-minor-runs-1000-2000")
(define-const mstat-count-minor-runs-geq-2000 246 "STAT_COUNT_MINOR_RUNS_GEQ_2000" #f "$mstat.count-minor-runs-geq-2000")

(define-const mstat-max-mutator-paused            247 "STAT_MAX_MUTATOR_PAUSED" 
  #f "$mstat.max-mutator-paused")
(define-const mstat-max-mutator-paused-cpu        248 "STAT_MAX_MUTATOR_PAUSED_CPU"
  #f "$mstat.max-mutator-paused-cpu")

(define-const mstat-max-refine-remset       249
  "STAT_MAX_REFINE_REMSET"       #f "$mstat.max-refine-remset")
(define-const mstat-max-refine-remset-cpu   250
  "STAT_MAX_REFINE_REMSET_CPU"   #f "$mstat.max-refine-remset-cpu")
(define-const mstat-total-refine-remset     251
  "STAT_TOTAL_REFINE_REMSET"     #f "$mstat.total-refine-remset")
(define-const mstat-total-refine-remset-cpu 252
  "STAT_TOTAL_REFINE_REMSET_CPU" #f "$mstat.total-refine-remset-cpu")
(define-const mstat-refine-remset-count     253
  "STAT_REFINE_REMSET_COUNT"     #f "$mstat.refine-remset-count")

(define-const mstat-major-faults-during-max-mutator-pause 254
  "STAT_MAJOR_FAULTS_DURING_MAX_MUTATOR_PAUSE" #f 
  "$mstat.major-faults-during-max-mutator-pause")
(define-const mstat-minor-faults-during-max-mutator-pause 255
  "STAT_MINOR_FAULTS_DURING_MAX_MUTATOR_PAUSE" #f 
  "$mstat.minor-faults-during-max-mutator-pause")
(define-const mstat-major-faults-total-during-all-mutator-pauses 256
  "STAT_MAJOR_FAULTS_DURING_ALL_MUTATOR_PAUSES" #f 
  "$mstat.major-faults-during-all-mutator-pauses")
(define-const mstat-minor-faults-total-during-all-mutator-pauses 257
  "STAT_MINOR_FAULTS_DURING_ALL_MUTATOR_PAUSES" #f 
  "$mstat.minor-faults-during-all-mutator-pauses")

(define-const mstat-size        258 "STAT_VSIZE" #f "$mstat.v-size")

; Runtime statistics -- per-generation.

(define-const mstat-g-gc     0 "STAT_G_GC_COUNT" #f "$mstat.g-gc-count")
(define-const mstat-g-pr     1 "STAT_G_PROM_COUNT" #f "$mstat.g-prom-count")
(define-const mstat-g-time   2 "STAT_G_GCTIME" #f "$mstat.g-gctime")
(define-const mstat-g-live   3 "STAT_G_WLIVE" #f "$mstat.g-wlive")
(define-const mstat-g-alloc  4 "STAT_G_ALLOC" #f "$mstat.g-alloc")
(define-const mstat-g-target 5 "STAT_G_TARGET" #f "$mstat.g-target")
(define-const mstat-g-ptime  6 "STAT_G_PROMTIME" #f "$mstat.g-promtime")
(define-const mstat-g-majid  7 "STAT_G_MAJOR_ID" #f "$mstat.g-major-id")
(define-const mstat-g-minid  8 "STAT_G_MINOR_ID" #f "$mstat.g-minor-id")
(define-const mstat-g-prcpu  9 
  "STAT_G_PROMTIME_CPU" #f "$mstat.g-promtime-cpu")
(define-const mstat-g-gccpu 10 "STAT_G_GCTIME_CPU" #f "$mstat.g-gctime-cpu")

(define-const mstat-g-size  11 "STAT_G_SIZE" #f "$mstat.g-size")


; Runtime statistics -- per remembered set.

(define-const mstat-r-apool      0 "STAT_R_ALLOC" #f "$mstat.r-alloc")
(define-const mstat-r-upool      1 "STAT_R_USED" #f "$mstat.r-used")
(define-const mstat-r-ahash      2 "STAT_R_LIVE" #f "$mstat.r-live")
(define-const mstat-r-hrhi       3 "STAT_R_HREC_HI" #f "$mstat.r-hrec-hi")
(define-const mstat-r-hrlo       4 "STAT_R_HREC_LO" #f "$mstat.r-hrec-lo")
(define-const mstat-r-hchi       5 "STAT_R_HREM_HI" #f "$mstat.r-hrem-hi")
(define-const mstat-r-hclo       6 "STAT_R_HREM_LO" #f "$mstat.r-hrem-lo")
(define-const mstat-r-hshi       7 "STAT_R_HSCAN_HI" #f "$mstat.r-hscan-hi")
(define-const mstat-r-hslo       8 "STAT_R_HSCAN_LO" #f "$mstat.r-hscan-lo")
(define-const mstat-r-wshi       9 "STAT_R_WSCAN_HI" #f "$mstat.r-wscan-hi")
(define-const mstat-r-wslo      10 "STAT_R_WSCAN_LO" #f "$mstat.r-wscan-lo")
(define-const mstat-r-srhi      11 "STAT_R_SSBREC_HI" #f "$mstat.r-ssbrec-hi")
(define-const mstat-r-srlo      12 "STAT_R_SSBREC_LO" #f "$mstat.r-ssbrec-lo")
(define-const mstat-r-cleared   13 "STAT_R_CLEARED" #f "$mstat.r-cleared")
(define-const mstat-r-scanned   14 "STAT_R_SCANNED" #f "$mstat.r-scanned")
(define-const mstat-r-compacted 15 "STAT_R_COMPACTED" #f "$mstat.r-compacted")
(define-const mstat-r-max-size  16 "STAT_R_MAX_SIZE" #f "$mstat.r-max-size")
(define-const mstat-r-majid     17 "STAT_R_MAJOR_ID" #f "$mstat.r-major-id")
(define-const mstat-r-minid     18 "STAT_R_MINOR_ID" #f "$mstat.r-minor-id")

(define-const mstat-r-max-hscan 19 "STAT_R_MAX_HSCAN" #f "$mstat.r-max-hscan")
(define-const mstat-r-max-wscan 20 "STAT_R_MAX_WSCAN" #f "$mstat.r-max-wscan")

(define-const mstat-r-size      21 "STAT_R_SIZE" #f "$mstat.r-size")
